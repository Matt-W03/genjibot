{
  "$schema": "https://raw.githubusercontent.com/schemastore/schemastore/master/src/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "QDPY",
          "fullName": "Qodana for Python",
          "version": "223.8385.67",
          "rules": [],
          "taxa": [
            {
              "id": "EditorConfig",
              "name": "EditorConfig"
            },
            {
              "id": "Jupyter",
              "name": "Jupyter"
            },
            {
              "id": "Python",
              "name": "Python"
            },
            {
              "id": "PostgreSQL",
              "name": "PostgreSQL"
            },
            {
              "id": "Google App Engine (Python)",
              "name": "Google App Engine (Python)"
            },
            {
              "id": "SQL",
              "name": "SQL"
            },
            {
              "id": "XML",
              "name": "XML"
            },
            {
              "id": "YAML",
              "name": "YAML"
            },
            {
              "id": "JSON and JSON5",
              "name": "JSON and JSON5"
            },
            {
              "id": "MongoJS",
              "name": "MongoJS"
            },
            {
              "id": "RegExp",
              "name": "RegExp"
            },
            {
              "id": "Properties files",
              "name": "Properties files"
            },
            {
              "id": "MySQL",
              "name": "MySQL"
            },
            {
              "id": "CSS",
              "name": "CSS"
            },
            {
              "id": "Django",
              "name": "Django"
            },
            {
              "id": "HTML",
              "name": "HTML"
            },
            {
              "id": "CSS/Probable bugs",
              "name": "Probable bugs",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 13,
                    "toolComponent": {
                      "name": "QDPY"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "General",
              "name": "General"
            },
            {
              "id": "HTML/Accessibility",
              "name": "Accessibility",
              "relationships": [
                {
                  "target": {
                    "id": "HTML",
                    "index": 15,
                    "toolComponent": {
                      "name": "QDPY"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SQL server",
              "name": "SQL server"
            },
            {
              "id": "CSS/Invalid elements",
              "name": "Invalid elements",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 13,
                    "toolComponent": {
                      "name": "QDPY"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Structural search",
              "name": "Structural search"
            },
            {
              "id": "Dependency analysis",
              "name": "Dependency analysis"
            },
            {
              "id": "CSS/Code style issues",
              "name": "Code style issues",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 13,
                    "toolComponent": {
                      "name": "QDPY"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Ini files",
              "name": "Ini files"
            },
            {
              "id": "RELAX NG",
              "name": "RELAX NG"
            },
            {
              "id": "Proofreading",
              "name": "Proofreading"
            },
            {
              "id": "Pyramid",
              "name": "Pyramid"
            },
            {
              "id": "Oracle",
              "name": "Oracle"
            },
            {
              "id": "Internationalization",
              "name": "Internationalization"
            },
            {
              "id": "Version control",
              "name": "Version control"
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        },
        "extensions": [
          {
            "name": "org.editorconfig.editorconfigjetbrains",
            "version": "223.8385",
            "rules": [
              {
                "id": "EditorConfigCharClassRedundancy",
                "shortDescription": {
                  "text": "Unnecessary character class"
                },
                "fullDescription": {
                  "text": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example '[a]'→'a'.",
                  "markdown": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example `[a]`→`a`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigDeprecatedDescriptor",
                "shortDescription": {
                  "text": "Deprecated property"
                },
                "fullDescription": {
                  "text": "Reports EditorConfig properties that are no longer supported.",
                  "markdown": "Reports EditorConfig properties that are no longer supported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationUniqueness",
                "shortDescription": {
                  "text": "Extra top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports multiple top-level declarations. There can be only one optional “root=true” top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed.",
                  "markdown": "Reports multiple top-level declarations. There can be only one optional \"root=true\" top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigNumerousWildcards",
                "shortDescription": {
                  "text": "Too many wildcards"
                },
                "fullDescription": {
                  "text": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues.",
                  "markdown": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigWildcardRedundancy",
                "shortDescription": {
                  "text": "Redundant wildcard"
                },
                "fullDescription": {
                  "text": "Reports wildcards that become redundant when the “**” wildcard is used in the same section. The “**” wildcard defines a broader set of files than any other wildcard. That is why, any other wildcard used in the same section has no affect and can be removed.",
                  "markdown": "Reports wildcards that become redundant when the \"\\*\\*\" wildcard is used in the same section.\n\n\nThe \"\\*\\*\" wildcard defines a broader set of files than any other wildcard.\nThat is why, any other wildcard used in the same section has no affect and can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPartialOverride",
                "shortDescription": {
                  "text": "Overlapping sections"
                },
                "fullDescription": {
                  "text": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: '[{foo,bar}]' and '[{foo,bas}]' both contain “foo”.",
                  "markdown": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: `[{foo,bar}]` and `[{foo,bas}]` both contain \"foo\"."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptySection",
                "shortDescription": {
                  "text": "Empty section"
                },
                "fullDescription": {
                  "text": "Reports sections that do not contain any EditorConfig properties.",
                  "markdown": "Reports sections that do not contain any EditorConfig properties."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigHeaderUniqueness",
                "shortDescription": {
                  "text": "EditorConfig section is not unique"
                },
                "fullDescription": {
                  "text": "Reports sections that define the same file pattern as other sections.",
                  "markdown": "Reports sections that define the same file pattern as other sections."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowingOption",
                "shortDescription": {
                  "text": "Overriding property"
                },
                "fullDescription": {
                  "text": "Reports properties that override the same properties defined earlier in the file. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes the same files as '[*.java]' but also sets indent_size to value 2. Thus the first declaration 'indent_size=4'will be ignored.",
                  "markdown": "Reports properties that override the same properties defined earlier in the file.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes the same files as `[*.java]` but also sets indent_size to value 2. Thus the first declaration `indent_size=4`will be ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigListAcceptability",
                "shortDescription": {
                  "text": "Unexpected value list"
                },
                "fullDescription": {
                  "text": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified.",
                  "markdown": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowedOption",
                "shortDescription": {
                  "text": "Overridden property"
                },
                "fullDescription": {
                  "text": "Reports properties that are already defined in other sections. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes all '*.java' files too but it also redefines indent_size. As a result the value 2 will be used for files matching '*.java'.",
                  "markdown": "Reports properties that are already defined in other sections.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes all `*.java` files too but it also redefines indent_size. As a result the value 2 will be used for files matching `*.java`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptyHeader",
                "shortDescription": {
                  "text": "Empty header"
                },
                "fullDescription": {
                  "text": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by 'gitignore'.",
                  "markdown": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by `gitignore`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueCorrectness",
                "shortDescription": {
                  "text": "Invalid property value"
                },
                "fullDescription": {
                  "text": "Reports property values that do not meet value restrictions. For example, some properties may be only “true” or “false”, others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them.",
                  "markdown": "Reports property values that do not meet value restrictions. For example, some properties may be only \"true\" or \"false\", others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueUniqueness",
                "shortDescription": {
                  "text": "Non-unique list value"
                },
                "fullDescription": {
                  "text": "Reports duplicates in lists of values.",
                  "markdown": "Reports duplicates in lists of values."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigMissingRequiredDeclaration",
                "shortDescription": {
                  "text": "Required declarations are missing"
                },
                "fullDescription": {
                  "text": "Reports properties that miss the required declarations. Refer to the documentation for more information.",
                  "markdown": "Reports properties that miss the required declarations. Refer to the documentation for more information."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigCharClassLetterRedundancy",
                "shortDescription": {
                  "text": "Duplicate character class letter"
                },
                "fullDescription": {
                  "text": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example '[aa]'.",
                  "markdown": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example `[aa]`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigKeyCorrectness",
                "shortDescription": {
                  "text": "Unknown property"
                },
                "fullDescription": {
                  "text": "Reports properties that are not supported by the IDE. Note: some “ij” domain properties may require specific language plugins.",
                  "markdown": "Reports properties that are not supported by the IDE. Note: some \"ij\" domain properties may require specific language plugins."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternEnumerationRedundancy",
                "shortDescription": {
                  "text": "Unnecessary braces"
                },
                "fullDescription": {
                  "text": "Reports pattern lists that are either empty '{}' or contain just one pattern, for example '{foo}'. The braces are needed only if there are two and more, for example: '{foo,bar}'",
                  "markdown": "Reports pattern lists that are either empty `{}` or contain just one pattern, for example `{foo}`. The braces are needed only if there are two and more, for example: `{foo,bar}`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEncoding",
                "shortDescription": {
                  "text": "File encoding doesn't match EditorConfig charset"
                },
                "fullDescription": {
                  "text": "Checks that current file encoding matches the encoding defined in \"charset\" property of .editorconfig file.",
                  "markdown": "Checks that current file encoding matches the encoding defined in \"charset\" property of .editorconfig file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigSpaceInHeader",
                "shortDescription": {
                  "text": "Space in file pattern"
                },
                "fullDescription": {
                  "text": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed.",
                  "markdown": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigOptionRedundancy",
                "shortDescription": {
                  "text": "Redundant property"
                },
                "fullDescription": {
                  "text": "Reports properties that are redundant when another applicable section already contains the same property and value. For example: '[*]\nindent_size=4\n[*.java]\nindent_size=4' are both applicable to '*.java' files and define the same 'indent_size' value.",
                  "markdown": "Reports properties that are redundant when another applicable section already contains the same property and value.\n\n\nFor example:\n\n\n    [*]\n    indent_size=4\n    [*.java]\n    indent_size=4\n\nare both applicable to `*.java` files and define the same `indent_size` value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationCorrectness",
                "shortDescription": {
                  "text": "Unexpected top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports unexpected top-level declarations. Top-level declarations other than “root=true” are not allowed in the EditorConfig file.",
                  "markdown": "Reports unexpected top-level declarations. Top-level declarations other than \"root=true\" are not allowed in the EditorConfig file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigReferenceCorrectness",
                "shortDescription": {
                  "text": "Invalid reference"
                },
                "fullDescription": {
                  "text": "Reports identifiers that are either unknown or have a wrong type.",
                  "markdown": "Reports identifiers that are either unknown or have a wrong type."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnusedDeclaration",
                "shortDescription": {
                  "text": "Unused declaration"
                },
                "fullDescription": {
                  "text": "Reports unused declarations. Such declarations can be removed.",
                  "markdown": "Reports unused declarations. Such declarations can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPairAcceptability",
                "shortDescription": {
                  "text": "Unexpected key-value pair"
                },
                "fullDescription": {
                  "text": "Reports key-value pairs that are not allowed in the current context.",
                  "markdown": "Reports key-value pairs that are not allowed in the current context."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternRedundancy",
                "shortDescription": {
                  "text": "Duplicate or redundant pattern"
                },
                "fullDescription": {
                  "text": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in '[{*.java,*}]' the first '*.java' pattern defines a narrower scope compared to '*'. That is why it is redundant and can be removed.",
                  "markdown": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in `[{*.java,*}]` the first `*.java` pattern defines a narrower scope compared to `*`. That is why it is redundant and can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigNoMatchingFiles",
                "shortDescription": {
                  "text": "No matching files"
                },
                "fullDescription": {
                  "text": "Reports sections with wildcard patterns that do not match any files under the directory in which the '.editorconfig' file is located.",
                  "markdown": "Reports sections with wildcard patterns that do not match any files under the directory in which the `.editorconfig` file is located."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnexpectedComma",
                "shortDescription": {
                  "text": "Unexpected comma"
                },
                "fullDescription": {
                  "text": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists.",
                  "markdown": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "Pythonid",
            "version": "223.8385",
            "rules": [
              {
                "id": "JupyterPackageInspection",
                "shortDescription": {
                  "text": "The 'jupyter' package is not installed"
                },
                "fullDescription": {
                  "text": "Reports cases when the 'jupyter' package is not installed for the selected Python interpreter. Without a properly installed 'jupyter' package, you cannot execute Jupyter notebooks. Click the corresponding link on the warning banner to install the missing package. You can also install the package in the Project Settings/Preferences or in the Python Packages tool window. See Installing Python package for more details.",
                  "markdown": "Reports cases when the `jupyter` package is not installed for the selected\nPython interpreter. Without a properly installed `jupyter` package, you cannot\nexecute Jupyter notebooks.\n\nClick the corresponding link on the warning banner to install the missing\npackage. You can also install the package in the Project **Settings/Preferences** or in the\n**Python Packages** tool window.\n\nSee [Installing Python package](https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html) for more details."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Jupyter",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySetFunctionToLiteralInspection",
                "shortDescription": {
                  "text": "Function call can be replaced with set literal"
                },
                "fullDescription": {
                  "text": "Reports calls to the 'set' function that can be replaced with the 'set' literal. Example: def do_mult(a, b):\n    c = a * b\n    return set([c, a, b])\n When the quick-fix is applied, the code changes to: def do_mult(a, b):\n    c = a * b\n    return {c, a, b}",
                  "markdown": "Reports calls to the `set` function that can be replaced with\nthe `set` literal.\n\n**Example:**\n\n```\ndef do_mult(a, b):\n    c = a * b\n    return set([c, a, b])\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndef do_mult(a, b):\n    c = a * b\n    return {c, a, b}\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStatementEffectInspection",
                "shortDescription": {
                  "text": "Statement has no effect"
                },
                "fullDescription": {
                  "text": "Reports statements that have no effect. Example: class Car:\n    def __init__(self, speed=0):\n        self.speed = speed\n        self.time # has no effect\n\n2 + 3 # has no effect\n In this example, you can either add a field 'time' to the 'Car' class or introduce variables for the problematic statements.",
                  "markdown": "Reports statements that have no effect.\n\n**Example:**\n\n```\nclass Car:\n    def __init__(self, speed=0):\n        self.speed = speed\n        self.time # has no effect\n\n2 + 3 # has no effect\n```\n\nIn this example, you can either add a field `time` to the `Car` class or\nintroduce variables for the problematic statements."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Query_index_required",
                "shortDescription": {
                  "text": "Query does not have the required index"
                },
                "fullDescription": {
                  "text": "Reports GQL queries for which an index is not defined in 'index.yaml'. Such queries will fail on the production server. The quick-fix allows you to add the necessary index definitions.",
                  "markdown": "Reports GQL queries for which an index is not defined in `index.yaml`.\nSuch queries will fail on the production server.\nThe quick-fix allows you to add the necessary index definitions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Google App Engine (Python)",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMandatoryEncodingInspection",
                "shortDescription": {
                  "text": "No encoding specified for file"
                },
                "fullDescription": {
                  "text": "Reports a missing encoding comment in Python 2. Example: class Book(object):\n    def __init__(self):\n        pass\n When the quick-fix is applied, the missing comment is added: # coding=utf-8\nclass Book(object):\n    def __init__(self):\n        pass",
                  "markdown": "Reports a missing encoding comment in Python 2.\n\n**Example:**\n\n```\nclass Book(object):\n    def __init__(self):\n        pass\n```\n\nWhen the quick-fix is applied, the missing comment is added:\n\n```\n# coding=utf-8\nclass Book(object):\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInconsistentIndentationInspection",
                "shortDescription": {
                  "text": "Inconsistent indentation"
                },
                "fullDescription": {
                  "text": "Reports inconsistent indentation in Python source files when, for example, you use a mixture of tabs and spaces in your code.",
                  "markdown": "Reports inconsistent indentation in Python source files when, for example,\nyou use a mixture of tabs and spaces in your code."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAttributeOutsideInitInspection",
                "shortDescription": {
                  "text": "An instance attribute is defined outside `__init__`"
                },
                "fullDescription": {
                  "text": "Reports a problem when instance attribute definition is outside '__init__' method. Example:     class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n When the quick-fix is applied, the code sample changes to:     class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass",
                  "markdown": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n```\n    class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n```\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n```\n    class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypedDictInspection",
                "shortDescription": {
                  "text": "Invalid TypedDict definition and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid definition and usage of TypedDict. Example: from typing import TypedDict\n\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n    rate: int = 10  # Right-hand side values are not supported\n\n    def method(self): # Invalid statement in TypedDict\n        pass\n\n\nm = Movie(name=\"name\", year=1000, rate=9)\nprint(m[\"director\"])  # There is no the 'director' key in 'Movie'\ndel m[\"name\"]  # The 'name' key cannot be deleted\nm[\"year\"] = \"1001\"  # Expected 'int', got 'str'",
                  "markdown": "Reports invalid definition and usage of\n[TypedDict](https://www.python.org/dev/peps/pep-0589/).\n\n**Example:**\n\n```\nfrom typing import TypedDict\n\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n    rate: int = 10  # Right-hand side values are not supported\n\n    def method(self): # Invalid statement in TypedDict\n        pass\n\n\nm = Movie(name=\"name\", year=1000, rate=9)\nprint(m[\"director\"])  # There is no the 'director' key in 'Movie'\ndel m[\"name\"]  # The 'name' key cannot be deleted\nm[\"year\"] = \"1001\"  # Expected 'int', got 'str'\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPep8Inspection",
                "shortDescription": {
                  "text": "PEP 8 coding style violation"
                },
                "fullDescription": {
                  "text": "Reports violations of the PEP 8 coding style guide by running the bundled pycodestyle.py tool.",
                  "markdown": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingTypeHintsInspection",
                "shortDescription": {
                  "text": "Missing type hinting for function definition"
                },
                "fullDescription": {
                  "text": "Reports missing type hints for function declaration in one of the two formats: parameter annotations or a type comment. Select the Only when types are known checkbox if you want the inspection check the types collected from runtime or inferred.",
                  "markdown": "Reports missing type hints for function declaration in\none of the two formats: parameter annotations or a type comment.\n\nSelect the **Only when types are known** checkbox if you want the inspection check\nthe types collected from runtime or inferred."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTupleItemAssignmentInspection",
                "shortDescription": {
                  "text": "Tuple item assignment is prohibited"
                },
                "fullDescription": {
                  "text": "Reports assignments to a tuple item. t = ('red', 'blue', 'green', 'white')\nt[3] = 'black'\n A quick-fix offers to replace the tuple with a list.",
                  "markdown": "Reports assignments to a tuple item.\n\n```\nt = ('red', 'blue', 'green', 'white')\nt[3] = 'black'\n```\n\nA quick-fix offers to replace the tuple with a list."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedUrlInspection",
                "shortDescription": {
                  "text": "Django {% url %} tag arguments are unresolved"
                },
                "fullDescription": {
                  "text": "Reports a missing url in the 'url' tag. Example: {% url 'url_name' %}\n The IDE shows a warning if 'url_name' is not defined in the 'urls' file.",
                  "markdown": "Reports a missing url in the `url` tag.\n\n**Example:**\n\n```\n{% url 'url_name' %}\n```\n\nThe IDE shows a warning if `url_name` is not defined in the `urls` file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedStaticReferenceInspection",
                "shortDescription": {
                  "text": "Unresolved static reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved references to static resources. Example: {% load staticfiles %}\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'polls/style.css' %}\" />\n In this example, 'style.css' is highlighted if there is no such a file in the 'static/poll' directory.",
                  "markdown": "Reports unresolved references to static resources.\n\n**Example:**\n\n```\n{% load staticfiles %}\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'polls/style.css' %}\" />\n```\n\nIn this example, `style.css` is highlighted if there is no such a file in the `static/poll`\ndirectory."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInitNewSignatureInspection",
                "shortDescription": {
                  "text": "Incompatible signatures of __new__ and __init__"
                },
                "fullDescription": {
                  "text": "Reports incompatible signatures of the '__new__' and '__init__' methods. Example: class MyClass(object):\n    def __new__(cls, arg1):\n        return super().__new__(cls)\n\n    def __init__(self):\n        pass\n If the '__new__' and '__init__' have different arguments, then the 'MyClass' cannot be instantiated. As a fix, the IDE offers to apply the Change Signature refactoring.",
                  "markdown": "Reports incompatible signatures of the `__new__` and `__init__` methods.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def __new__(cls, arg1):\n        return super().__new__(cls)\n\n    def __init__(self):\n        pass\n```\n\nIf the `__new__` and `__init__` have different arguments, then the `MyClass`\ncannot be instantiated.\n\nAs a fix, the IDE offers to apply the Change Signature refactoring."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDunderSlotsInspection",
                "shortDescription": {
                  "text": "Invalid usages of classes with  '__slots__' definitions"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of a class with '__slots__' definitions. Example: class Foo:\n    __slots__ = ['foo', 'bar']\n\n\nfoo = Foo()\nfoo.baz = 'spam'",
                  "markdown": "Reports invalid usages of a class with `__slots__` definitions.\n\n**Example:**\n\n```\nclass Foo:\n    __slots__ = ['foo', 'bar']\n\n\nfoo = Foo()\nfoo.baz = 'spam'\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EndBlockNamesInspection",
                "shortDescription": {
                  "text": "Django endblock name doesn't match the block name"
                },
                "fullDescription": {
                  "text": "Reports incorrect names of the closing blocks. Example:   {% block my_block %}\n  {% endblock not_correct %}",
                  "markdown": "Reports incorrect names of the closing blocks.\n\n**Example:**\n\n```\n  {% block my_block %}\n  {% endblock not_correct %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDefaultArgumentInspection",
                "shortDescription": {
                  "text": "The default argument is mutable"
                },
                "fullDescription": {
                  "text": "Reports a problem when a mutable value as a list or dictionary is detected in a default value for an argument. Default argument values are evaluated only once at function definition time, which means that modifying the default value of the argument will affect all subsequent calls of that function. Example: def func(s, cache={}):\n    cache[s] = None\n When the quick-fix is applied, the code changes to: def func(s, cache=None):\n    if cache is None:\n        cache = {}\n    cache[s] = None",
                  "markdown": "Reports a problem when a mutable value as a list or dictionary is detected in a default value for\nan argument.   \n\nDefault argument values are evaluated only once at function definition time,\nwhich means that modifying the\ndefault value of the argument will affect all subsequent calls of that function.\n\n**Example:**\n\n```\ndef func(s, cache={}):\n    cache[s] = None\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndef func(s, cache=None):\n    if cache is None:\n        cache = {}\n    cache[s] = None\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingConstructorInspection",
                "shortDescription": {
                  "text": "Missed call to '__init__' of the super class"
                },
                "fullDescription": {
                  "text": "Reports cases when a call to the 'super' constructor in a class is missed. Example: class Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        pass\n The 'Pear' class should have a 'super' call in the '__init__' method. When the quick-fix is applied, the code changes to: class Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        super().__init__()",
                  "markdown": "Reports cases when a call to the `super` constructor in a class is missed.\n\n**Example:**\n\n```\nclass Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        pass\n```\n\nThe `Pear` class should have a `super` call in the `__init__`\nmethod.\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nclass Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        super().__init__()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyShadowingBuiltinsInspection",
                "shortDescription": {
                  "text": "Shadowing built-in names"
                },
                "fullDescription": {
                  "text": "Reports shadowing built-in names, such as 'len' or 'list'. Example: def len(a, b, c):\n    d = a + b + c\n    return d\n In this code fragment, the 'len' built-in name is used. The IDE offers to apply the Rename refactoring as a fix.",
                  "markdown": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n```\ndef len(a, b, c):\n    d = a + b + c\n    return d\n```\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySimplifyBooleanCheckInspection",
                "shortDescription": {
                  "text": "Redundant boolean variable check"
                },
                "fullDescription": {
                  "text": "Reports equality comparison with a boolean literal. Example: def func(s):\n    if s.isdigit() == True:\n        return int(s)\n With the quick-fix applied, the code fragment will be simplified to: def func(s):\n    if s.isdigit():\n        return int(s)",
                  "markdown": "Reports equality comparison with a boolean literal.\n\n**Example:**\n\n```\ndef func(s):\n    if s.isdigit() == True:\n        return int(s)\n```\n\nWith the quick-fix applied, the code fragment will be simplified to:\n\n```\ndef func(s):\n    if s.isdigit():\n        return int(s)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodOverridingInspection",
                "shortDescription": {
                  "text": "Method signature does not match signature of overridden method"
                },
                "fullDescription": {
                  "text": "Reports inconsistencies in overriding method signatures. Example: class Book:\n    def add_title(self):\n        pass\n\n\nclass Novel(Book):\n    def add_title(self, text):\n        pass\n Parameters of the 'add_title' method in the 'Novel' class do not match the method signature specified in the 'Book' class. As a fix, the IDE offers to apply the Change Signature refactoring.",
                  "markdown": "Reports inconsistencies in overriding method signatures.\n\n**Example:**\n\n```\nclass Book:\n    def add_title(self):\n        pass\n\n\nclass Novel(Book):\n    def add_title(self, text):\n        pass\n```\n\nParameters of the `add_title` method in the `Novel` class do not match the method\nsignature specified in the `Book` class. As a fix, the IDE offers to apply the Change Signature\nrefactoring."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTestParametrizedInspection",
                "shortDescription": {
                  "text": "Incorrect arguments in @pytest.mark.parametrize"
                },
                "fullDescription": {
                  "text": "Reports functions that are decorated with @pytest.mark.parametrize but do not have arguments to accept parameters of the decorator.",
                  "markdown": "Reports functions that are decorated with [@pytest.mark.parametrize](https://docs.pytest.org/en/stable/parametrize.html) but do not have arguments to accept\nparameters of the decorator."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDecoratorInspection",
                "shortDescription": {
                  "text": "Class-specific decorator is used outside the class"
                },
                "fullDescription": {
                  "text": "Reports usages of '@classmethod' or '@staticmethod' decorators in methods outside a class. Example: class State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\n@classmethod\ndef change_state(self):\n    pass\n The 'change_state' method should not use the '@classmethod' decorator or it should be moved to the 'State' class declaration. If you apply the 'Remove decorator' action, the code changes to: class State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\ndef change_state(self):\n    pass",
                  "markdown": "Reports usages of `@classmethod` or `@staticmethod` decorators\nin methods outside a class.\n\n**Example:**\n\n```\nclass State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\n@classmethod\ndef change_state(self):\n    pass\n```\n\nThe `change_state` method should not use the `@classmethod` decorator or it should be\nmoved to the `State` class declaration.\n\nIf you apply the `Remove decorator` action, the code changes to:\n\n```\nclass State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\ndef change_state(self):\n    pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAsyncCallInspection",
                "shortDescription": {
                  "text": "Missing `await` syntax in coroutine calls"
                },
                "fullDescription": {
                  "text": "Reports coroutines that were called without using the 'await' syntax. Example: async def bar():\n    pass\n\n\nasync def foo():\n    bar()\n After the quick-fix is applied, the code changes to: async def bar():\n    pass\n\n\nasync def foo():\n    await bar()",
                  "markdown": "Reports coroutines that were called\nwithout using the `await` syntax.\n\n**Example:**\n\n```\nasync def bar():\n    pass\n\n\nasync def foo():\n    bar()\n```\n\nAfter the quick-fix is applied, the code changes to:\n\n```\nasync def bar():\n    pass\n\n\nasync def foo():\n    await bar()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CommandLineInspection",
                "shortDescription": {
                  "text": "Incorrect CLI syntax"
                },
                "fullDescription": {
                  "text": "Reports the problems if the arguments of the command you type in the console are not in the proper order. The inspection also verifies that option names and arguments are correct. Do not disable the inspection if you are going to use command-line interfaces like manage.py in Django.",
                  "markdown": "Reports the problems if the arguments of the command you type in the console are not in the proper order. The inspection also verifies\nthat option names and arguments are correct.\n\nDo not disable the inspection if you are going to use command-line interfaces like [manage.py in Django](https://www.jetbrains.com/help/pycharm/running-manage-py.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyComparisonWithNoneInspection",
                "shortDescription": {
                  "text": "Using equality operators to compare with None"
                },
                "fullDescription": {
                  "text": "Reports comparisons with 'None'. That type of comparisons should always be done with 'is' or 'is not', never the equality operators. Example: a = 2\n\n\nif a == None:\n    print(\"Success\")\n Once the quick-fix is applied, the code changes to: a = 2\n\n\nif a is None:\n    print(\"Success\")",
                  "markdown": "Reports comparisons with `None`. That type of comparisons\nshould always be done with `is` or `is not`, never\nthe equality operators.\n\n**Example:**\n\n```\na = 2\n\n\nif a == None:\n    print(\"Success\")\n```\n\nOnce the quick-fix is applied, the code changes to:\n\n```\na = 2\n\n\nif a is None:\n    print(\"Success\")\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyCallingNonCallableInspection",
                "shortDescription": {
                  "text": "Attempt to call a non-callable object"
                },
                "fullDescription": {
                  "text": "Reports a problem when you are trying to call objects that are not callable, like, for example, properties: class Record:\n    @property\n    def as_json(self):\n\njson = Record().as_json()",
                  "markdown": "Reports a problem when you are trying\nto call objects that are not callable, like, for example, properties:\n\n```\nclass Record:\n    @property\n    def as_json(self):\n\njson = Record().as_json()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnreachableCodeInspection",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports code fragments that cannot be normally reached. Example: if True:\n    print('Yes')\nelse:\n    print('No')\n As a fix, you might want to check and modify the algorithm to ensure it implements the expected logic.",
                  "markdown": "Reports code fragments that cannot be normally reached.\n\n**Example:**\n\n```\nif True:\n    print('Yes')\nelse:\n    print('No')\n```\n\nAs a fix, you might want to check and modify the algorithm to ensure it implements\nthe expected logic."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodParametersInspection",
                "shortDescription": {
                  "text": "Improper first parameter"
                },
                "fullDescription": {
                  "text": "Reports methods that lack the first parameter that is usually named 'self'. Example: class Movie:\n\n   def show():\n       pass\n When the quick-fix is applied, the code changes to: class Movie:\n\n   def show(self):\n       pass\n The inspection also reports naming issues in class methods. Example: class Movie:\n    @classmethod\n    def show(abc):\n        pass\n Since the first parameter of a class method should be 'cls', the IDE provides a quick-fix to rename it.",
                  "markdown": "Reports methods that lack the first parameter that is usually\nnamed `self`.\n\n**Example:**\n\n```\nclass Movie:\n\n   def show():\n       pass\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nclass Movie:\n\n   def show(self):\n       pass\n```\n\nThe inspection also reports naming issues in class methods.\n\n**Example:**\n\n```\nclass Movie:\n    @classmethod\n    def show(abc):\n        pass\n```\n\nSince the first parameter of a class method should be `cls`, the IDE provides a quick-fix\nto rename it."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyChainedComparisonsInspection",
                "shortDescription": {
                  "text": "Too complex chained comparisons"
                },
                "fullDescription": {
                  "text": "Reports chained comparisons that can be simplified. Example: 'def do_comparison(x):\n      xmin = 10\n      xmax = 100\n      if x >= xmin and x <= xmax:\n          pass' The IDE offers to simplify 'if x >= xmin and x <= xmax'. When the quick-fix is applied, the code changes to: 'def do_comparison(x):\n      xmin = 10\n      xmax = 100\n      if xmin <= x <= xmax:\n          pass'",
                  "markdown": "Reports chained comparisons that can be simplified.\n\n**Example:**\n\n\n      def do_comparison(x):\n          xmin = 10\n          xmax = 100\n          if x >= xmin and x <= xmax:\n              pass\n\nThe IDE offers to simplify `if x >= xmin and x <= xmax`.\nWhen the quick-fix is applied, the code changes to:\n\n\n      def do_comparison(x):\n          xmin = 10\n          xmax = 100\n          if xmin <= x <= xmax:\n              pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDocstringTypesInspection",
                "shortDescription": {
                  "text": "Type in docstring does not match inferred type"
                },
                "fullDescription": {
                  "text": "Reports types in docstring that do not match dynamically inferred types.",
                  "markdown": "Reports types in docstring that do not match dynamically inferred types."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoBrokenLineCommentInspection",
                "shortDescription": {
                  "text": "Broken line comment"
                },
                "fullDescription": {
                  "text": "Reports '#}' line comment ends in Django templates that do not have a matching line comment start. Example: comment #}\n The IDE highlights '#}' as it requires the corresponding '{#' token.",
                  "markdown": "Reports `#}` line comment ends in Django templates that do not have a\nmatching line comment start.\n\n**Example:**\n\n```\ncomment #}\n```\n\nThe IDE highlights `#}` as it requires the corresponding `{#` token."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyCompatibilityInspection",
                "shortDescription": {
                  "text": "Code is incompatible with specific Python versions"
                },
                "fullDescription": {
                  "text": "Reports incompatibility with the specified versions of Python. Enable this inspection if you need your code to be compatible with a range of Python versions, for example, if you are building a library. To define the range of the inspected Python versions, select the corresponding checkboxes in the Options section. For more information about the Python versions supported by the IDE, see the web help.",
                  "markdown": "Reports incompatibility with the specified versions of Python.\nEnable this inspection if you need your code to be compatible with a range of Python versions, for example,\nif you are building a library.\n\nTo define the range of the inspected Python versions, select the corresponding checkboxes in the **Options**\nsection.\n\nFor more information about the Python versions supported by the IDE, see the\n[web help](https://www.jetbrains.com/help/pycharm/python.html#support)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyGlobalUndefinedInspection",
                "shortDescription": {
                  "text": "Global variable is not defined at the module level"
                },
                "fullDescription": {
                  "text": "Reports problems when a variable defined through the 'global' statement is not defined in the module scope. Example: def foo():\n    global bar\n    print(bar)\n\nfoo()\n As a fix, you can move the global variable declaration: global bar\n\n\ndef foo():\n    print(bar)",
                  "markdown": "Reports problems when a variable defined through the `global`\nstatement is not defined in the module scope.\n\n**Example:**\n\n```\ndef foo():\n    global bar\n    print(bar)\n\nfoo()\n```\n\nAs a fix, you can move the global variable declaration:\n\n```\nglobal bar\n\n\ndef foo():\n    print(bar)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodFirstArgAssignmentInspection",
                "shortDescription": {
                  "text": "First argument of the method is reassigned"
                },
                "fullDescription": {
                  "text": "Reports cases when the first parameter, such as 'self' or 'cls', is reassigned in a method. Because in most cases, there are no objectives in such reassignment, the IDE indicates an error. Example: class Account:\n    def calc(self, balance):\n        if balance == 0:\n            self = balance\n        return self\n As a fix, you might want to check and modify the algorithm to ensure that reassignment is needed. If everything is correct, you can invoke intention actions for this code and opt to ignore the warning.",
                  "markdown": "Reports cases when the first parameter,\nsuch as `self` or `cls`, is reassigned in a method.\nBecause in most cases, there are no objectives in such reassignment, the\nIDE indicates an error.\n\n**Example:**\n\n```\nclass Account:\n    def calc(self, balance):\n        if balance == 0:\n            self = balance\n        return self\n```\n\nAs a fix, you might want to check and modify the algorithm to ensure that reassignment is needed. If everything is correct,\nyou can invoke intention actions for this code and opt to ignore the warning."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyProtocolInspection",
                "shortDescription": {
                  "text": "Invalid protocol definitions and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid definitions and usages of protocols introduced in PEP-544. Example: from typing import Protocol\n\n\nclass MyProtocol(Protocol):\n    def method(self, p: int) -> str:\n        pass\n\n\nclass MyClass(MyProtocol):\n    def method(self, p: str) -> int: # Type of 'method' is not compatible with 'MyProtocol'\n        pass\n\n\nclass MyAnotherProtocol(MyClass, Protocol): # All bases of a protocol must be protocols\n    pass",
                  "markdown": "Reports invalid definitions and usages of protocols introduced in\n[PEP-544](https://www.python.org/dev/peps/pep-0544/).\n\n**Example:**\n\n```\nfrom typing import Protocol\n\n\nclass MyProtocol(Protocol):\n    def method(self, p: int) -> str:\n        pass\n\n\nclass MyClass(MyProtocol):\n    def method(self, p: str) -> int: # Type of 'method' is not compatible with 'MyProtocol'\n        pass\n\n\nclass MyAnotherProtocol(MyClass, Protocol): # All bases of a protocol must be protocols\n    pass\n\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypeHintsInspection",
                "shortDescription": {
                  "text": "Invalid type hints definitions and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of type hints. Example: from typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n Available quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
                  "markdown": "Reports invalid usages of type hints.\n\n**Example:**\n\n```\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n```\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodMayBeStaticInspection",
                "shortDescription": {
                  "text": "Method is not declared static"
                },
                "fullDescription": {
                  "text": "Reports any methods that do not require a class instance creation and can be made static. Example: class MyClass(object):\n    def my_method(self, x):\n        print(x)\n If a Make function from method quick-fix is applied, the code changes to: def my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n If you select the Make method static quick-fix, the '@staticmethod' decorator is added: class MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)",
                  "markdown": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n```\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n```\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n```\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n```\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n```\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTupleAssignmentBalanceInspection",
                "shortDescription": {
                  "text": "Tuple assignment balance is incorrect"
                },
                "fullDescription": {
                  "text": "Reports cases when the number of expressions on the right-hand side and targets on the left-hand side are not the same. Example: t = ('red', 'blue', 'green', 'white')\n(c1, c2, c3) = t\n As a quick-fix, you can modify the highlighted code fragment to restore the tuple balance.",
                  "markdown": "Reports cases when the number of expressions on the right-hand side\nand targets on the left-hand side are not the same.\n\n**Example:**\n\n```\nt = ('red', 'blue', 'green', 'white')\n(c1, c2, c3) = t\n```\n\nAs a quick-fix, you can modify the highlighted code fragment to restore the tuple\nbalance."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyClassHasNoInitInspection",
                "shortDescription": {
                  "text": "Class has no `__init__` method"
                },
                "fullDescription": {
                  "text": "Reports cases in Python 2 when a class has no '__init__' method, neither its parent classes. Example: class Book():\n    pass\n The quick-fix adds the '__init__' method: class Book():\n    def __init__(self):\n        pass",
                  "markdown": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n```\nclass Book():\n    pass\n```\n\nThe quick-fix adds the `__init__` method:\n\n```\nclass Book():\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CythonUsageBeforeDeclarationInspection",
                "shortDescription": {
                  "text": "Cython variable is used before its declaration"
                },
                "fullDescription": {
                  "text": "Reports Cython variables being referenced before declaration. Example: cdef int c_x\n\nprint(c_x, c_y)  # Variable 'c_y' is used before its declaration\n\ncdef int c_y = 0",
                  "markdown": "Reports Cython variables being referenced before declaration.\n\n**Example:**\n\n```\ncdef int c_x\n\nprint(c_x, c_y)  # Variable 'c_y' is used before its declaration\n\ncdef int c_y = 0\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyArgumentEqualDefaultInspection",
                "shortDescription": {
                  "text": "The function argument is equal to the default parameter value"
                },
                "fullDescription": {
                  "text": "Reports a problem when an argument passed to the function is equal to the default parameter value. This inspection is disabled by default to avoid performance degradation. Example: def my_function(a: int = 2):\n    print(a)\n\n\nmy_function(2)",
                  "markdown": "Reports a problem when an argument\npassed to the function is equal to the default parameter value.\n\nThis inspection is disabled by default to avoid performance degradation.\n\n**Example:**\n\n```\ndef my_function(a: int = 2):\n    print(a)\n\n\nmy_function(2)\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyClassVarInspection",
                "shortDescription": {
                  "text": "Invalid usage of ClassVar variables"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of ClassVar annotations. Example: from typing import ClassVar\n\n\nclass Cat:\n    color: ClassVar[str] = \"white\"\n    weight: int\n\n    def __init__(self, weight: int):\n        self.weight = weight\n\n\nCat.color = \"black\"  # OK\nmy_cat = Cat(5)\nmy_cat.color = \"gray\"  # Error, setting class variable on instance",
                  "markdown": "Reports invalid usages of [ClassVar](https://docs.python.org/3/library/typing.html#typing.ClassVar) annotations.\n\n**Example:**\n\n```\nfrom typing import ClassVar\n\n\nclass Cat:\n    color: ClassVar[str] = \"white\"\n    weight: int\n\n    def __init__(self, weight: int):\n        self.weight = weight\n\n\nCat.color = \"black\"  # OK\nmy_cat = Cat(5)\nmy_cat.color = \"gray\"  # Error, setting class variable on instance\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDictCreationInspection",
                "shortDescription": {
                  "text": "Dictionary creation can be rewritten by dictionary literal"
                },
                "fullDescription": {
                  "text": "Reports situations when you can rewrite dictionary creation by using a dictionary literal. This approach brings performance improvements. Example: dic = {}\ndic['var'] = 1\n When the quick-fix is applied, the code changes to: dic = {'var': 1}",
                  "markdown": "Reports situations when you can rewrite dictionary creation\nby using a dictionary literal.\n\nThis approach brings performance improvements.\n\n**Example:**\n\n```\ndic = {}\ndic['var'] = 1\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndic = {'var': 1}\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStringFormatInspection",
                "shortDescription": {
                  "text": "Errors in string formatting operations"
                },
                "fullDescription": {
                  "text": "Reports errors in string formatting operations. Example 1: \"Hello {1}\".format(\"people\")\n Example 2: def bar():\n    return 1\n\n\n\"%s %s\" % bar()\n As a fix, you need to rewrite string formatting fragments to adhere to the formatting syntax.",
                  "markdown": "Reports errors in string formatting operations.\n\n**Example 1:**\n\n```\n\"Hello {1}\".format(\"people\")\n```\n\n**Example 2:**\n\n```\ndef bar():\n    return 1\n\n\n\"%s %s\" % bar()\n```\n\nAs a fix, you need to rewrite string formatting fragments to\nadhere to the [formatting syntax](https://docs.python.org/3/library/string.html#format-string-syntax)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyExceptionInheritInspection",
                "shortDescription": {
                  "text": "Exceptions do not inherit from standard 'Exception' class"
                },
                "fullDescription": {
                  "text": "Reports cases when a custom exception class is raised but does not inherit from the builtin Exception class. Example: class A:\n    pass\n\n\ndef me_exception():\n    raise A()\n The proposed quick-fix changes the code to: class A(Exception):\n    pass\n\n\ndef me_exception():\n    raise A()",
                  "markdown": "Reports cases when a custom exception class is\nraised but does not inherit from the\n[builtin Exception class](https://docs.python.org/3/library/exceptions.html).\n\n**Example:**\n\n```\nclass A:\n    pass\n\n\ndef me_exception():\n    raise A()\n```\n\nThe proposed quick-fix changes the code to:\n\n```\nclass A(Exception):\n    pass\n\n\ndef me_exception():\n    raise A()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAssignmentToLoopOrWithParameterInspection",
                "shortDescription": {
                  "text": "Assignments to 'for' loop or 'with' statement parameter"
                },
                "fullDescription": {
                  "text": "Reports the cases when you rewrite a loop variable with an inner loop:     for i in range(5):\n      for i in range(20, 25):\n          print(\"Inner\", i)\n      print(\"Outer\", i)\n  It also warns you if a variable declared in the 'with' statement is redeclared inside of the statement body:     with open(\"file\") as f:\n      f.read()\n      with open(\"file\") as f:",
                  "markdown": "Reports the cases when you rewrite a loop variable with an inner loop:\n\n```\n    for i in range(5):\n      for i in range(20, 25):\n          print(\"Inner\", i)\n      print(\"Outer\", i)\n  \n```\n\nIt also warns you if a variable declared in the `with` statement is redeclared inside of the statement body:\n\n```\n    with open(\"file\") as f:\n      f.read()\n      with open(\"file\") as f:\n  \n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedFilterInspection",
                "shortDescription": {
                  "text": "Unresolved filter"
                },
                "fullDescription": {
                  "text": "Reports unresolved filters in Django templates. Example:   {{ my_value|cool_filter:\"arg\" }}",
                  "markdown": "Reports unresolved filters in Django templates.\n\n**Example:**\n\n```\n  {{ my_value|cool_filter:\"arg\" }}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AppEngineThreadsafeCGIHandlerInspection",
                "shortDescription": {
                  "text": "Threadsafe cannot be enabled with the CGI handler"
                },
                "fullDescription": {
                  "text": "Reports cases when threadsafe is not enabled with the CGI handler.",
                  "markdown": "Reports cases when threadsafe is not enabled with the CGI handler."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Google App Engine (Python)",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoRelationInspection",
                "shortDescription": {
                  "text": "Incorrect comparison expression in Django templates"
                },
                "fullDescription": {
                  "text": "Reports missing whitespaces before and after comparison operators in Django templates. Example: {% if my_var==1 %}\n{% endif %}",
                  "markdown": "Reports missing whitespaces before and after comparison operators in Django templates.\n\n**Example:**\n\n```\n{% if my_var==1 %}\n{% endif %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedTagInspection",
                "shortDescription": {
                  "text": "Unresolved tag"
                },
                "fullDescription": {
                  "text": "Reports unresolved tags in Django templates. Example: <h1>{{ question.question_text }}</h1>\n<start>\n The IDE highlights '<start>'. You can either remove the tag or apply the quick-fix to add '<start>' to custom HTML tags.",
                  "markdown": "Reports unresolved tags in Django templates.\n\n**Example:**\n\n```\n<h1>{{ question.question_text }}</h1>\n<start>\n```\n\nThe IDE highlights `<start>`. You can either remove the tag or apply the quick-fix to\nadd `<start>` to custom HTML tags."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyFromFutureImportInspection",
                "shortDescription": {
                  "text": "Improper position of from __future__ import"
                },
                "fullDescription": {
                  "text": "Reports 'from __future__ import' statements that are used not at the beginning of a file. Example: a = 1\nfrom __future__ import print_function\nprint()\n When the quick-fix is applied, the code changes to: from __future__ import print_function\n\na = 1\nprint()",
                  "markdown": "Reports `from __future__ import`\nstatements that are used not at\nthe beginning of a file.\n\n**Example:**\n\n```\na = 1\nfrom __future__ import print_function\nprint()\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nfrom __future__ import print_function\n\na = 1\nprint()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnresolvedReferencesInspection",
                "shortDescription": {
                  "text": "Unresolved references"
                },
                "fullDescription": {
                  "text": "Reports references in your code that cannot be resolved. In a dynamically typed language, this is possible in a limited number of cases. If a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be: def print_string(s):\n  print(s.abc())\n In this code fragment 's' is always a string and 'abc' should be highlighted as unresolved. However, 's' type is inferred as 'Any' and no warning is reported. The IDE provides quick-fix actions to add missing references on-the-fly.",
                  "markdown": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySuperArgumentsInspection",
                "shortDescription": {
                  "text": "Wrong arguments to call super"
                },
                "fullDescription": {
                  "text": "Reports cases when any call to 'super(A, B)' does not meet the following requirements: 'B' is an instance of 'A' 'B' a subclass of 'A' Example: class Figure:\n    def color(self):\n        pass\n\n\nclass Rectangle(Figure):\n    def color(self):\n        pass\n\n\nclass Square(Figure):\n    def color(self):\n        return super(Rectangle, self).color() # Square is not an instance or subclass of Rectangle\n As a fix, you can make the 'Square' an instance of the 'Rectangle' class.",
                  "markdown": "Reports cases when any call to `super(A, B)` does not meet the\nfollowing requirements:\n\n* `B` is an instance of `A`\n* `B` a subclass of `A`\n\n**Example:**\n\n```\nclass Figure:\n    def color(self):\n        pass\n\n\nclass Rectangle(Figure):\n    def color(self):\n        pass\n\n\nclass Square(Figure):\n    def color(self):\n        return super(Rectangle, self).color() # Square is not an instance or subclass of Rectangle\n```\n\nAs a fix, you can make the `Square` an instance of the `Rectangle` class."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPackageRequirementsInspection",
                "shortDescription": {
                  "text": "Unsatisfied package requirements"
                },
                "fullDescription": {
                  "text": "Reports packages mentioned in requirements files (for example, 'requirements.txt' or 'Pipfile') but not installed, or imported but not mentioned in requirements files. The IDE shows a quick-fix banner so that you can install the missing packages in one click.",
                  "markdown": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoOrmInspection",
                "shortDescription": {
                  "text": "Django ORM error"
                },
                "fullDescription": {
                  "text": "Reports several methods that may not be called due to some ORM reasons. Example: class Choice:\n    question = ForeignKey(Question, null=False)\n\n\nchoice_set = Question.objects.get(id=1).choice_set.remove()\n The 'remove' function can not be called if the foreign key has 'null=False'.",
                  "markdown": "Reports several methods that may not be called due to some ORM reasons.\n\n**Example:**\n\n```\nclass Choice:\n    question = ForeignKey(Question, null=False)\n\n\nchoice_set = Question.objects.get(id=1).choice_set.remove()\n```\n\nThe `remove` function can not be called if the foreign key has `null=False`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedTemplateReferenceInspection",
                "shortDescription": {
                  "text": "Unresolved template reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved file references in string literals of 'extends'> and 'include'> Django tags. Example: {% extends \"../DjangoApp/templatetags/base.html\"%}\n In this example, the 'base.html' tag is highlighted, because it is not available in the specified location.",
                  "markdown": "Reports unresolved file references in string literals of\n`extends`\\> and `include`\\> Django tags.\n\n**Example:**\n\n```\n{% extends \"../DjangoApp/templatetags/base.html\"%}\n```\n\nIn this example, the `base.html` tag is highlighted, because it is not available in the\nspecified location."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNonAsciiCharInspection",
                "shortDescription": {
                  "text": "File contains non-ASCII character"
                },
                "fullDescription": {
                  "text": "Reports cases in Python 2 when a file contains non-ASCII characters and does not have an encoding declaration at the top. Example: class A(object):\n# №5\n    def __init__(self):\n        pass\n In this example, the IDE reports a non-ASCII symbol in a comment and a lack of encoding declaration. Apply the proposed quick-fix to add a missing encoding declaration: # coding=utf-8\nclass A(object)\n# №5\n    def __init__(self):\n        pass",
                  "markdown": "Reports cases in Python 2 when a file contains non-ASCII characters and does not\nhave an encoding declaration at the top.\n\n**Example:**\n\n```\nclass A(object):\n# №5\n    def __init__(self):\n        pass\n```\n\nIn this example, the IDE reports a non-ASCII symbol in a comment and a lack of encoding\ndeclaration. Apply the proposed quick-fix to add a missing encoding declaration:\n\n```\n# coding=utf-8\nclass A(object)\n# №5\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Restricted_Python_calls",
                "shortDescription": {
                  "text": "Feature is not supported in the App Engine sandbox"
                },
                "fullDescription": {
                  "text": "Reports usages of Python features that are restricted by the Google App Engine sandbox and will cause a failure on the production server.",
                  "markdown": "Reports usages of Python features that are restricted by the Google App\nEngine sandbox and will cause a failure on the production server."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Google App Engine (Python)",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTrailingSemicolonInspection",
                "shortDescription": {
                  "text": "Prohibited trailing semicolon in a statement"
                },
                "fullDescription": {
                  "text": "Reports trailing semicolons in statements. Example: def my_func(a):\n    c = a ** 2;\n    return c\n IDE provides a quick-fix that removes a trailing semicolon. When you apply it, the code changes to: def my_func(a):\n    c = a ** 2\n    return c",
                  "markdown": "Reports trailing semicolons in statements.\n\n**Example:**\n\n```\ndef my_func(a):\n    c = a ** 2;\n    return c\n```\n\nIDE provides a quick-fix that removes a trailing semicolon. When you\napply it, the code changes to:\n\n```\ndef my_func(a):\n    c = a ** 2\n    return c\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRedundantParenthesesInspection",
                "shortDescription": {
                  "text": "Redundant parentheses"
                },
                "fullDescription": {
                  "text": "Reports about redundant parentheses in expressions. The IDE provides the quick-fix action to remove the redundant parentheses.",
                  "markdown": "Reports about redundant parentheses in expressions.\n\nThe IDE provides the quick-fix action to remove the redundant parentheses."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAbstractClassInspection",
                "shortDescription": {
                  "text": "Class must implement all abstract methods"
                },
                "fullDescription": {
                  "text": "Reports cases when not all abstract properties or methods are defined in a subclass. Example: from abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_triangle(self):\n        pass\n When the quick-fix is applied, the IDE implements an abstract method for the 'Triangle' class: from abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_figure(self):\n        pass\n\n    def do_triangle(self):\n        pass",
                  "markdown": "Reports cases when not all abstract properties or methods are defined in\na subclass.\n\n**Example:**\n\n```\nfrom abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_triangle(self):\n        pass\n```\n\nWhen the quick-fix is applied, the IDE implements an abstract method for the `Triangle` class:\n\n```\nfrom abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_figure(self):\n        pass\n\n    def do_triangle(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyOldStyleClassesInspection",
                "shortDescription": {
                  "text": "Old-style class contains new-style class features"
                },
                "fullDescription": {
                  "text": "Reports occurrences of new-style class features in old-style classes. The inspection highlights '__slots__', '__getattribute__', and 'super()' inside old-style classes.",
                  "markdown": "Reports occurrences of\n[new-style class features](https://www.python.org/doc/newstyle/)\nin old-style classes. The inspection highlights\n`__slots__`, `__getattribute__`, and `super()`\ninside old-style classes."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoIncompatibleInspection",
                "shortDescription": {
                  "text": "Incompatible code in Django templates"
                },
                "fullDescription": {
                  "text": "Reports features that are not available in the current Django version. Example: {% if my_var is True %}\n{% endif %}\n Available since 1.10. The IDE shows warning when discovered in the earlier versions.",
                  "markdown": "Reports features that are not available in the current Django version.\n\n**Example:**\n\n```\n{% if my_var is True %}\n{% endif %}\n```\n\nAvailable since 1.10. The IDE shows warning when discovered in the earlier versions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExtendsTagPositionInspection",
                "shortDescription": {
                  "text": "Misplaced {% extends %} tag"
                },
                "fullDescription": {
                  "text": "Reports the '{% extends %}' tag that is not the first tag in a Django template. Example: {% load my_custom_tags %}\n{% extends \"../DjangoApp/templatetags/my_custom_tags.py\"%}\n In this example, the '{% extends %}' tag is highlighted, because it should be placed before the '{% load %}' tag.",
                  "markdown": "Reports the `{% extends %}` tag that is not the first tag in a\nDjango template.\n\n**Example:**\n\n```\n{% load my_custom_tags %}\n{% extends \"../DjangoApp/templatetags/my_custom_tags.py\"%}\n```\n\nIn this example, the `{% extends %}` tag is highlighted, because it should be placed before\nthe `{% load %}` tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Query_bound_parameters",
                "shortDescription": {
                  "text": "Query does not have required bound parameters"
                },
                "fullDescription": {
                  "text": "Reports GQL queries with bound parameters that don't have the necessary parameters passed to the query method call.",
                  "markdown": "Reports GQL queries with bound parameters that don't have the necessary\nparameters passed to the query method call."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Google App Engine (Python)",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyArgumentListInspection",
                "shortDescription": {
                  "text": "Incorrect call arguments"
                },
                "fullDescription": {
                  "text": "Reports discrepancies between declared parameters and actual arguments, as well as incorrect arguments, for example, duplicate named arguments, and incorrect argument order. Example: class Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n The correct code fragment looks at follows: class Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")",
                  "markdown": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n```\n\nThe correct code fragment looks at follows:\n\n```\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInterpreterInspection",
                "shortDescription": {
                  "text": "An invalid interpreter"
                },
                "fullDescription": {
                  "text": "Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly configured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features. The IDE provides quick access to the interpreter settings.",
                  "markdown": "Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly\nconfigured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features.\n\nThe IDE provides quick access to the interpreter settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyBroadExceptionInspection",
                "shortDescription": {
                  "text": "Unclear exception clauses"
                },
                "fullDescription": {
                  "text": "Reports exception clauses that do not provide specific information about the problem. Example: Clauses that do not specify an exception class Clauses that are specified as 'Exception'",
                  "markdown": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypeCheckerInspection",
                "shortDescription": {
                  "text": "Incorrect type"
                },
                "fullDescription": {
                  "text": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases. Types of function parameters can be specified in docstrings or in Python 3 function annotations. Example: def foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n With the quick-fix, you can modify the problematic types: def foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()",
                  "markdown": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n```\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n```\n\nWith the quick-fix, you can modify the problematic types:\n\n```\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPropertyAccessInspection",
                "shortDescription": {
                  "text": "Inappropriate access to properties"
                },
                "fullDescription": {
                  "text": "Reports cases when properties are accessed inappropriately: Read-only properties are set Write-only properties are read Non-deletable properties are deleted Example: class MyClass:\n    @property\n    def read_only(self): return None\n\n    def __write_only_setter(self, value): pass\n\n    write_only = property(None, __write_only_setter)\n\n\na = MyClass()\na.read_only = 10 # property cannot be set\ndel a.read_only # property cannot be deleted\nprint(a.write_only) # property cannot be read",
                  "markdown": "Reports cases when properties are accessed inappropriately:\n\n* Read-only properties are set\n* Write-only properties are read\n* Non-deletable properties are deleted\n\n**Example:**\n\n```\nclass MyClass:\n    @property\n    def read_only(self): return None\n\n    def __write_only_setter(self, value): pass\n\n    write_only = property(None, __write_only_setter)\n\n\na = MyClass()\na.read_only = 10 # property cannot be set\ndel a.read_only # property cannot be deleted\nprint(a.write_only) # property cannot be read\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStubPackagesAdvertiser",
                "shortDescription": {
                  "text": "Stub packages advertiser"
                },
                "fullDescription": {
                  "text": "Reports availability of stub packages. Stub package is a package that contains type information for the corresponding runtime package. Using stub packages ensures better coding assistance for the corresponding python package.",
                  "markdown": "Reports availability of stub packages.\n\n\n[Stub package](https://www.python.org/dev/peps/pep-0561/) is a package that contains type information for the corresponding\nruntime package.\n\nUsing stub packages ensures better coding assistance for the corresponding python package."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyByteLiteralInspection",
                "shortDescription": {
                  "text": "A byte literal contains a non-ASCII character"
                },
                "fullDescription": {
                  "text": "Reports characters in byte literals that are outside ASCII range. Example: 's = b'№5''",
                  "markdown": "Reports characters in byte literals that are outside ASCII range.\n\n**Example:**\n`s = b'№5'`"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRelativeImportInspection",
                "shortDescription": {
                  "text": "Suspicious relative imports"
                },
                "fullDescription": {
                  "text": "Reports usages of relative imports inside plain directories, for example, directories neither containing '__init__.py' nor explicitly marked as namespace packages.",
                  "markdown": "Reports usages of relative imports inside plain directories, for example, directories neither containing `__init__.py` nor\nexplicitly marked as namespace packages."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAugmentAssignmentInspection",
                "shortDescription": {
                  "text": "Assignment can be replaced with augmented assignment"
                },
                "fullDescription": {
                  "text": "Reports assignments that can be replaced with augmented assignments. Example: a = 23\nb = 3\na = a + b\n After the quick-fix is applied, the code changes to: a = 23\nb = 3\na += b",
                  "markdown": "Reports assignments that can be replaced with augmented assignments.\n\n**Example:**\n\n```\na = 23\nb = 3\na = a + b\n```\n\nAfter the quick-fix is applied, the code changes to:\n\n```\na = 23\nb = 3\na += b\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDeprecationInspection",
                "shortDescription": {
                  "text": "Deprecated function, class, or module"
                },
                "fullDescription": {
                  "text": "Reports usages of Python functions, or methods that are marked as deprecated and raise the 'DeprecationWarning' or 'PendingDeprecationWarning' warning. Also, this inspection highlights usages of 'abc.abstractstaticmethod', 'abc.abstractproperty', and 'abc.abstractclassmethod' decorators. Example: class Foo:\n    @property\n    def bar(self):\n        import warnings\n        warnings.warn(\"this is deprecated\", DeprecationWarning, 2)\n        return 5\n\n\nfoo = Foo()\nprint(foo.bar)",
                  "markdown": "Reports usages of Python functions, or methods that are marked as\ndeprecated and raise the `DeprecationWarning` or `PendingDeprecationWarning` warning.\n\nAlso, this inspection highlights usages of `abc.abstractstaticmethod`, `abc.abstractproperty`, and `abc.abstractclassmethod`\ndecorators.\n\n**Example:**\n\n```\nclass Foo:\n    @property\n    def bar(self):\n        import warnings\n        warnings.warn(\"this is deprecated\", DeprecationWarning, 2)\n        return 5\n\n\nfoo = Foo()\nprint(foo.bar)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnnecessaryBackslashInspection",
                "shortDescription": {
                  "text": "Unnecessary backslash"
                },
                "fullDescription": {
                  "text": "Reports backslashes in places where line continuation is implicit inside '()', '[]', and '{}'. Example: a = ('first', \\\n     'second', 'third')\n When the quick-fix is applied, the redundant backslash is deleted.",
                  "markdown": "Reports backslashes in places where line continuation is implicit inside `()`,\n`[]`, and `{}`.\n\n**Example:**\n\n```\na = ('first', \\\n     'second', 'third')\n```\n\nWhen the quick-fix is applied, the redundant backslash is deleted."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRedeclarationInspection",
                "shortDescription": {
                  "text": "Redeclared names without usages"
                },
                "fullDescription": {
                  "text": "Reports unconditional redeclarations of names without being used in between. Example: def x(): pass\n\n\nx = 2\n It applies to function and class declarations, and top-level assignments. When the warning is shown, you can try a recommended action, for example, you might be prompted to rename the variable.",
                  "markdown": "Reports unconditional redeclarations of names without being used in between.\n\n**Example:**\n\n```\ndef x(): pass\n\n\nx = 2\n```\n\nIt applies to function and class declarations, and top-level assignments.\n\nWhen the warning is shown, you can try a recommended action, for example, you might be prompted to\nrename the variable."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyShadowingNamesInspection",
                "shortDescription": {
                  "text": "Shadowing names from outer scopes"
                },
                "fullDescription": {
                  "text": "Reports shadowing names defined in outer scopes. Example: def outer(p):\n    def inner(p):\n        pass\n As a quick-fix, the IDE offers to remove a parameter or rename it.",
                  "markdown": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n```\ndef outer(p):\n    def inner(p):\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyFinalInspection",
                "shortDescription": {
                  "text": "Invalid usages of final classes, methods, and variables"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of final classes, methods and variables. Example: from typing import final\n\n\n@final\nclass A:\n    def a_method(self):\n        pass\n\n\nclass B(A):\n    def a_method(self):\n        pass",
                  "markdown": "Reports invalid usages of final classes,\nmethods and variables.\n\n**Example:**\n\n```\nfrom typing import final\n\n\n@final\nclass A:\n    def a_method(self):\n        pass\n\n\nclass B(A):\n    def a_method(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyramidSetupInspection",
                "shortDescription": {
                  "text": "Project is not installed for development"
                },
                "fullDescription": {
                  "text": "Reports cases when no 'python setup.py develop' command was executed for the Pyramid project. You need to execute this command to install the newly created project for development.",
                  "markdown": "Reports cases when no `python setup.py develop` command was executed for the Pyramid project.\n\nYou need to execute this command to install the newly created project for development."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Pyramid",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoCloseTagInspection",
                "shortDescription": {
                  "text": "Mismatched opening and closing tags"
                },
                "fullDescription": {
                  "text": "Reports cases when opening tags in Django templates are not correctly matched by closing tags. Example: {% if error_message %}<p><strong>{{ error_message }}</p>{% endif %}\n The IDE reports an error on the 'strong' tag not being closed.",
                  "markdown": "Reports cases when opening tags in Django templates are not correctly matched by closing tags.\n\n**Example:**\n\n```\n{% if error_message %}<p><strong>{{ error_message }}</p>{% endif %}\n```\n\nThe IDE reports an error on the `strong` tag not being closed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStubPackagesCompatibilityInspection",
                "shortDescription": {
                  "text": "Incompatible stub packages"
                },
                "fullDescription": {
                  "text": "Reports stub packages that do not support the version of the corresponding runtime package. A stub package contains type information for some runtime package.",
                  "markdown": "Reports stub packages that do not support the version of the corresponding runtime package.\n\nA [stub package](https://www.python.org/dev/peps/pep-0561/) contains type information for some runtime package."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyProtectedMemberInspection",
                "shortDescription": {
                  "text": "Accessing a protected member of a class or a module"
                },
                "fullDescription": {
                  "text": "Reports cases when a protected member is accessed outside the class, a descendant of the class where it is defined, or a module. class Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method",
                  "markdown": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n```\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnboundLocalVariableInspection",
                "shortDescription": {
                  "text": "Unbound local variables"
                },
                "fullDescription": {
                  "text": "Reports local variables referenced before assignment. Example: x = 0\nif x > 10:\n    b = 3\nprint(b)\n The IDE reports a problem for 'print(b)'. A possible fix is: x = 0\nif x > 10:\n    b = 3\n    print(b)",
                  "markdown": "Reports local variables referenced before assignment.\n\n**Example:**\n\n```\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n```\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n```\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNamedTupleInspection",
                "shortDescription": {
                  "text": "Invalid definition of 'typing.NamedTuple'"
                },
                "fullDescription": {
                  "text": "Reports invalid definition of a typing.NamedTuple. Example: import typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    last: str = \"\"\n    middle: str\n As a fix, place the field with the default value after the fields without default values: import typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    middle: str\n    last: str = \"\"",
                  "markdown": "Reports invalid definition of a\n[typing.NamedTuple](https://docs.python.org/3/library/typing.html#typing.NamedTuple).\n\n**Example:**\n\n```\nimport typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    last: str = \"\"\n    middle: str\n```\n\nAs a fix, place the field with the default value after the fields without default values:\n\n```\nimport typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    middle: str\n    last: str = \"\"\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySingleQuotedDocstringInspection",
                "shortDescription": {
                  "text": "Single quoted docstring"
                },
                "fullDescription": {
                  "text": "Reports docstrings that do not adhere to the triple double-quoted string format. Example: def calc(self, balance=0):\n    'param: balance'\n    self.balance = balance\n When the quick-fix is applied, the code changes to: def calc(self, balance=0):\n    \"\"\"param: balance\"\"\"\n    self.balance = balance",
                  "markdown": "Reports docstrings that do not adhere to the triple double-quoted string format.\n\n**Example:**\n\n```\ndef calc(self, balance=0):\n    'param: balance'\n    self.balance = balance\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndef calc(self, balance=0):\n    \"\"\"param: balance\"\"\"\n    self.balance = balance\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnusedLocalInspection",
                "shortDescription": {
                  "text": "Unused local symbols"
                },
                "fullDescription": {
                  "text": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
                  "markdown": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyReturnFromInitInspection",
                "shortDescription": {
                  "text": "__init__ method that returns a value"
                },
                "fullDescription": {
                  "text": "Reports occurrences of 'return' statements with a return value inside '__init__' methods of classes. Example: class Sum:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.sum = a + b\n        return self.sum\n A constructor should not return any value. The '__init__' method should only initialize the values of instance members for news objects. As a quick-fix, the IDE offers to remove the 'return' statement.",
                  "markdown": "Reports occurrences of `return` statements with a return value inside\n`__init__` methods of classes.\n\n**Example:**\n\n```\nclass Sum:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.sum = a + b\n        return self.sum\n```\n\nA constructor should not return any value. The `__init__` method should\nonly initialize the values of instance members for news objects.\n\nAs a quick-fix, the IDE offers to remove the `return` statement."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNestedDecoratorsInspection",
                "shortDescription": {
                  "text": "Problematic nesting of decorators"
                },
                "fullDescription": {
                  "text": "Reports problems with nesting decorators. The inspection highlights the cases when 'classmethod' or 'staticmethod' is applied before another decorator. Example: def innocent(f):\n    return f\n\n\nclass A:\n    @innocent  # Decorator will not receive a callable it may expect\n    @classmethod\n    def f2(cls):\n        pass\n\n    @innocent  # Decorator will not receive a callable it may expect\n    @staticmethod\n    def f1():\n        pass\n As a quick-fix, the IDE offers to remove the decorator.",
                  "markdown": "Reports problems with nesting decorators. The inspection highlights the cases when `classmethod` or `staticmethod`\nis applied before another decorator.\n\n**Example:**\n\n```\ndef innocent(f):\n    return f\n\n\nclass A:\n    @innocent  # Decorator will not receive a callable it may expect\n    @classmethod\n    def f2(cls):\n        pass\n\n    @innocent  # Decorator will not receive a callable it may expect\n    @staticmethod\n    def f1():\n        pass\n```\n\nAs a quick-fix, the IDE offers to remove the decorator."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Query_restricted",
                "shortDescription": {
                  "text": "Query does not comply with the query restrictions"
                },
                "fullDescription": {
                  "text": "Reports GQL queries that do not comply with the restrictions for queries allowed on the Google App Engine server. See the App Engine documentation for more information.",
                  "markdown": "Reports GQL queries that do not comply with the restrictions for queries allowed\non the Google App Engine server.\nSee the [App Engine documentation](http://code.google.com/appengine/docs/python/datastore/queriesandindexes.html#Restrictions_on_Queries) for more information."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Google App Engine (Python)",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingOrEmptyDocstringInspection",
                "shortDescription": {
                  "text": "Missing or empty docstring"
                },
                "fullDescription": {
                  "text": "Reports missing and empty docstrings. Example of a missing docstring def demo(a):\n    c = a ** 2\n Example of an empty docstring def demo(a):\n    \"\"\"\n    \"\"\"\n    c = a ** 2\n When the quick-fix is applied, the code fragments change to: def demo(a):\n    \"\"\"\n\n    :param a:\n    \"\"\"\n    c = a ** 2\n You need to provide some details about the parameter in the generated template.",
                  "markdown": "Reports missing and empty docstrings.\n\n**Example of a missing docstring**\n\n```\ndef demo(a):\n    c = a ** 2\n```\n\n**Example of an empty docstring**\n\n```\ndef demo(a):\n    \"\"\"\n    \"\"\"\n    c = a ** 2\n```\n\nWhen the quick-fix is applied, the code fragments change to:\n\n```\ndef demo(a):\n    \"\"\"\n\n    :param a:\n    \"\"\"\n    c = a ** 2\n```\n\nYou need to provide some details about the parameter in the generated template."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicatedBlockNamesInspection",
                "shortDescription": {
                  "text": "Duplicated block names"
                },
                "fullDescription": {
                  "text": "Reports duplicated block names in Django templates. Example: <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <title>{% block title %}My amazing site{% endblock %}</title>\n</head>\n\n<body>\n    <div id=\"sidebar\">\n        {% block title %}\n        <ul>\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/blog/\">Blog</a></li>\n        </ul>\n        {% endblock %}\n    </div>\n\n    <div id=\"content\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>",
                  "markdown": "Reports duplicated block names in Django templates.\n\n**Example:**\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <title>{% block title %}My amazing site{% endblock %}</title>\n</head>\n\n<body>\n    <div id=\"sidebar\">\n        {% block title %}\n        <ul>\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/blog/\">Blog</a></li>\n        </ul>\n        {% endblock %}\n    </div>\n\n    <div id=\"content\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyOverloadsInspection",
                "shortDescription": {
                  "text": "Overloads in regular Python files"
                },
                "fullDescription": {
                  "text": "Reports cases when overloads in regular Python files are placed after the implementation or when their signatures are not compatible with the implementation. Example: from typing import overload\n\n\n@overload\ndef foo(p1, p2): # Overload signature is not compatible with the implementation\n    pass\n\n\n@overload\ndef foo(p1): # Overload signature is not compatible with the implementation\n    pass\n\n\ndef foo(p1, p2, p3):\n    print(p1, p2, p3)",
                  "markdown": "Reports cases when overloads in regular Python files are placed after the implementation or when their signatures are\nnot compatible with the implementation.\n\n**Example:**\n\n```\nfrom typing import overload\n\n\n@overload\ndef foo(p1, p2): # Overload signature is not compatible with the implementation\n    pass\n\n\n@overload\ndef foo(p1): # Overload signature is not compatible with the implementation\n    pass\n\n\ndef foo(p1, p2, p3):\n    print(p1, p2, p3)\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AppEngineThreadsafeInspection",
                "shortDescription": {
                  "text": "Threadsafe is not available or set inappropriately"
                },
                "fullDescription": {
                  "text": "Reports cases when threadsafe is not present or it is not set to either 'yes' or 'no'.",
                  "markdown": "Reports cases when threadsafe is not present or it is not set to either `yes` or `no`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Google App Engine (Python)",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPep8NamingInspection",
                "shortDescription": {
                  "text": "PEP 8 naming convention violation"
                },
                "fullDescription": {
                  "text": "Reports violations of the PEP8 naming conventions. Example: class mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n In this code fragment, IDE offers to rename 'mammalia' to 'Mammalia'. When the quick-fix is applied, the code change to: class Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")",
                  "markdown": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n```\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n```\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUnresolvedLoadInspection",
                "shortDescription": {
                  "text": "Unresolved library inspection"
                },
                "fullDescription": {
                  "text": "Reports unresolved references in Django load tags. Example:   {% load something_nonexistent %}",
                  "markdown": "Reports unresolved references in Django load tags.\n\n**Example:**\n\n```\n  {% load something_nonexistent %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDictDuplicateKeysInspection",
                "shortDescription": {
                  "text": "Dictionary contains duplicate keys"
                },
                "fullDescription": {
                  "text": "Reports using the same value as the dictionary key twice. Example: dic = {\"a\": [1, 2], \"a\": [3, 4]}",
                  "markdown": "Reports using the same value as the dictionary key twice.\n\n**Example:**\n\n```\ndic = {\"a\": [1, 2], \"a\": [3, 4]}\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyExceptClausesOrderInspection",
                "shortDescription": {
                  "text": "Wrong order of 'except' clauses"
                },
                "fullDescription": {
                  "text": "Reports cases when 'except' clauses are not in the proper order, from the more specific to the more generic, or one exception class is caught twice. If you do not fix the order, some exceptions may not be caught by the most specific handler. Example: try:\n    call()\nexcept ValueError:\n    pass\nexcept UnicodeError:\n    pass\n The IDE recommends moving the clause up. When the quick-fix is applied, the code changes to: try:\n    call()\nexcept UnicodeError:\n    pass\nexcept ValueError:\n    pass",
                  "markdown": "Reports cases when `except` clauses are not in the proper order,\nfrom the more specific to the more generic, or one exception class is caught twice.\n\n\nIf you do not fix the order, some exceptions may not be caught by the most specific handler.\n\n**Example:**\n\n```\ntry:\n    call()\nexcept ValueError:\n    pass\nexcept UnicodeError:\n    pass\n```\n\nThe IDE recommends moving the clause up. When the quick-fix is applied, the code changes to:\n\n```\ntry:\n    call()\nexcept UnicodeError:\n    pass\nexcept ValueError:\n    pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDataclassInspection",
                "shortDescription": {
                  "text": "Invalid definition and usage of Data Classes"
                },
                "fullDescription": {
                  "text": "Reports invalid definitions and usages of classes created with 'dataclasses' or 'attr' modules. Example: import dataclasses\n\n\n@dataclasses.dataclass\nclass FullName:\n    first: str\n    middle: str = \"\"\n    last: str",
                  "markdown": "Reports invalid definitions and usages of classes created with\n`dataclasses` or `attr` modules.\n\n**Example:**\n\n```\nimport dataclasses\n\n\n@dataclasses.dataclass\nclass FullName:\n    first: str\n    middle: str = \"\"\n    last: str\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyClassicStyleClassInspection",
                "shortDescription": {
                  "text": "Classic style class usage"
                },
                "fullDescription": {
                  "text": "Reports classic style classes usage. This inspection applies only to Python 2. Example: class A:\n    pass\n With quick-fixes provided by the IDE, this code fragment changes to: class A(object):\n    def __init__(self):\n        pass",
                  "markdown": "Reports [classic style classes](https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes) usage. This inspection applies only to Python 2.\n\n**Example:**\n\n```\nclass A:\n    pass\n```\n\nWith quick-fixes provided by the IDE, this code fragment changes to:\n\n```\nclass A(object):\n    def __init__(self):\n        pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DjangoUrlArgumentsInspection",
                "shortDescription": {
                  "text": "Incorrect arguments in the ' {% url %}' tag"
                },
                "fullDescription": {
                  "text": "Reports missing parameters in the template file if the 'url()' function has parameters in its URL path. Example: In the 'url.py' file url(r'^(?P<question_id>[0-9]+)/', views.detail, name='detail')\n In the template file {% url 'polls:detail' %}",
                  "markdown": "Reports missing parameters in the template file if the `url()`\nfunction has parameters in its URL path.\n\n**Example:**\n\nIn the `url.py` file\n\n```\nurl(r'^(?P<question_id>[0-9]+)/', views.detail, name='detail')\n```\n\nIn the template file\n\n```\n{% url 'polls:detail' %}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Django",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNoneFunctionAssignmentInspection",
                "shortDescription": {
                  "text": "Assigning function calls that don't return anything"
                },
                "fullDescription": {
                  "text": "Reports cases when an assignment is done on a function that does not return anything. This inspection is similar to pylint inspection E1111. Example: def just_print():\n    print(\"Hello!\")\n\n\naction = just_print()\n As a quick-fix, the IDE offers to remove the assignment.",
                  "markdown": "Reports cases when an assignment is done on a function that does not return anything.\nThis inspection is similar to [pylint inspection E1111](https://docs.pylint.org/en/1.6.0/features.html#id6).\n\n\n**Example:**\n\n```\ndef just_print():\n    print(\"Hello!\")\n\n\naction = just_print()\n```\n\nAs a quick-fix, the IDE offers to remove the assignment."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPropertyDefinitionInspection",
                "shortDescription": {
                  "text": "Incorrect property definition"
                },
                "fullDescription": {
                  "text": "Reports problems with the arguments of 'property()' and functions annotated with '@property'. class C:\n    @property\n    def abc(self):  # Getter should return or yield something\n        pass\n\n    @abc.setter\n    def foo(self, value):  # Names of function and decorator don't match\n        pass\n\n    @abc.setter\n    def abc(self, v1, v2):  # Setter signature should be (self, value)\n        pass\n\n    @abc.deleter\n    def abc(self, v1):  # Delete signature should be (self)\n        pass\n A quick-fix offers to update parameters.",
                  "markdown": "Reports problems with the arguments of `property()` and functions\nannotated with `@property`.\n\n```\nclass C:\n    @property\n    def abc(self):  # Getter should return or yield something\n        pass\n\n    @abc.setter\n    def foo(self, value):  # Names of function and decorator don't match\n        pass\n\n    @abc.setter\n    def abc(self, v1, v2):  # Setter signature should be (self, value)\n        pass\n\n    @abc.deleter\n    def abc(self, v1):  # Delete signature should be (self)\n        pass\n```\n\nA quick-fix offers to update parameters."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyIncorrectDocstringInspection",
                "shortDescription": {
                  "text": "Incorrect docstring"
                },
                "fullDescription": {
                  "text": "Reports mismatched parameters in a docstring. For example, 'b' is highlighted, because there is no such a parameter in the 'add' function.     def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n The inspection does not warn you of missing parameters if none of them is mentioned in a docstring: def mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass",
                  "markdown": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n```\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n```\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n```\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyListCreationInspection",
                "shortDescription": {
                  "text": "Non-optimal list declaration"
                },
                "fullDescription": {
                  "text": "Reports cases when a list declaration can be rewritten with a list literal. This ensures better performance of your application. Example: l = [1]\nl.append(2)\n When the quick-fix is applied, the code changes to: l = [1, 2]",
                  "markdown": "Reports cases when a list declaration\ncan be rewritten with a list literal.\n\nThis ensures better performance of your application.\n\n**Example:**\n\n```\nl = [1]\nl.append(2)\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\nl = [1, 2]\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.database",
            "version": "223.8385",
            "rules": [
              {
                "id": "PgSelectFromProcedureInspection",
                "shortDescription": {
                  "text": "Postgres: Select from procedure call"
                },
                "fullDescription": {
                  "text": "Reports situations when you make SELECT from a function or a DBLINK without an alias with a type (for example, 'AS t1(s VARCHAR)'). This requirement does not apply to scalar functions. Example (PostgreSQL): 'CREATE FUNCTION produce_a_table() RETURNS RECORD AS $$\nSELECT 1;\n$$ LANGUAGE sql;\nSELECT * FROM produce_a_table() AS s (c1 INT);\nSELECT * FROM produce_a_table() AS s (c1);\nSELECT * FROM DBLINK('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc') AS t1;' The 'AS s (c1 INT)' has a typed alias, while 'AS s (c1)' and 'AS t1' do not. In this case, the second call of 'produce_a_table()' and 'DBLINK()' will be highlighted.",
                  "markdown": "Reports situations when you make SELECT from a function or a DBLINK without an alias with a type (for example, `AS t1(s VARCHAR)`).\n\nThis requirement does not apply to scalar functions.\n\nExample (PostgreSQL):\n\n    CREATE FUNCTION produce_a_table() RETURNS RECORD AS $$\n    SELECT 1;\n    $$ LANGUAGE sql;\n    SELECT * FROM produce_a_table() AS s (c1 INT);\n    SELECT * FROM produce_a_table() AS s (c1);\n    SELECT * FROM DBLINK('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc') AS t1;\n\nThe `AS s (c1 INT)` has a typed alias, while `AS s (c1)` and `AS t1` do not.\nIn this case, the second call of `produce_a_table()` and `DBLINK()` will be highlighted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostgreSQL",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCurrentSchemaInspection",
                "shortDescription": {
                  "text": "Current console schema introspected"
                },
                "fullDescription": {
                  "text": "Reports schemas and databases in the current session that are not introspected. For example, this warning might occur when you try to create a table in the schema that is not introspected. Introspection is a method of inspecting a data source. When you perform introspection, structural information in the data source is inspected to detect tables, columns, functions, and other elements with their attributes.",
                  "markdown": "Reports schemas and databases in the current session that are not introspected.\n\nFor example, this warning might occur when you try to create a table in the schema that is not introspected.\n\nIntrospection is a method of inspecting a data source. When you perform introspection, structural information in the data source is\ninspected to detect tables, columns, functions, and other elements with their attributes."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMisleadingReferenceInspection",
                "shortDescription": {
                  "text": "Misleading references"
                },
                "fullDescription": {
                  "text": "Reports ambiguous references in SQL code. For example, when a name refer to both a table column and a routine parameter. The execution of such code might lead to errors or unexpected results due to counter-intuitive resolution logic. Usually, names with a more local scope have higher priority. Example (PostgreSQL): 'CREATE TABLE foo\n(\n    id   INT,\n    name VARCHAR(5)\n);\nCREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n$$\nDECLARE\n    b INT;\nBEGIN\n      -- `name` is ambiguous as it is used as a column name and a parameter\n    SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n    RETURN b;\nEND;\n$$ LANGUAGE plpgsql;' In PostgreSQL, you can use the '#variable_conflict' directives to explicitly specify a correct reference. For example, use '#variable_conflict use_column' to refer to a column name, or '#variable_conflict use_variable' to refer to a parameter. 'CREATE TABLE foo\n(\n    id   INT,\n    name VARCHAR(5)\n);\nCREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n$$\n    #variable_conflict use_column\nDECLARE\n    b INT;\nBEGIN\n    SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n    RETURN b;\nEND;\n$$ LANGUAGE plpgsql;'",
                  "markdown": "Reports ambiguous references in SQL code.\n\nFor example, when a name refer to both a table column and a routine parameter. The execution of such code might lead to errors or unexpected\nresults due to counter-intuitive resolution logic. Usually, names with a more local scope have higher priority.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo\n    (\n        id   INT,\n        name VARCHAR(5)\n    );\n    CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n    $$\n    DECLARE\n        b INT;\n    BEGIN\n          -- `name` is ambiguous as it is used as a column name and a parameter\n        SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n        RETURN b;\n    END;\n    $$ LANGUAGE plpgsql;\n\nIn PostgreSQL, you can use the `#variable_conflict` directives to explicitly specify a correct reference. For example,\nuse `#variable_conflict use_column` to refer to a column name, or `#variable_conflict use_variable` to refer to a\nparameter.\n\n    CREATE TABLE foo\n    (\n        id   INT,\n        name VARCHAR(5)\n    );\n    CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n    $$\n        #variable_conflict use_column\n    DECLARE\n        b INT;\n    BEGIN\n        SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n        RETURN b;\n    END;\n    $$ LANGUAGE plpgsql;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSSideEffectsInspection",
                "shortDescription": {
                  "text": "Statement with side effects"
                },
                "fullDescription": {
                  "text": "Reports statements that can cause side effects while the data source is in read-only mode. For more information about enabling read-only mode, see Enable read-only mode for a connection in the IDE documentation. The Disable read-only mode quick-fix turns off the read-only mode for the respective data source. Example: 'db.my_collection.insertOne()'",
                  "markdown": "Reports statements that can cause side effects while the data source is in read-only mode.\n\nFor more information about enabling read-only mode, see\n[Enable\nread-only mode for a connection in the IDE documentation](https://www.jetbrains.com/help/datagrip/configuring-database-connections.html#enable-read-only-mode-for-a-connection).\n\nThe **Disable read-only mode** quick-fix turns off the read-only mode for the respective data source.\n\nExample:\n\n\n    db.my_collection.insertOne()\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlInsertIntoGeneratedColumnInspection",
                "shortDescription": {
                  "text": "Insertion into generated columns"
                },
                "fullDescription": {
                  "text": "Reports INSERT statements that assign values to generated columns. Generated columns can be read, but their values can not be directly written. Example (PostgreSQL): 'CREATE TABLE foo\n(\n   col1 INT,\n   col2 INT GENERATED ALWAYS AS (col1 + 1) STORED\n);\nINSERT INTO foo(col1, col2) VALUES (1, 2);'\n You cannot insert '2' into the 'col2' column because this column is generated. For this script to work, you can change '2' to DEFAULT. 'INSERT INTO foo(col1, col2) VALUES (1, DEFAULT);'",
                  "markdown": "Reports INSERT statements that assign values to generated columns. Generated columns can be read, but their values can not be directly written.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo\n    (\n       col1 INT,\n       col2 INT GENERATED ALWAYS AS (col1 + 1) STORED\n    );\n    INSERT INTO foo(col1, col2) VALUES (1, 2);\n\nYou cannot insert `2` into the `col2` column because this column is generated.\nFor this script to work, you can change `2` to DEFAULT.\n`INSERT INTO foo(col1, col2) VALUES (1, DEFAULT);`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MysqlLoadDataPathInspection",
                "shortDescription": {
                  "text": "LOAD statement path"
                },
                "fullDescription": {
                  "text": "Reports paths that start with the tilde character in LOAD statements. Example (MySQL): 'CREATE TABLE table_name (id int);\nLOAD DATA LOCAL INFILE '~/Documents/some_file.txt'\nINTO TABLE table_name FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n'\nIGNORE 1 LINES;' Instead of the tilde character, use a full path to the file.",
                  "markdown": "Reports paths that start with the tilde character in LOAD statements.\n\nExample (MySQL):\n\n    CREATE TABLE table_name (id int);\n    LOAD DATA LOCAL INFILE '~/Documents/some_file.txt'\n    INTO TABLE table_name FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n'\n    IGNORE 1 LINES;\n\nInstead of the tilde character, use a full path to the file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MySQL",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantLimitInspection",
                "shortDescription": {
                  "text": "Redundant row limiting in queries"
                },
                "fullDescription": {
                  "text": "Reports redundant row limiting clauses like FETCH and LIMIT in queries. Example (PostgreSQL): 'CREATE TABLE foo(a INT);\n\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo LIMIT 2);\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo FETCH FIRST 2 ROWS ONLY);' To fix the warning, you can add OFFSET to limiting clauses. If OFFSET is missing, then LIMIT is redundant because the usage of LIMIT does not influence the operation result of EXISTS. In case with OFFSET, we skip first 'N' rows and this will influence the output. 'SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW LIMIT 2);\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW FETCH FIRST 2 ROWS ONLY);'",
                  "markdown": "Reports redundant row limiting clauses like FETCH and LIMIT in queries.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT);\n\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo LIMIT 2);\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo FETCH FIRST 2 ROWS ONLY);\n\nTo fix the warning, you can add OFFSET to limiting clauses. If OFFSET is missing, then LIMIT is redundant because\nthe usage of LIMIT does not influence the operation result of EXISTS. In case with OFFSET, we skip first `N` rows and this will\ninfluence the output.\n\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW LIMIT 2);\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW FETCH FIRST 2 ROWS ONLY);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlInsertNullIntoNotNullInspection",
                "shortDescription": {
                  "text": "Insert NULL into NOT NULL column"
                },
                "fullDescription": {
                  "text": "Reports cases when you insert NULL values into columns that accept only NOT NULL values. Example (Microsoft SQL Server): 'CREATE TABLE br2 (\nid INT NOT NULL,\ncol1 NVARCHAR (20) NOT NULL,\ncol2 NVARCHAR (20) NOT NULL,\n);\n--\nINSERT INTO br2 (id, col1, col2)\nVALUES (1, NULL, NULL);' You cannot insert NULL values in 'col1' and 'col2' because they are defined as NOT NULL. If you run the script as is, you will receive an error. To fix this code, replace NULL in the VALUES part with some values (for example, '42' and ''bird''). INSERT INTO br2 (id, col1, col2)\nVALUES (1, 42, 'bird');",
                  "markdown": "Reports cases when you insert NULL values into columns that accept only NOT NULL values.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE br2 (\n    id INT NOT NULL,\n    col1 NVARCHAR (20) NOT NULL,\n    col2 NVARCHAR (20) NOT NULL,\n    );\n    --\n    INSERT INTO br2 (id, col1, col2)\n    VALUES (1, NULL, NULL);\n\nYou cannot insert NULL values in `col1` and `col2` because they are defined as NOT NULL. If you run the script as\nis,\nyou will receive an error. To fix this code, replace NULL in the VALUES part with some values (for example, `42` and\n`'bird'`).\n\n```\nINSERT INTO br2 (id, col1, col2)\nVALUES (1, 42, 'bird');\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDerivedTableAliasInspection",
                "shortDescription": {
                  "text": "Each derived table should have alias"
                },
                "fullDescription": {
                  "text": "Reports derived tables without aliases. Example (MySQL): 'CREATE TABLE table1 (id INT, name VARCHAR(20), cats FLOAT);\nCREATE TABLE table2 (id INT, age INTEGER);\n\nSELECT id AS ID, name, cats, age\nFROM (SELECT table1.id, name, cats, age\nFROM table1\nJOIN table2 ON table1.id = table2.id);' According to Derived Tables at dev.mysql.com, an alias is mandatory. You can add the alias by using the Introduce alias quick-fix. After the quick-fix is applied: 'SELECT id AS ID, name, cats, age\nFROM (SELECT table1.id, name, cats, age\nFROM table1\nJOIN table2 ON table1.id = table2.id);'",
                  "markdown": "Reports derived tables without aliases.\n\nExample (MySQL):\n\n    CREATE TABLE table1 (id INT, name VARCHAR(20), cats FLOAT);\n    CREATE TABLE table2 (id INT, age INTEGER);\n\n    SELECT id AS ID, name, cats, age\n    FROM (SELECT table1.id, name, cats, age\n    FROM table1\n    JOIN table2 ON table1.id = table2.id);\n\nAccording to [Derived Tables at dev.mysql.com](https://dev.mysql.com/doc/refman/8.0/en/derived-tables.html), an alias is\nmandatory. You can add the alias by using the **Introduce alias** quick-fix.\n\nAfter the quick-fix is applied:\n\n    SELECT id AS ID, name, cats, age\n    FROM (SELECT table1.id, name, cats, age\n    FROM table1\n    JOIN table2 ON table1.id = table2.id);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MsBuiltinInspection",
                "shortDescription": {
                  "text": "Builtin functions"
                },
                "fullDescription": {
                  "text": "Reports truncations of string arguments in ISNULL functions. The ISNULL syntax is 'ISNULL(check_expression, replacement_value)'. According to ISNULL at docs.microsoft.com, 'replacement_value' will be truncated if 'replacement_value' is longer than 'check_expression'. Example (Microsoft SQL Server): 'DECLARE @name1 VARCHAR(2) = NULL;\nDECLARE @name2 VARCHAR(10) = 'Example';\nDECLARE @name3 VARCHAR(2) = 'Hi';\n\n  -- `@name2` is VARCHAR(10) and will be truncated\nSELECT ISNULL(@name1, @name2);\n\n  -- `@name3` is VARCHAR(2) as `@name1` and will not be truncated\nSELECT ISNULL(@name1, @name3);'",
                  "markdown": "Reports truncations of string arguments in ISNULL functions.\n\nThe ISNULL syntax is `ISNULL(check_expression, replacement_value)`.\n\nAccording to [ISNULL at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/functions/isnull-transact-sql), `replacement_value` will be truncated if `replacement_value` is longer than\n`check_expression`.\n\nExample (Microsoft SQL Server):\n\n    DECLARE @name1 VARCHAR(2) = NULL;\n    DECLARE @name2 VARCHAR(10) = 'Example';\n    DECLARE @name3 VARCHAR(2) = 'Hi';\n\n      -- `@name2` is VARCHAR(10) and will be truncated\n    SELECT ISNULL(@name1, @name2);\n\n      -- `@name3` is VARCHAR(2) as `@name1` and will not be truncated\n    SELECT ISNULL(@name1, @name3);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL server",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMissingReturnInspection",
                "shortDescription": {
                  "text": "Missing return statement"
                },
                "fullDescription": {
                  "text": "Reports functions that have no RETURN statements. Example (Oracle): 'CREATE FUNCTION foo RETURN int AS\nBEGIN\nEND;' The 'foo' function must return the integer value but the function body returns nothing. To fix the error, add a RETURN statement (for example, 'return 1;'). 'CREATE FUNCTION foo RETURN int AS\nBEGIN\n RETURN 1;\nEND;'",
                  "markdown": "Reports functions that have no RETURN statements.\n\nExample (Oracle):\n\n    CREATE FUNCTION foo RETURN int AS\n    BEGIN\n    END;\n\nThe `foo` function must return the integer value but the function body returns nothing. To fix the error,\nadd a RETURN statement (for example, `return 1;`).\n\n    CREATE FUNCTION foo RETURN int AS\n    BEGIN\n     RETURN 1;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnusedSubqueryItemInspection",
                "shortDescription": {
                  "text": "Unused subquery item"
                },
                "fullDescription": {
                  "text": "Reports columns, aliases, and other subquery items that are not referenced in the outer query expression. Example (PostgreSQL): 'CREATE TABLE for_subquery(id INT);\nSELECT a, q FROM (SELECT 1 AS a, 10 AS b, 2 + 3 AS q, id\n      FROM for_subquery) x;' We reference 'a' and 'q' aliases from a subquery. But the 'b' alias and the 'id' column are not referenced in the outer SELECT statement. Therefore, 'b' and 'id' are grayed out.",
                  "markdown": "Reports columns, aliases, and other subquery items that are not referenced in the outer query expression.\n\nExample (PostgreSQL):\n\n    CREATE TABLE for_subquery(id INT);\n    SELECT a, q FROM (SELECT 1 AS a, 10 AS b, 2 + 3 AS q, id\n          FROM for_subquery) x;\n\nWe reference `a` and `q` aliases from a subquery. But the `b` alias and the `id` column are\nnot referenced in the outer SELECT statement. Therefore, `b` and `id` are grayed out."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlTriggerTransitionInspection",
                "shortDescription": {
                  "text": "Suspicious code in triggers"
                },
                "fullDescription": {
                  "text": "Reports incorrect usages of transition table variables in triggers. Example (HSQLDB): 'CREATE TABLE foo(a INT);\n\nCREATE TRIGGER trg\n AFTER DELETE ON foo\nBEGIN\n   SELECT * FROM NEW;\nEND;\n\nCREATE TRIGGER trig AFTER INSERT ON foo\n   REFERENCING OLD ROW AS newrow\n   FOR EACH ROW WHEN (a > 1)\n   INSERT INTO foo VALUES (1)' In HSQLDB, DELETE triggers may be used only with the OLD state while INSERT triggers may have only the NEW state. So, in the previous example, NEW in 'SELECT * FROM NEW;' will be highlighted as well as OLD in 'REFERENCING OLD ROW AS newrow'.",
                  "markdown": "Reports incorrect usages of transition table variables in triggers.\n\nExample (HSQLDB):\n\n    CREATE TABLE foo(a INT);\n\n    CREATE TRIGGER trg\n     AFTER DELETE ON foo\n    BEGIN\n       SELECT * FROM NEW;\n    END;\n\n    CREATE TRIGGER trig AFTER INSERT ON foo\n       REFERENCING OLD ROW AS newrow\n       FOR EACH ROW WHEN (a > 1)\n       INSERT INTO foo VALUES (1)\n\nIn HSQLDB, DELETE triggers may be used only with the OLD state while INSERT triggers may have only the NEW state. So, in the previous\nexample, NEW in `SELECT * FROM NEW;` will be highlighted as well as OLD in `REFERENCING OLD ROW AS newrow`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMultipleLimitClausesInspection",
                "shortDescription": {
                  "text": "Multiple row limiting/offset clauses in queries"
                },
                "fullDescription": {
                  "text": "Reports usages of multiple row limiting clauses in a single query. Example (Microsoft SQL Server): 'create table foo(a int);\nselect top 1 * from foo order by a offset 10 rows fetch next 20 rows only;' The SELECT TOP clause is used to specify that only 1 record must be returned. The FETCH clause specifies the number of rows to return after the OFFSET clause has been processed. But as we already have the SELECT TOP limiting clause, the FETCH clause might be redundant.",
                  "markdown": "Reports usages of multiple row limiting clauses in a single query.\n\nExample (Microsoft SQL Server):\n\n    create table foo(a int);\n    select top 1 * from foo order by a offset 10 rows fetch next 20 rows only;\n\nThe SELECT TOP clause is used to specify that only 1 record must be\nreturned. The FETCH clause specifies the number of rows to return after the OFFSET\nclause has been processed. But as we already have the SELECT TOP limiting clause, the FETCH clause might be redundant."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlNamedArgumentsInspection",
                "shortDescription": {
                  "text": "Named arguments should be used"
                },
                "fullDescription": {
                  "text": "Reports arguments that are used without names in routine calls. By default, this inspection is disabled. For more information about the difference between named and unnamed parameters, see Binding Parameters by Name (Named Parameters) at docs.microsoft.com . Example (Microsoft SQL Server): 'CREATE FUNCTION foo(n INT, m INT) RETURNS INT AS\nBEGIN\n    RETURN n + m;\nEND;\n\nCREATE PROCEDURE test AS\nBEGIN\n    foo n = 1, m = 2;\n\n--- The following call misses parameter names and will be highlighted\n    foo 1, 2;\nEND;' Parameters '1, 2' in the 'foo 1, 2;' call are highlighted because they miss names.",
                  "markdown": "Reports arguments that are used without names in routine calls. By default, this inspection is disabled.\n\nFor more information about the difference between named and unnamed parameters, see [Binding Parameters by Name (Named Parameters) at docs.microsoft.com](https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/binding-parameters-by-name-named-parameters).\n\nExample (Microsoft SQL Server):\n\n    CREATE FUNCTION foo(n INT, m INT) RETURNS INT AS\n    BEGIN\n        RETURN n + m;\n    END;\n\n    CREATE PROCEDURE test AS\n    BEGIN\n        foo n = 1, m = 2;\n\n    --- The following call misses parameter names and will be highlighted\n        foo 1, 2;\n    END;\n\nParameters `1, 2` in the `foo 1, 2;` call are highlighted because they miss names."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCaseVsCoalesceInspection",
                "shortDescription": {
                  "text": "Using CASE instead of COALESCE function and vice versa"
                },
                "fullDescription": {
                  "text": "Reports situations when CASE and COALESCE calls are interchangeable. This inspection has the following intention actions: Replace with 'COALESCE' call and the opposite one Replace with CASE expression. Example (MySQL): 'SELECT\n  -- this CASE may be replaced by COALESCE\n\tCASE\n\t\tWHEN C1 IS NOT NULL THEN C1\n\t\tELSE 0\n\t\tEND\nFROM dual;' In the example, the CASE statement can be replaced with 'SELECT COALESCE(C1, 0)' that produces the same output. If you prefer using CASE expressions, select the Prefer CASE expressions over COALESCE function option on the inspection page.",
                  "markdown": "Reports situations when CASE and COALESCE calls are interchangeable. This inspection has the following intention actions: **Replace\nwith 'COALESCE' call** and the opposite one **Replace with CASE expression** .\n\nExample (MySQL):\n\n    SELECT\n      -- this CASE may be replaced by COALESCE\n    \tCASE\n    \t\tWHEN C1 IS NOT NULL THEN C1\n    \t\tELSE 0\n    \t\tEND\n    FROM dual;\n\nIn the example, the CASE statement can be replaced with `SELECT COALESCE(C1, 0)` that produces the same output.\n\nIf you prefer using CASE expressions, select the **Prefer CASE expressions over COALESCE function** option on\nthe inspection page."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCaseVsIfInspection",
                "shortDescription": {
                  "text": "Using CASE instead of conditional function and vice versa"
                },
                "fullDescription": {
                  "text": "Reports situations when CASE and IF are interchangeable. Example (MySQL): 'SELECT CASE\nWHEN C1 IS NULL THEN 1\nELSE 0\nEND\nFROM dual;' To keep your code short, you can replace the CASE structure with IF. You can do that by applying the Replace with 'IF' call intention action. The example code will look as follows: 'SELECT IF(C1 IS NULL, 1, 0)\nFROM dual;' To revert IF to CASE, click IF and apply the Replace with CASE expression intention action.",
                  "markdown": "Reports situations when CASE and IF are interchangeable.\n\nExample (MySQL):\n\n    SELECT CASE\n    WHEN C1 IS NULL THEN 1\n    ELSE 0\n    END\n    FROM dual;\n\nTo keep your code short, you can replace the CASE structure with IF. You can do that by applying the **Replace with 'IF' call**\nintention action. The example code will look as follows:\n\n    SELECT IF(C1 IS NULL, 1, 0)\n    FROM dual;\n\nTo revert IF to CASE, click IF and apply the **Replace with CASE expression** intention action."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlShouldBeInGroupByInspection",
                "shortDescription": {
                  "text": "Column should be in group by clause"
                },
                "fullDescription": {
                  "text": "Reports columns that are not in the GROUP BY clause or inside an aggregate function call. Example (Microsoft SQL Server): 'CREATE TABLE t1 (a INT, b INT);\nSELECT a, b FROM t1 GROUP BY a;' If you run the SELECT query, you will receive an error because Microsoft SQL Server expects the 'b' column in GROUP BY or used inside an aggregate function. The following two examples will fix the error. 'SELECT a, b FROM t1 GROUP BY a, b;\nSELECT a, max(b) max_b FROM t1 GROUP BY a;'",
                  "markdown": "Reports columns that are not in the GROUP BY clause or inside an aggregate function call.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE t1 (a INT, b INT);\n    SELECT a, b FROM t1 GROUP BY a;\n\nIf you run the SELECT query, you will receive an error because Microsoft SQL Server expects the `b` column in GROUP BY or used\ninside an aggregate function. The following two examples will fix the error.\n\n    SELECT a, b FROM t1 GROUP BY a, b;\n    SELECT a, max(b) max_b FROM t1 GROUP BY a;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlIdentifierInspection",
                "shortDescription": {
                  "text": "Identifier should be quoted"
                },
                "fullDescription": {
                  "text": "Reports situations when you use SQL reserved keywords as identifier names in your query. Example (Microsoft SQL Server): 'CREATE TABLE select (identity INT IDENTITY NOT NULL, order INT NOT NULL);' We use 'select', 'identity', and 'order' as table and column names. But they are also reserved keywords in Microsoft SQL Server. Therefore, in order to use them as object names in the query, you must quote these identifiers. To quote them, you can use the Quote identifier quick-fix. After the quick-fix is applied: 'CREATE TABLE [select] ([identity] INT IDENTITY NOT NULL, [order] INT NOT NULL);'",
                  "markdown": "Reports situations when you use SQL reserved keywords as identifier names in your query.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE select (identity INT IDENTITY NOT NULL, order INT NOT NULL);\n\nWe use `select`, `identity`, and `order` as table and column names.\nBut they are also reserved keywords in Microsoft SQL Server.\nTherefore, in order to use them as object names in the query, you must quote these identifiers. To quote them, you can use the\n**Quote identifier** quick-fix.\n\nAfter the quick-fix is applied:\n\n    CREATE TABLE [select] ([identity] INT IDENTITY NOT NULL, [order] INT NOT NULL);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantAliasInspection",
                "shortDescription": {
                  "text": "Redundant alias expressions"
                },
                "fullDescription": {
                  "text": "Reports alias expressions that duplicate names of columns in tables and might be redundant. Example (PostgreSQL): 'CREATE TABLE foo(a INT, b INT);\n\nSELECT * FROM foo foo(a, b);\nSELECT * FROM foo foo(a);\nSELECT * FROM foo foo(x);\nSELECT * FROM foo foo(x, y);' The first two aliases use the same column names as in the 'foo' table. They are considered redundant because they column names are identical.",
                  "markdown": "Reports alias expressions that duplicate names of columns in tables and might be redundant.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT, b INT);\n\n    SELECT * FROM foo foo(a, b);\n    SELECT * FROM foo foo(a);\n    SELECT * FROM foo foo(x);\n    SELECT * FROM foo foo(x, y);\n\nThe first two aliases use the same column names as in the `foo` table. They are considered redundant because they\ncolumn names are identical."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAutoIncrementDuplicateInspection",
                "shortDescription": {
                  "text": "Auto-increment duplicate"
                },
                "fullDescription": {
                  "text": "Reports tables that contain two columns with an automatic increment. In MySQL, Microsoft SQL Server, and Db2 dialects, a table can have only one field with a auto-increment option, and this field must be a key. Example (MySQL): 'CREATE TABLE my_table\n(\n    id INT AUTO_INCREMENT,\n    c2 INT AUTO_INCREMENT,\n);' The AUTO_INCREMENT constraint for 'c2' will be highlighted as 'c1' already has this constraint. To fix the warning, you can make 'id' a primary key and delete AUTO_INCREMENT for 'c2'. 'CREATE TABLE my_table\n(\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    c2 INT,\n);'",
                  "markdown": "Reports tables that contain two columns with an automatic increment. In MySQL, Microsoft SQL Server, and Db2 dialects, a table can have only one field with a auto-increment option, and this field must be a key.\n\nExample (MySQL):\n\n    CREATE TABLE my_table\n    (\n        id INT AUTO_INCREMENT,\n        c2 INT AUTO_INCREMENT,\n    );\n\nThe AUTO_INCREMENT constraint for `c2` will be highlighted as `c1` already has this constraint. To fix the warning,\nyou can make `id` a primary key and delete AUTO_INCREMENT for `c2`.\n\n    CREATE TABLE my_table\n    (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        c2 INT,\n    );\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlStringLengthExceededInspection",
                "shortDescription": {
                  "text": "Implicit string truncation"
                },
                "fullDescription": {
                  "text": "Reports variables that exceed the defined length in characters. Example (Microsoft SQL Server): 'CREATE PROCEDURE test() AS\nBEGIN\nDECLARE myVarOk VARCHAR(5) = 'abcde';\nDECLARE myVarExceeded VARCHAR(5) = 'abcde12345';\n\nSET myVarOk = 'xyz';\nSET myVarExceeded = '123456789';\nEND;' The 'myVarExceeded' variable is defined as 'VARCHAR(5)' but both assigned values (''abcde12345'' and ''123456789'') exceed this limitation. You can truncate assigned values or increase the defined length. To increase the length, use the Increase type length quick-fix. After the quick-fix is applied: 'CREATE PROCEDURE test() AS\nBEGIN\nDECLARE myVarOk VARCHAR(5) = 'abcde';\nDECLARE myVarExceeded VARCHAR(10) = 'abcde12345';\n\nSET myVarOk = 'xyz';\nSET myVarExceeded = '123456789';\nEND;'",
                  "markdown": "Reports variables that exceed the defined length in characters.\n\nExample (Microsoft SQL Server):\n\n    CREATE PROCEDURE test() AS\n    BEGIN\n    DECLARE myVarOk VARCHAR(5) = 'abcde';\n    DECLARE myVarExceeded VARCHAR(5) = 'abcde12345';\n\n    SET myVarOk = 'xyz';\n    SET myVarExceeded = '123456789';\n    END;\n\nThe `myVarExceeded` variable is defined as `VARCHAR(5)` but both assigned values (`'abcde12345'` and\n`'123456789'`) exceed this limitation. You can truncate assigned values or increase the defined length.\nTo increase the length, use the **Increase type length** quick-fix.\n\nAfter the quick-fix is applied:\n\n    CREATE PROCEDURE test() AS\n    BEGIN\n    DECLARE myVarOk VARCHAR(5) = 'abcde';\n    DECLARE myVarExceeded VARCHAR(10) = 'abcde12345';\n\n    SET myVarOk = 'xyz';\n    SET myVarExceeded = '123456789';\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlTransactionStatementInTriggerInspection",
                "shortDescription": {
                  "text": "Use of transaction management statements in triggers"
                },
                "fullDescription": {
                  "text": "Reports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies. With COMMIT or ROLLBACK statements in a trigger body, the trigger will not compile. The fail happens because triggers start during transactions. When the trigger starts the current transaction is still not complete. As COMMIT terminates a transaction, both statements (COMMIT and ROLLBACK) would lead to an exception. Changes that are executed in a trigger should be committed (or rolled back) by the owning transaction that started the trigger. Example (Oracle): 'CREATE TABLE employee_audit\n(\n    id          INT  NOT NULL,\n    update_date DATE NOT NULL,\n    old_name    VARCHAR2(100),\n    new_name    VARCHAR2(100)\n);\n\nCREATE TABLE employees\n(\n    id   INT           NOT NULL,\n    name VARCHAR2(100) NOT NULL\n);\n\nCREATE OR REPLACE TRIGGER trig_commit\n    AFTER UPDATE OF name\n    ON employees\n    FOR EACH ROW\nBEGIN\n    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n    COMMIT;\nEND;\n\nCREATE OR REPLACE TRIGGER trig_rollback\n    AFTER UPDATE OF name\n    ON employees\n    FOR EACH ROW\nBEGIN\n    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n    ROLLBACK;\nEND;'",
                  "markdown": "Reports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies.\n\nWith COMMIT or ROLLBACK statements in a trigger body, the trigger will not compile.\nThe fail happens because triggers start during transactions. When the trigger starts the current transaction is still not complete. As\nCOMMIT\nterminates a transaction, both statements (COMMIT and ROLLBACK) would lead to an exception.\nChanges that are executed in a trigger should be committed (or rolled back) by the owning transaction that started the trigger.\n\nExample (Oracle):\n\n    CREATE TABLE employee_audit\n    (\n        id          INT  NOT NULL,\n        update_date DATE NOT NULL,\n        old_name    VARCHAR2(100),\n        new_name    VARCHAR2(100)\n    );\n\n    CREATE TABLE employees\n    (\n        id   INT           NOT NULL,\n        name VARCHAR2(100) NOT NULL\n    );\n\n    CREATE OR REPLACE TRIGGER trig_commit\n        AFTER UPDATE OF name\n        ON employees\n        FOR EACH ROW\n    BEGIN\n        INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n        COMMIT;\n    END;\n\n    CREATE OR REPLACE TRIGGER trig_rollback\n        AFTER UPDATE OF name\n        ON employees\n        FOR EACH ROW\n    BEGIN\n        INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n        ROLLBACK;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantCodeInCoalesceInspection",
                "shortDescription": {
                  "text": "Redundant code in COALESCE call"
                },
                "fullDescription": {
                  "text": "Reports all the arguments except for the first expression that does not evaluate to NULL in COALESCE functions. Example (MySQL): 'SELECT COALESCE(NULL, NULL, NULL, 42, NULL, 'string') as a;' The first NOT NULL argument is '42', all other arguments will be grayed out.",
                  "markdown": "Reports all the arguments except for the first expression that does not evaluate to NULL in COALESCE functions.\n\nExample (MySQL):\n\n    SELECT COALESCE(NULL, NULL, NULL, 42, NULL, 'string') as a;\n\nThe first NOT NULL argument is `42`, all other arguments will be grayed out."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlStorageInspection",
                "shortDescription": {
                  "text": "SQL source modification detection"
                },
                "fullDescription": {
                  "text": "Reports situations when source code of a database object has been changed. The inspection is triggered when you perform database or object introspection. The introspection is run when you open source code of an object, run statements, and perform code refactoring. Also, you can run introspection by right-clicking an object and selecting Refresh. The inspection covers the following situations: Object source code was changed in the database but code in the editor was not updated. Works in PostgreSQL, Microsoft SQL Server, Oracle, and Sybase ASE. You changed the object source code, introspected the database, but source code has been already changed by someone else. The database introspector was updated in the IDE and you need to download new object properties that were missing in the previous introspector version.",
                  "markdown": "Reports situations when source code of a database object has been changed.\n\nThe inspection is triggered when you perform database or object introspection. The introspection is run when you open source code of an\nobject, run statements, and perform code refactoring.\nAlso, you can run introspection by right-clicking an object and selecting **Refresh**.\n\nThe inspection covers the following situations:\n\n* Object source code was changed in the database but code in the editor was not updated. Works in PostgreSQL, Microsoft SQL Server, Oracle, and Sybase ASE.\n* You changed the object source code, introspected the database, but source code has been already changed by someone else.\n* The database introspector was updated in the IDE and you need to download new object properties that were missing in the previous introspector version."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MsOrderByInspection",
                "shortDescription": {
                  "text": "ORDER BY in queries"
                },
                "fullDescription": {
                  "text": "Reports usages when the 'ORDER BY' clause is used without 'TOP', 'OFFSET', or 'FOR XML' in views, inline functions, derived tables, subqueries, and common table expressions. For more information about usages of 'ORDER BY', see SELECT - ORDER BY Clause (Transact-SQL) at docs.microsoft.com. Example (Microsoft SQL server): 'CREATE TABLE foo (a INT NOT NULL, b  INT NOT NULL);\n\nSELECT *\nFROM (SELECT a, b\nFROM foo A\nWHERE a < 89\nORDER BY b) ALIAS;' In a subquery, ORDER BY will be highlighted as an error. You can add TOP, OFFSET, or FOR XML to a subquery. Alternatively, use the Delete element quick-fix to delete the ORDER BY section. After the quick-fix is applied: 'SELECT *\nFROM (SELECT a, b\nFROM foo A\nWHERE a < 89) ALIAS;'",
                  "markdown": "Reports usages when the `ORDER BY` clause is used without `TOP`, `OFFSET`, or `FOR XML` in views, inline functions, derived tables, subqueries, and common table expressions.\n\nFor more information about usages of `ORDER BY`, see [SELECT - ORDER BY Clause (Transact-SQL) at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/queries/select-order-by-clause-transact-sql).\n\nExample (Microsoft SQL server):\n\n    CREATE TABLE foo (a INT NOT NULL, b  INT NOT NULL);\n\n    SELECT *\n    FROM (SELECT a, b\n    FROM foo A\n    WHERE a < 89\n    ORDER BY b) ALIAS;\n\nIn a subquery, ORDER BY will be highlighted as an error. You can add TOP, OFFSET, or FOR XML to a subquery.\nAlternatively, use the **Delete element** quick-fix to delete the ORDER BY section.\n\nAfter the quick-fix is applied:\n\n    SELECT *\n    FROM (SELECT a, b\n    FROM foo A\n    WHERE a < 89) ALIAS;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL server",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDtInspection",
                "shortDescription": {
                  "text": "Ill-formed date/time literals"
                },
                "fullDescription": {
                  "text": "Reports errors in date and time literals. This inspection is available in MySQL, Oracle, Db2, and H2. Example (MySQL): 'SELECT TIME '10 -12:13:14' FROM dual;\nSELECT TIME ' 12 : 13 : 14 ' FROM dual;\nSELECT TIME '12 13 14' FROM dual;\nSELECT TIME '12-13-14' FROM dual;\nSELECT TIME '12.13.14' FROM dual;\nSELECT TIME '12:13:' FROM dual;\nSELECT TIME '12:13' FROM dual;\nSELECT TIME '12:' FROM dual;' In this example, dates ignore the MySQL standard for date and time literals. Therefore, they will be highlighted. For more information about date and time literals in MySQL, see Date and Time Literals at dev.mysql.com. The following date and type literals are valid for MySQL. 'SELECT TIME '12:13:14' FROM dual;\nSELECT TIME '12:13:14.555' FROM dual;\nSELECT TIME '12:13:14.' FROM dual;\nSELECT TIME '-12:13:14' FROM dual;\nSELECT TIME '10 12:13:14' FROM dual;\nSELECT TIME '-10 12:13:14' FROM dual;'",
                  "markdown": "Reports errors in date and time literals. This inspection is available in MySQL, Oracle, Db2, and H2.\n\nExample (MySQL):\n\n    SELECT TIME '10 -12:13:14' FROM dual;\n    SELECT TIME ' 12 : 13 : 14 ' FROM dual;\n    SELECT TIME '12 13 14' FROM dual;\n    SELECT TIME '12-13-14' FROM dual;\n    SELECT TIME '12.13.14' FROM dual;\n    SELECT TIME '12:13:' FROM dual;\n    SELECT TIME '12:13' FROM dual;\n    SELECT TIME '12:' FROM dual;\n\nIn this example, dates ignore the MySQL standard for date and time literals. Therefore, they will be highlighted.\nFor more information about date and time literals in MySQL, see [Date and Time Literals at dev.mysql.com](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html).\n\nThe following date and type literals are valid for MySQL.\n\n    SELECT TIME '12:13:14' FROM dual;\n    SELECT TIME '12:13:14.555' FROM dual;\n    SELECT TIME '12:13:14.' FROM dual;\n    SELECT TIME '-12:13:14' FROM dual;\n    SELECT TIME '10 12:13:14' FROM dual;\n    SELECT TIME '-10 12:13:14' FROM dual;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlSideEffectsInspection",
                "shortDescription": {
                  "text": "Statement with side effects"
                },
                "fullDescription": {
                  "text": "Reports statements that might lead to modification of a database during a read-only connection. To enable read-only mode for a connection, right-click a data source in the Database tool window (View | Tool Windows | Database) and select Properties. In the Data Sources and Drivers dialog, click the Options tab and select the Read-only checkbox. Example (MySQL): 'CREATE TABLE foo(a INT);\nINSERT INTO foo VALUES (1);' As 'CREATE TABLE' and 'INSERT INTO' statements lead to a database modification, these statements will be highlighted in read-only connection mode.",
                  "markdown": "Reports statements that might lead to modification of a database during a read-only connection.\n\nTo enable read-only mode for a\nconnection,\nright-click a data source in the **Database** tool window (**View \\| Tool Windows \\| Database** ) and select **Properties** .\nIn the **Data Sources and Drivers** dialog, click the **Options** tab and select the **Read-only** checkbox.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT);\n    INSERT INTO foo VALUES (1);\n\nAs `CREATE TABLE` and `INSERT INTO` statements lead to a database modification, these statements will be highlighted\nin read-only connection mode."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlIllegalCursorStateInspection",
                "shortDescription": {
                  "text": "Illegal cursor state"
                },
                "fullDescription": {
                  "text": "Reports illegal cursor states inside SQL routines. A routine has CLOSE or FETCH statements but a cursor might be closed. A routine has the OPEN statement but a cursor might be opened. Example (Microsoft SQL Server): 'CREATE TABLE t(col INT);\n\nCREATE PROCEDURE foo() AS\nBEGIN\nDECLARE my_cursor CURSOR FOR SELECT * FROM t;\nDECLARE a INT;\nFETCH my_cursor INTO a;\nCLOSE my_cursor;\nEND;' According to CLOSE (Transact-SQL) at docs.microsoft.com, CLOSE must be issued on an open cursor, and CLOSE is not allowed on cursors that have only been declared or are already closed. So, we need to open the cursor to fix the warning. 'CREATE PROCEDURE foo() AS\nBEGIN\nDECLARE my_cursor CURSOR FOR SELECT * FROM t;\nDECLARE a INT;\nOPEN my_cursor;\nFETCH my_cursor INTO a;\nCLOSE my_cursor;\nEND;'",
                  "markdown": "Reports illegal cursor states inside SQL routines.\n\n* A routine has CLOSE or FETCH statements but a cursor might be closed.\n* A routine has the OPEN statement but a cursor might be opened.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE t(col INT);\n\n    CREATE PROCEDURE foo() AS\n    BEGIN\n    DECLARE my_cursor CURSOR FOR SELECT * FROM t;\n    DECLARE a INT;\n    FETCH my_cursor INTO a;\n    CLOSE my_cursor;\n    END;\n\nAccording to [CLOSE (Transact-SQL) at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/language-elements/close-transact-sql), CLOSE must be issued on an open cursor, and CLOSE is not allowed on cursors that have only been declared or are\nalready closed. So, we need to open the cursor to fix the warning.\n\n    CREATE PROCEDURE foo() AS\n    BEGIN\n    DECLARE my_cursor CURSOR FOR SELECT * FROM t;\n    DECLARE a INT;\n    OPEN my_cursor;\n    FETCH my_cursor INTO a;\n    CLOSE my_cursor;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlJoinWithoutOnInspection",
                "shortDescription": {
                  "text": "Unsafe 'join' clause in 'delete' statement"
                },
                "fullDescription": {
                  "text": "Reports missing conditional checks for statements that might modify the whole database. For example, usages of JOIN clauses inside DELETE statements without ON or WHERE. Without conditional checks on JOIN, DELETE drops contents of the entire table. Example (MySQL): 'CREATE TABLE foo (a INT,b INT,c INT);\nCREATE TABLE bar (a INT,b INT,c INT);\n\nDELETE table1 FROM foo table1  INNER JOIN bar table2;'",
                  "markdown": "Reports missing conditional checks for statements that might modify the whole database.\n\nFor example, usages of JOIN clauses inside DELETE statements without ON or WHERE. Without conditional checks on JOIN, DELETE drops\ncontents of the entire table.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT,b INT,c INT);\n    CREATE TABLE bar (a INT,b INT,c INT);\n\n    DELETE table1 FROM foo table1  INNER JOIN bar table2;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDropIndexedColumnInspection",
                "shortDescription": {
                  "text": "Index is dependent on column"
                },
                "fullDescription": {
                  "text": "Reports cases when you try to drop columns from indexed tables. This inspection is available in Microsoft SQL Server and Sybase ASE. Example (Microsoft SQL Server): 'CREATE TABLE test_index\n(\ncol  INT NOT NULL,\ncol2 INT NOT NULL,\ncol3 INT NOT NULL UNIQUE,\ncol4 VARCHAR(200)\n);\n\nCREATE UNIQUE INDEX aaaa ON test_index (col, col2);\n\nALTER TABLE test_index\nDROP COLUMN col;' You cannot delete the 'col' column because it is in the indexed table. To delete the column, you need to delete the 'aaaa' index first (for example, DROP INDEX aaaa).",
                  "markdown": "Reports cases when you try to drop columns from indexed tables. This inspection is available in Microsoft SQL Server and Sybase ASE.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE test_index\n    (\n    col  INT NOT NULL,\n    col2 INT NOT NULL,\n    col3 INT NOT NULL UNIQUE,\n    col4 VARCHAR(200)\n    );\n\n    CREATE UNIQUE INDEX aaaa ON test_index (col, col2);\n\n    ALTER TABLE test_index\n    DROP COLUMN col;\n\nYou cannot delete the `col` column because it is in the indexed table. To delete the column, you need to delete the\n`aaaa` index first (for example, DROP INDEX aaaa)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCheckUsingColumnsInspection",
                "shortDescription": {
                  "text": "Check using clause columns"
                },
                "fullDescription": {
                  "text": "Reports columns in the USING clause that does not exist in both tables. Example (MySQL): 'CREATE TABLE t1 (i INT, j INT);\nCREATE TABLE t2 (k INT, l INT);\nSELECT * FROM t1 JOIN t2 USING (j);' In USING clauses, a column name must be present in both tables, and the SELECT query will automatically join those tables by using the given column name. As we do not have the 'j' column in 't2', we can rewrite the query using ON. The ON clause can join tables where the column names do not match in both tables. 'SELECT * FROM t1 JOIN t2 ON t1.j = t2.l;'",
                  "markdown": "Reports columns in the USING clause that does not exist in both tables.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (i INT, j INT);\n    CREATE TABLE t2 (k INT, l INT);\n    SELECT * FROM t1 JOIN t2 USING (j);\n\nIn USING clauses, a column name must be present in both tables, and the SELECT query will automatically join\nthose tables by using the given column name. As we do not have the `j` column in `t2`, we can\nrewrite the query using ON. The ON clause can join tables where the column names do not match in both tables.\n\n    SELECT * FROM t1 JOIN t2 ON t1.j = t2.l;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlSignatureInspection",
                "shortDescription": {
                  "text": "Function signature"
                },
                "fullDescription": {
                  "text": "Reports signature issues for built-in functions. The inspection will report a wrong number of arguments, invalid keywords, wrong data types, and other issues. Example (MySQL): 'CREATE TABLE foo (a INT, b INT, c INT)\n\nSELECT IFNULL() FROM foo; -- error\nSELECT IFNULL(a) FROM foo; -- error\nSELECT IFNULL(a, b) FROM foo; -- OK\nSELECT IFNULL(a, b, c) FROM foo; -- error' In MySQL, the 'IFNULL()' function accepts strictly two arguments. So, only the 'SELECT IFNULL(a, b) FROM foo;' query is correct.",
                  "markdown": "Reports signature issues for built-in functions.\n\nThe inspection will report a wrong number of arguments, invalid keywords, wrong data types, and other issues.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT, b INT, c INT)\n\n    SELECT IFNULL() FROM foo; -- error\n    SELECT IFNULL(a) FROM foo; -- error\n    SELECT IFNULL(a, b) FROM foo; -- OK\n    SELECT IFNULL(a, b, c) FROM foo; -- error\n\nIn MySQL, the `IFNULL()` function accepts strictly two arguments. So, only the `SELECT IFNULL(a, b) FROM foo;`\nquery is correct."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantOrderingDirectionInspection",
                "shortDescription": {
                  "text": "Redundant ordering direction"
                },
                "fullDescription": {
                  "text": "Reports redundant ordering directions like ASC and DESC in ORDER BY clauses. Example (MySQL): 'CREATE TABLE foo(a INT, b INT, c INT);\nSELECT * FROM foo ORDER BY a ASC, b DESC, c ASC;' The ORDER BY keyword sorts the records in the ascending order by default. So, the 'ASC' keyword for 'a' and 'c' columns is redundant.",
                  "markdown": "Reports redundant ordering directions like ASC and DESC in ORDER BY clauses.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT, b INT, c INT);\n    SELECT * FROM foo ORDER BY a ASC, b DESC, c ASC;\n\nThe ORDER BY keyword sorts the records in the ascending order by default. So, the `ASC` keyword for `a` and\n`c` columns is redundant."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlInsertValuesInspection",
                "shortDescription": {
                  "text": "VALUES clause cardinality"
                },
                "fullDescription": {
                  "text": "Reports situations when a number of parameters in VALUES does not match a number of columns in a target table. Example (MySQL): 'CREATE TABLE foo(a INT, b INT, c INT);\n\nINSERT INTO foo VALUES (1,2,3,4)' The 'foo' table has three columns but in the INSERT INTO statement we pass four.",
                  "markdown": "Reports situations when a number of parameters in VALUES does not match a number of columns in a target table.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT, b INT, c INT);\n\n    INSERT INTO foo VALUES (1,2,3,4)\n\nThe `foo` table has three columns but in the INSERT INTO statement we pass four."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlConstantConditionInspection",
                "shortDescription": {
                  "text": "Constant condition"
                },
                "fullDescription": {
                  "text": "Reports conditions in WHERE or JOIN clauses that are always TRUE or always FALSE. Example (MySQL): 'CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nSELECT a FROM t1 WHERE 'Cat' = 'Cat';' The ''Cat' = 'Cat'' is always true and will be reported.",
                  "markdown": "Reports conditions in WHERE or JOIN clauses that are always TRUE or always FALSE.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    SELECT a FROM t1 WHERE 'Cat' = 'Cat';\n\nThe `'Cat' = 'Cat'` is always true and will be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDialectInspection",
                "shortDescription": {
                  "text": "SQL dialect detection"
                },
                "fullDescription": {
                  "text": "Reports situations when a dialect is not assigned to an SQL file. For example, when you open a new SQL file without assigning a dialect to it, you see a notification where the best matching dialect is advised. Click the Use <dialect> link to use the advised dialect. Alternatively, click the Change dialect to link to select the other dialect.",
                  "markdown": "Reports situations when a dialect is not assigned to an SQL file.\n\nFor example, when you open a new SQL file without assigning a dialect\nto it, you see a notification where the best matching dialect is advised. Click the **Use \\<dialect\\>** link to use the advised\ndialect. Alternatively, click the **Change dialect to** link to select the other dialect."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantElseNullInspection",
                "shortDescription": {
                  "text": "Redundant ELSE NULL clause"
                },
                "fullDescription": {
                  "text": "Reports redundant ELSE NULL clauses. Example (MySQL): 'SELECT CASE WHEN 2 > 1 THEN 'OK' ELSE NULL END AS alias FROM foo;' The 'ELSE NULL' part will never be executed and may be omitted.",
                  "markdown": "Reports redundant ELSE NULL clauses.\n\nExample (MySQL):\n\n    SELECT CASE WHEN 2 > 1 THEN 'OK' ELSE NULL END AS alias FROM foo;\n\nThe `ELSE NULL` part will never be executed and may be omitted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDeprecateTypeInspection",
                "shortDescription": {
                  "text": "Deprecated type"
                },
                "fullDescription": {
                  "text": "Reports usages of types that are deprecated and might disappear in future versions of DBMS. Reported types: LONG in Oracle (see Deprecated and Desupported Features at docs.oracle.com). TEXT, NTEXT, and IMAGE in Microsoft SQL Server (see Deprecated Database Engine Features in SQL Server 2016 at docs.microsoft.com). Example (Oracle): 'CREATE TABLE ot.foo(\na NUMBER GENERATED BY DEFAULT AS IDENTITY,\nb LONG NOT NULL\n);'",
                  "markdown": "Reports usages of types that are deprecated and might disappear in future versions of DBMS.\n\nReported types:\n\n* LONG in Oracle (see [Deprecated\n  and Desupported Features at docs.oracle.com](https://docs.oracle.com/cd/A91202_01/901_doc/server.901/a90120/ch4_dep.htm#6690)).\n* TEXT, NTEXT, and IMAGE in Microsoft SQL Server (see [Deprecated Database Engine Features in SQL Server 2016 at docs.microsoft.com](https://docs.microsoft.com/en-us/sql/database-engine/deprecated-database-engine-features-in-sql-server-2016?view=sql-server-ver15)).\n\nExample (Oracle):\n\n    CREATE TABLE ot.foo(\n    a NUMBER GENERATED BY DEFAULT AS IDENTITY,\n    b LONG NOT NULL\n    );\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAggregatesInspection",
                "shortDescription": {
                  "text": "Aggregate-related problems"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of SQL aggregate functions. The following situations are considered: Columns that are used in HAVING and ORDER BY clauses but are missed in GROUP BY clauses. 'CREATE TABLE foo(id INT PRIMARY KEY, a INT, b INT);\nSELECT a, MAX(b) FROM foo GROUP BY a HAVING b > 0;\nSELECT * FROM foo GROUP BY a ORDER BY b;' This rule does not apply when grouping is made by the primary key. 'SELECT * FROM foo GROUP BY id ORDER BY b;' Aggregate functions in a wrong context. Usually, you can use aggregate functions in the following contexts: a list of expressions in SELECT; in HAVING and ORDER BY sections; and other dialect-specific cases. The following queries will display an error. 'SELECT a FROM foo WHERE MAX(b) > 0;\nSELECT a FROM foo GROUP BY MAX(a);' Nested calls of aggregate functions. 'SELECT MAX(SUM(a)) FROM foo GROUP BY a;' This rule does not apply to analytic functions. The following query is valid and correct. 'SELECT MAX(SUM(a) OVER ()) FROM foo;' Usages of HAVING without aggregate functions. In this case, consider rewriting your code using the WHERE section. 'SELECT a, MAX(b) FROM foo GROUP BY a HAVING a > 0;'",
                  "markdown": "Reports invalid usages of SQL aggregate functions.\n\nThe following situations are considered:\n\n* Columns that are used in HAVING and ORDER BY clauses but are missed in GROUP BY clauses.\n\n      CREATE TABLE foo(id INT PRIMARY KEY, a INT, b INT);\n      SELECT a, MAX(b) FROM foo GROUP BY a HAVING b > 0;\n      SELECT * FROM foo GROUP BY a ORDER BY b;\n\n  This rule does not apply when grouping is made by the primary key.\n\n      SELECT * FROM foo GROUP BY id ORDER BY b;\n\n* Aggregate functions in a wrong context. Usually, you can use aggregate functions in the following contexts: a list of expressions in\n  SELECT; in HAVING and ORDER BY sections; and other dialect-specific cases. The following queries will display an error.\n\n      SELECT a FROM foo WHERE MAX(b) > 0;\n      SELECT a FROM foo GROUP BY MAX(a);\n\n* Nested calls of aggregate functions.\n\n      SELECT MAX(SUM(a)) FROM foo GROUP BY a;\n\n  This rule does not apply to analytic functions. The following query is valid and correct.\n\n      SELECT MAX(SUM(a) OVER ()) FROM foo;\n\n* Usages of HAVING without aggregate functions. In this case, consider rewriting your code using the WHERE section.\n\n      SELECT a, MAX(b) FROM foo GROUP BY a HAVING a > 0;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCallNotationInspection",
                "shortDescription": {
                  "text": "Using of named and positional arguments"
                },
                "fullDescription": {
                  "text": "Reports calls in which positional arguments go after the named ones. Works in PostgreSQL, Oracle, and Db2. Example (In PostgreSQL): 'CREATE FUNCTION foo(a int, b int, c int) RETURNS int\n    LANGUAGE plpgsql AS\n$$\nBEGIN\n    RETURN a + b + c;\nEND\n$$;\nSELECT foo(a => 1, b => 2, c => 3);\n  -- `3` goes after the named argument\nSELECT foo(1, b => 2, 3);\n  -- `1` and `3` go after the named argument\nSELECT foo(b => 2, 1, 3);'",
                  "markdown": "Reports calls in which positional arguments go after the named ones. Works in PostgreSQL, Oracle, and Db2.\n\nExample (In PostgreSQL):\n\n    CREATE FUNCTION foo(a int, b int, c int) RETURNS int\n        LANGUAGE plpgsql AS\n    $$\n    BEGIN\n        RETURN a + b + c;\n    END\n    $$;\n    SELECT foo(a => 1, b => 2, c => 3);\n      -- `3` goes after the named argument\n    SELECT foo(1, b => 2, 3);\n      -- `1` and `3` go after the named argument\n    SELECT foo(b => 2, 1, 3);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MysqlParsingInspection",
                "shortDescription": {
                  "text": "Unsupported syntax in pre-8.0 versions"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of UNION in queries. The inspection works in MySQL versions that are earlier than 8.0. Example (MySQL): 'SELECT * FROM (SELECT 1 UNION (SELECT 1 UNION SELECT 2)) a;'",
                  "markdown": "Reports invalid usages of UNION in queries.\n\nThe inspection works in MySQL versions that are earlier than 8.0.\n\nExample (MySQL):\n\n\n    SELECT * FROM (SELECT 1 UNION (SELECT 1 UNION SELECT 2)) a;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MySQL",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlConstantExpressionInspection",
                "shortDescription": {
                  "text": "Constant expression"
                },
                "fullDescription": {
                  "text": "Reports conditions and expressions that are always true, false or null. Example (MySQL): 'CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nSELECT a FROM t1 WHERE 'Cat' = 'Cat';\nSELECT a FROM t1 WHERE 'Cat' = null;' The ''Cat' = 'Cat'' is always true and will be reported. The ''Cat' = null' is always null and will be reported.",
                  "markdown": "Reports conditions and expressions that are always true, false or null.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    SELECT a FROM t1 WHERE 'Cat' = 'Cat';\n    SELECT a FROM t1 WHERE 'Cat' = null;\n\nThe `'Cat' = 'Cat'` is always true and will be reported.\n\nThe `'Cat' = null` is always null and will be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMissingColumnAliasesInspection",
                "shortDescription": {
                  "text": "Missing column aliases"
                },
                "fullDescription": {
                  "text": "Reports queries without explicit aliases in output expressions (for example, in the SELECT statement). Example (PostgreSQL): 'CREATE TABLE foo(a INT, b INT);\n\nSELECT 1, a + 1 AS A2, MAX(b) AS M\nFROM foo;'",
                  "markdown": "Reports queries without explicit aliases in output expressions (for example, in the SELECT statement).\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT, b INT);\n\n    SELECT 1, a + 1 AS A2, MAX(b) AS M\n    FROM foo;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAddNotNullColumnInspection",
                "shortDescription": {
                  "text": "Adding not null column without default value"
                },
                "fullDescription": {
                  "text": "Reports attempts to create NOT NULL columns without DEFAULT values. Example (Microsoft SQL Server): 'CREATE TABLE foo (a INT, b  INT)\n\nALTER TABLE foo ADD c INT NOT NULL;' By default, a column holds NULL values. In the example, we use the NOT NULL constraint that enforces a column not to accept NULL values. If we prohibit to use NULL values, we must set the DEFAULT value that SQL can use when we create a new record. 'ALTER TABLE foo ADD c INT NOT NULL DEFAULT 42;' You can quickly add the DEFAULT value by using the Add DEFAULT value quick-fix.",
                  "markdown": "Reports attempts to create NOT NULL columns without DEFAULT values.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE foo (a INT, b  INT)\n\n    ALTER TABLE foo ADD c INT NOT NULL;\n\nBy default, a column holds NULL values. In the example, we use the NOT NULL constraint that enforces a column not to accept NULL values.\nIf we prohibit to use NULL values, we must set the DEFAULT value that SQL can use when we create a new record.\n\n    ALTER TABLE foo ADD c INT NOT NULL DEFAULT 42;\n\nYou can quickly add the DEFAULT value by using the **Add DEFAULT value** quick-fix."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDuplicateColumnInspection",
                "shortDescription": {
                  "text": "Duplicating column name in SELECT"
                },
                "fullDescription": {
                  "text": "Reports duplicated names of column aliases in SELECT lists. Example (Sybase ASE): 'CREATE TABLE t1 (a TEXT, b INT, c INT);\n\nSELECT a AS x, b AS x FROM t1;' The 'x' alias name is used for 'a' and 'b' columns. These assignments are highlighted as errors because you cannot use identical alias names for columns in Sybase ASE.",
                  "markdown": "Reports duplicated names of column aliases in SELECT lists.\n\nExample (Sybase ASE):\n\n    CREATE TABLE t1 (a TEXT, b INT, c INT);\n\n    SELECT a AS x, b AS x FROM t1;\n\nThe `x` alias name is used for `a` and `b` columns. These assignments are highlighted as errors because\nyou cannot use identical alias names for columns in Sybase ASE."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlShadowingAliasInspection",
                "shortDescription": {
                  "text": "Column is shadowed by alias"
                },
                "fullDescription": {
                  "text": "Reports SELECT aliases with names that match column names in the FROM clause. Example (MySQL): 'CREATE TABLE foo (a INT, b INT, c INT);\nSELECT a b, c FROM foo;' The 'a' column uses the 'b' alias but the 'b' name is also used by the column from the 'foo' table.",
                  "markdown": "Reports SELECT aliases with names that match column names in the FROM clause.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT, b INT, c INT);\n    SELECT a b, c FROM foo;\n\nThe `a` column uses the `b` alias but the `b` name is also used by the column from the `foo`\ntable."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSDeprecationInspection",
                "shortDescription": {
                  "text": "Deprecated element"
                },
                "fullDescription": {
                  "text": "Reports usages of deprecated methods in MongoDB and JavaScript code. The quick-fix replaces deprecated methods with recommended alternatives. Example: 'db.my_collection.insert()' After the quick-fix is applied: 'db.my_collection.insertOne()'",
                  "markdown": "Reports usages of deprecated methods in MongoDB and JavaScript code.\n\nThe quick-fix replaces deprecated methods with recommended alternatives.\n\nExample:\n\n    db.my_collection.insert()\n\nAfter the quick-fix is applied:\n\n    db.my_collection.insertOne()\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlTypeInspection",
                "shortDescription": {
                  "text": "Types compatibility"
                },
                "fullDescription": {
                  "text": "Reports type-related errors.",
                  "markdown": "Reports type-related errors."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OraOverloadInspection",
                "shortDescription": {
                  "text": "Overloading errors"
                },
                "fullDescription": {
                  "text": "Reports invalid cases of subprogram overloading in Oracle. Example (Oracle): 'DECLARE\n    SUBTYPE fff IS BINARY_INTEGER;\n    SUBTYPE ggg IS NATURAL;\n    PROCEDURE foo (a IN ggg) IS BEGIN NULL; END;\n    PROCEDURE foo (a IN fff) IS BEGIN NULL; END;\nBEGIN\n    NULL;\nEND;' You cannot overload subprograms which parameters differ only in subtypes. For example, you cannot overload procedures where one accepts a BINARY INTEGER parameter and the other accepts a NATURAL parameter. For more information about restrictions on procedure overloading, see Restrictions on Overloading at docs.oracle.com.",
                  "markdown": "Reports invalid cases of subprogram overloading in Oracle.\n\nExample (Oracle):\n\n    DECLARE\n        SUBTYPE fff IS BINARY_INTEGER;\n        SUBTYPE ggg IS NATURAL;\n        PROCEDURE foo (a IN ggg) IS BEGIN NULL; END;\n        PROCEDURE foo (a IN fff) IS BEGIN NULL; END;\n    BEGIN\n        NULL;\n    END;\n\nYou cannot overload subprograms which parameters differ only in subtypes. For example, you cannot overload procedures where one accepts a\nBINARY INTEGER parameter and the other accepts a NATURAL parameter. For more information about restrictions on procedure overloading,\nsee [Restrictions on Overloading at docs.oracle.com](https://docs.oracle.com/cd/B19306_01/appdev.102/b14261/subprograms.htm)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Oracle",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnreachableCodeInspection",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports unreachable statements inside SQL routines. Example (Microsoft SQL Server): 'CREATE FUNCTION foo() RETURNS INT AS\nBEGIN\n    THROW;\n    RETURN 1;\nEND;' In Microsoft SQL Server, the 'THROW' statement raises an exception and transfers execution to the CATCH block of the TRY...CATCH construct. Therefore, the 'RETURN 1;' part will never be executed.",
                  "markdown": "Reports unreachable statements inside SQL routines.\n\nExample (Microsoft SQL Server):\n\n    CREATE FUNCTION foo() RETURNS INT AS\n    BEGIN\n        THROW;\n        RETURN 1;\n    END;\n\nIn Microsoft SQL Server, the `THROW` statement raises an exception and transfers execution to the CATCH block of the TRY...CATCH\nconstruct. Therefore, the `RETURN 1;` part will never be executed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OraMissingBodyInspection",
                "shortDescription": {
                  "text": "Missing body for package/object type specification"
                },
                "fullDescription": {
                  "text": "Reports package and object type specifications that are missing body declarations. Package specifications and object types that declare routines as well as package specifications with cursors must have body declarations where those routines and cursors are implemented. Absence of a body leads to a runtime error when routines or cursors are invoked in program code. Example (Oracle): 'CREATE OR REPLACE PACKAGE ppp IS\n    FUNCTION foo(a INT) RETURN INT;\nEND;'",
                  "markdown": "Reports package and object type specifications that are missing body declarations.\n\nPackage specifications and object types that declare routines as well as package specifications with cursors must have body\ndeclarations where those routines and cursors are implemented. Absence of a body leads to a runtime error when routines or cursors are\ninvoked in program code.\n\nExample (Oracle):\n\n    CREATE OR REPLACE PACKAGE ppp IS\n        FUNCTION foo(a INT) RETURN INT;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Oracle",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OraUnmatchedForwardDeclarationInspection",
                "shortDescription": {
                  "text": "Forward declaration without definition"
                },
                "fullDescription": {
                  "text": "Reports declarations of procedures and functions that are missing their implementation in code. In Oracle, you can declare a procedure or a function without its body, and write the implementation later. The inspection will report names of such procedures or functions that are left without implementation. Example (Oracle): 'DECLARE PROCEDURE foo(a int, b varchar2);\nBEGIN\n    NULL;\nEND;' The 'foo' procedure is declared but is missing implementation. We can add the implementation to get rid of the error. 'DECLARE PROCEDURE foo(a int, b varchar2);\n  PROCEDURE foo(a int, b varchar2) IS\nBEGIN\n    NULL;\nEND;\nBEGIN\n    NULL;\nEND;'",
                  "markdown": "Reports declarations of procedures and functions that are missing their implementation in code.\n\nIn Oracle, you can declare a procedure or a function without its body, and write the implementation later. The inspection will report names\nof such procedures or functions that are left without implementation.\n\nExample (Oracle):\n\n    DECLARE PROCEDURE foo(a int, b varchar2);\n    BEGIN\n        NULL;\n    END;\n\nThe `foo` procedure is declared but is missing implementation. We can add the implementation to get rid of the error.\n\n    DECLARE PROCEDURE foo(a int, b varchar2);\n      PROCEDURE foo(a int, b varchar2) IS\n    BEGIN\n        NULL;\n    END;\n    BEGIN\n        NULL;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Oracle",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnicodeStringLiteralInspection",
                "shortDescription": {
                  "text": "Unicode usage in SQL"
                },
                "fullDescription": {
                  "text": "Reports string literals that use national characters without the 'N' prefix. Without the N prefix, the string is converted to the default code page of the database. This default code page may not recognize certain characters. For more information, see nchar and nvarchar (Transact-SQL) at docs.microsoft.com. Example (Microsoft SQL Server): 'SELECT 'abcde' AS a;\nSELECT N'abcde' AS b;\nSELECT 'абвгд' AS c;\nSELECT N'абвгд' AS d;' The 'SELECT 'абвгд' AS c;' does not have the 'N' prefix, the ''абвгд'' part will be highlighted.",
                  "markdown": "Reports string literals that use national characters without the `N` prefix.\n\nWithout the N prefix, the string is converted to the default\ncode page of the database. This default code page may not recognize certain characters. For more information, see\n[nchar and nvarchar\n(Transact-SQL)\nat docs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/data-types/nchar-and-nvarchar-transact-sql).\n\nExample (Microsoft SQL Server):\n\n    SELECT 'abcde' AS a;\n    SELECT N'abcde' AS b;\n    SELECT 'абвгд' AS c;\n    SELECT N'абвгд' AS d;\n\nThe `SELECT 'абвгд' AS c;` does not have the `N` prefix, the `'абвгд'` part will be highlighted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlGotoInspection",
                "shortDescription": {
                  "text": "Usages of GOTO statements"
                },
                "fullDescription": {
                  "text": "Reports usages of backward GOTO statements and GOTO statements used to exit a loop. The extensive use of GOTO statements is generally not recommended. For details, see GOTO statement in SQL procedures at ibm.com. Instead of jumping back to a previous statement using GOTO, consider using a loop. Instead of exiting the WHILE loop with GOTO, consider using other control-of-flow statements (for example, RETURN or BREAK). Example (Oracle): 'CREATE PROCEDURE test(n INT) AS\nDECLARE\n    x INT;\nBEGIN\n    x := 0;\n    GOTO a;\n    <<a>> x := 1;\n    IF (n = 0) THEN\n        GOTO a;\n    END IF;\n    WHILE TRUE\n        LOOP\n            GOTO b;\n        END LOOP;\n    <<b>> x := 3;\nEND;'",
                  "markdown": "Reports usages of backward GOTO statements and GOTO statements used to exit a loop.\n\nThe extensive use of GOTO statements is generally\nnot recommended. For details, see [GOTO statement in\nSQL\nprocedures at ibm.com](https://www.ibm.com/docs/no/db2/11.5?topic=procedures-goto-statement-in-sql).\n\nInstead of jumping back to a previous statement using GOTO, consider using a loop.\n\nInstead of exiting the WHILE loop with GOTO, consider using other control-of-flow statements (for example, RETURN or BREAK).\n\nExample (Oracle):\n\n    CREATE PROCEDURE test(n INT) AS\n    DECLARE\n        x INT;\n    BEGIN\n        x := 0;\n        GOTO a;\n        <<a>> x := 1;\n        IF (n = 0) THEN\n            GOTO a;\n        END IF;\n        WHILE TRUE\n            LOOP\n                GOTO b;\n            END LOOP;\n        <<b>> x := 3;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlNoDataSourceInspection",
                "shortDescription": {
                  "text": "No data sources configured"
                },
                "fullDescription": {
                  "text": "Reports the absence of data sources in the Database tool window (View | Tool Windows | Database).",
                  "markdown": "Reports the absence of data sources in the **Database** tool window (**View \\| Tool Windows \\| Database**)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnusedVariableInspection",
                "shortDescription": {
                  "text": "Unused variable"
                },
                "fullDescription": {
                  "text": "Reports unused arguments, variables, or parameters. Example (PostgreSQL): 'CREATE FUNCTION foo(PARAMUSED INT, PARAMUNUSED INT) RETURNS INT AS\n$$\nBEGIN\n    RETURN PARAMUSED;\nEND\n$$ LANGUAGE plpgsql;' The 'PARAMUNUSED' parameter is not used in the function and might be deleted.",
                  "markdown": "Reports unused arguments, variables, or parameters.\n\nExample (PostgreSQL):\n\n    CREATE FUNCTION foo(PARAMUSED INT, PARAMUNUSED INT) RETURNS INT AS\n    $$\n    BEGIN\n        RETURN PARAMUSED;\n    END\n    $$ LANGUAGE plpgsql;\n\nThe `PARAMUNUSED` parameter is not used in the function and might be deleted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlWithoutWhereInspection",
                "shortDescription": {
                  "text": "Delete or update statement without where clauses"
                },
                "fullDescription": {
                  "text": "Reports usages of DELETE or UPDATE statements without WHERE clauses. Without WHERE clauses, DELETE drops all the data from the table, and UPDATE overwrites values for all the table rows. Example (MySQL): 'CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nupdate t1 set  a = 'Smith';\ndelete from t1;'",
                  "markdown": "Reports usages of DELETE or UPDATE statements without WHERE clauses.\n\nWithout WHERE clauses, DELETE drops all the data from the table, and UPDATE overwrites values for all the table rows.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    update t1 set  a = 'Smith';\n    delete from t1;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAmbiguousColumnInspection",
                "shortDescription": {
                  "text": "Ambiguous reference"
                },
                "fullDescription": {
                  "text": "Reports columns that have identical names but belong to different tables. Example (MySQL): 'CREATE TABLE foo(id INT PRIMARY KEY);\nCREATE TABLE bar(id INT PRIMARY KEY);\n\nSELECT foo.id, bar.id FROM foo, bar WHERE id > 0;' The 'id' column appears in 'foo' and 'bar' tables. You need to qualify the column name to make the query correct. 'SELECT foo.id, bar.id FROM foo, bar WHERE foo.id > 0;'",
                  "markdown": "Reports columns that have identical names but belong to different tables.\n\nExample (MySQL):\n\n    CREATE TABLE foo(id INT PRIMARY KEY);\n    CREATE TABLE bar(id INT PRIMARY KEY);\n\n    SELECT foo.id, bar.id FROM foo, bar WHERE id > 0;\n\nThe `id` column appears in `foo` and `bar` tables. You need to qualify the column name to\nmake the query correct.\n\n    SELECT foo.id, bar.id FROM foo, bar WHERE foo.id > 0;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnusedCteInspection",
                "shortDescription": {
                  "text": "Unused common table expression"
                },
                "fullDescription": {
                  "text": "Reports unused common table expressions (CTE) inside the query. Example (PostgreSQL): 'CREATE TABLE foo(a INT);\n\nWITH a AS (SELECT 1 AS x FROM foo)\nSELECT 1 + 2 FROM foo;' By using WITH, we create a temporary named result set with the name 'a', also known as a common table expression (CTE). But we do not use this CTE later in the code. The unused CTE is greyed out.",
                  "markdown": "Reports unused common table expressions (CTE) inside the query.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT);\n\n    WITH a AS (SELECT 1 AS x FROM foo)\n    SELECT 1 + 2 FROM foo;\n\nBy using WITH, we create a temporary named result set with the name `a`, also known as a common table expression (CTE). But\nwe do not use this CTE later in the code. The unused CTE is greyed out."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSResolveInspection",
                "shortDescription": {
                  "text": "Resolution problems"
                },
                "fullDescription": {
                  "text": "Reports unresolved references in MongoDB and JavaScript code. Example: 'db\nuse foo\n  -- a reference to a non-existing collection\ndb.non_existing_collection\ndb['non_existing_collection']\ndb['non_existing_collection'].find().hasNext()' The 'non_existing_collection' collection does not exist in the database and will be reported.",
                  "markdown": "Reports unresolved references in MongoDB and JavaScript code.\n\nExample:\n\n    db\n    use foo\n      -- a reference to a non-existing collection\n    db.non_existing_collection\n    db['non_existing_collection']\n    db['non_existing_collection'].find().hasNext()\n\nThe `non_existing_collection` collection does not exist in the database and will be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlResolveInspection",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved SQL references. Example (MySQL): 'CREATE TABLE users(id INT, name VARCHAR(40));\nCREATE TABLE admins(id INT, col1 INT);\n\nSELECT users.id, admins.id FROM admins WHERE admins.id > 1;' The 'users.id' column is unresolved because the 'users' table is missing in the FROM clause.",
                  "markdown": "Reports unresolved SQL references.\n\nExample (MySQL):\n\n    CREATE TABLE users(id INT, name VARCHAR(40));\n    CREATE TABLE admins(id INT, col1 INT);\n\n    SELECT users.id, admins.id FROM admins WHERE admins.id > 1;\n\nThe `users.id` column is unresolved because the `users` table is missing in the FROM clause."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlNullComparisonInspection",
                "shortDescription": {
                  "text": "Null comparison"
                },
                "fullDescription": {
                  "text": "Reports comparisons with NULL that can be replaced with IS NULL or IS NOT NULL operators. Example (Microsoft SQL Server): 'CREATE TABLE foo ( id int );\n\nSELECT * FROM foo WHERE NULL = NULL;\nSELECT * FROM foo WHERE NULL != NULL;' The 'NULL = NULL' can be replaced with 'IS NULL', the 'NULL != NULL' comparison with 'IS NOT NULL'. To do this replacement, you can use Use IS NULL operator or Use IS NOT NULL operator quick-fixes. 'SELECT * FROM foo WHERE NULL IS NULL;\nSELECT * FROM foo WHERE NULL IS NOT NULL;'",
                  "markdown": "Reports comparisons with NULL that can be replaced with IS NULL or IS NOT NULL operators.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE foo ( id int );\n\n    SELECT * FROM foo WHERE NULL = NULL;\n    SELECT * FROM foo WHERE NULL != NULL;\n\nThe `NULL = NULL` can be replaced with `IS NULL`, the `NULL != NULL` comparison\nwith `IS NOT NULL`. To do this replacement, you can use **Use IS NULL operator** or **Use IS NOT NULL operator**\nquick-fixes.\n\n    SELECT * FROM foo WHERE NULL IS NULL;\n    SELECT * FROM foo WHERE NULL IS NOT NULL;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij",
            "version": "223.8385.67",
            "rules": [
              {
                "id": "XmlHighlighting",
                "shortDescription": {
                  "text": "XML highlighting"
                },
                "fullDescription": {
                  "text": "Reports XML validation problems in the results of a batch code inspection.",
                  "markdown": "Reports XML validation problems in the results of a batch code inspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDuplicatedId",
                "shortDescription": {
                  "text": "Duplicate 'id' attribute"
                },
                "fullDescription": {
                  "text": "Reports a duplicate 'id' attribute in XML.",
                  "markdown": "Reports a duplicate `id` attribute in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated JSON property"
                },
                "fullDescription": {
                  "text": "Reports a deprecated property in a JSON file. Note that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'.",
                  "markdown": "Reports a deprecated property in a JSON file.  \nNote that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateCharacterInClass",
                "shortDescription": {
                  "text": "Duplicate character in character class"
                },
                "fullDescription": {
                  "text": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex. Example: '[aabc]' After the quick-fix is applied: '[abc]'",
                  "markdown": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.\n\n**Example:**\n\n\n      [aabc]\n\nAfter the quick-fix is applied:\n\n\n      [abc]\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaRefReference",
                "shortDescription": {
                  "text": "Unresolved '$ref' and '$schema' references"
                },
                "fullDescription": {
                  "text": "Reports an unresolved '$ref' or '$schema' path in a JSON schema.",
                  "markdown": "Reports an unresolved `$ref` or `$schema` path in a JSON schema.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownBooleanAttribute",
                "shortDescription": {
                  "text": "Incorrect boolean attribute"
                },
                "fullDescription": {
                  "text": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlInvalidId",
                "shortDescription": {
                  "text": "Unresolved 'id' reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved 'id' reference in XML.",
                  "markdown": "Reports an unresolved `id` reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnboundNsPrefix",
                "shortDescription": {
                  "text": "Unbound namespace prefix"
                },
                "fullDescription": {
                  "text": "Reports an unbound namespace prefix in XML.",
                  "markdown": "Reports an unbound namespace prefix in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicatedCode",
                "shortDescription": {
                  "text": "Duplicated code fragment"
                },
                "fullDescription": {
                  "text": "Reports duplicated blocks of code from the selected scope: the same file or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs. You can also configure the constructs that you want to anonymize in File | Settings | Editor | Duplicates.",
                  "markdown": "Reports duplicated blocks of code from the selected scope: the same file or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs. You can also configure the constructs that you want to anonymize in [File \\| Settings \\| Editor \\| Duplicates](settings://duplicates.index)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RequiredAttributes",
                "shortDescription": {
                  "text": "Missing required attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentLineSeparators",
                "shortDescription": {
                  "text": "Inconsistent line separators"
                },
                "fullDescription": {
                  "text": "Reports files with line separators different from the ones that are specified in the project's settings. For example, the inspection will be triggered if you set the line separator to '\\n' in Settings | Editor | Code Style | Line separator, while the file you are editing uses '\\r\\n' as a line separator. The inspection also warns you about mixed line separators within a file.",
                  "markdown": "Reports files with line separators different from the ones that are specified in the project's settings.\n\nFor example, the inspection will be triggered if you set the line separator to `\\n` in\n[Settings \\| Editor \\| Code Style \\| Line separator](settings://preferences.sourceCode?Line%20separator),\nwhile the file you are editing uses `\\r\\n` as a line separator.\n\nThe inspection also warns you about mixed line separators within a file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReassignedToPlainText",
                "shortDescription": {
                  "text": "Reassigned to plain text"
                },
                "fullDescription": {
                  "text": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically. You can dismiss this warning by removing the file type association in Settings | Editor | File Types | Text.",
                  "markdown": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically.\n\nYou can dismiss this warning by removing the file type association\nin **Settings \\| Editor \\| File Types \\| Text**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantSuppression",
                "shortDescription": {
                  "text": "Redundant suppression"
                },
                "fullDescription": {
                  "text": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context: '@SuppressWarning' annotation, or '// noinspection' line comment, or '/** noinspection */' JavaDoc comment Example: 'public class C {\n // symbol is already private,\n // but annotation is still around\n  @SuppressWarnings({\"WeakerAccess\"})\n private boolean CONST = true;\n void f() {\n    CONST = false;\n  }\n}'",
                  "markdown": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:\n\n* `@SuppressWarning` annotation, or\n* `// noinspection` line comment, or\n* `/** noinspection */` JavaDoc comment\n\nExample:\n\n\n    public class C {\n     // symbol is already private,\n     // but annotation is still around\n      @SuppressWarnings({\"WeakerAccess\"})\n     private boolean CONST = true;\n     void f() {\n        CONST = false;\n      }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ProblematicWhitespace",
                "shortDescription": {
                  "text": "Problematic whitespace"
                },
                "fullDescription": {
                  "text": "Reports the following problems: Tabs used for indentation when the code style is configured to use only spaces. Spaces used for indentation when the code style is configured to use only tabs. Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs.",
                  "markdown": "Reports the following problems:\n\n* Tabs used for indentation when the code style is configured to use only spaces.\n* Spaces used for indentation when the code style is configured to use only tabs.\n* Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTarget",
                "shortDescription": {
                  "text": "Unresolved file in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file in a link.",
                  "markdown": "Reports an unresolved file in a link."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SSBasedInspection",
                "shortDescription": {
                  "text": "Structural search inspection"
                },
                "fullDescription": {
                  "text": "Allows configuring Structural Search/Structural Replace templates that you can apply to the file you are editing. All matches will be highlighted and marked with the template name that you have configured. If you configure the Structural Replace pattern as well, the corresponding replace option will be available as a quick-fix.",
                  "markdown": "Allows configuring **Structural Search/Structural Replace** templates that you can apply to the file you are editing.\n\nAll matches will be highlighted and marked with the template name that you have configured.\nIf you configure the **Structural Replace** pattern as well, the corresponding replace option will be available as a quick-fix."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Structural search",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LongLine",
                "shortDescription": {
                  "text": "Line is longer than allowed by code style"
                },
                "fullDescription": {
                  "text": "Reports lines that are longer than the Hard wrap at parameter specified in Settings | Editor | Code Style | General.",
                  "markdown": "Reports lines that are longer than the **Hard wrap at** parameter specified in [Settings \\| Editor \\| Code Style \\| General](settings://preferences.sourceCode?Hard%20wrap%20at)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnusedNamespaceDeclaration",
                "shortDescription": {
                  "text": "Unused schema declaration"
                },
                "fullDescription": {
                  "text": "Reports an unused namespace declaration or location hint in XML.",
                  "markdown": "Reports an unused namespace declaration or location hint in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantClassElement",
                "shortDescription": {
                  "text": "Redundant '\\d', '[:digit:]', or '\\D' class elements"
                },
                "fullDescription": {
                  "text": "Reports redundant '\\d' or '[:digit:]' that are used in one class with '\\w' or '[:word:]' ('\\D' with '\\W') and can be removed. Example: '[\\w\\d]' After the quick-fix is applied: '[\\w]' New in 2022.2",
                  "markdown": "Reports redundant `\\d` or `[:digit:]` that are used in one class with `\\w` or `[:word:]` (`\\D` with `\\W`) and can be removed.\n\n**Example:**\n\n\n      [\\w\\d]\n\nAfter the quick-fix is applied:\n\n\n      [\\w]\n\nNew in 2022.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSimplifiable",
                "shortDescription": {
                  "text": "Regular expression can be simplified"
                },
                "fullDescription": {
                  "text": "Reports regular expressions that can be simplified. Example: '[a] xx* [ah-hz]' After the quick-fix is applied: 'a x+ [ahz]' New in 2022.1",
                  "markdown": "Reports regular expressions that can be simplified.\n\n**Example:**\n\n\n      [a] xx* [ah-hz]\n\nAfter the quick-fix is applied:\n\n\n      a x+ [ahz]\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlWrongRootElement",
                "shortDescription": {
                  "text": "Wrong root element"
                },
                "fullDescription": {
                  "text": "Reports a root tag name different from the name specified in the '<doctype>' tag.",
                  "markdown": "Reports a root tag name different from the name specified in the `<doctype>` tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEmptyAlternationBranch",
                "shortDescription": {
                  "text": "Empty branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation. Example: '(alpha||bravo)' After the quick-fix is applied: '(alpha|bravo)' New in 2017.2",
                  "markdown": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation.\n\n**Example:**\n\n\n      (alpha||bravo)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo)\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathEvaluateUnknownKey",
                "shortDescription": {
                  "text": "Unknown property key used for JSONPath evaluate expression"
                },
                "fullDescription": {
                  "text": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate.",
                  "markdown": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckValidXmlInScriptTagBody",
                "shortDescription": {
                  "text": "Malformed content of 'script' tag"
                },
                "fullDescription": {
                  "text": "Reports contents of 'script' tags that are invalid XML. Example: '<script type=\"text/javascript\">\n    console.log('<');\n  </script>' After the quick-fix is applied: '<script type=\"text/javascript\">\n    console.log('&lt;');\n  </script>'",
                  "markdown": "Reports contents of `script` tags that are invalid XML.  \n\n**Example:**\n\n\n      <script type=\"text/javascript\">\n        console.log('<');\n      </script>\n\nAfter the quick-fix is applied:\n\n\n      <script type=\"text/javascript\">\n        console.log('&lt;');\n      </script>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Annotator",
                "shortDescription": {
                  "text": "Annotator"
                },
                "fullDescription": {
                  "text": "Reports problems that are found by language annotators in the result of a batch code inspection run.",
                  "markdown": "Reports problems that are found by language annotators in the result of a batch code inspection run."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSuspiciousBackref",
                "shortDescription": {
                  "text": "Suspicious back reference"
                },
                "fullDescription": {
                  "text": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation. Example of a group defined after its back reference: '\\1(abc)' Example of a group and a back reference in different branches: 'a(b)c|(xy)\\1z' New in 2022.1",
                  "markdown": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation.\n\n**Example of a group defined after its back reference:**\n\n\n      \\1(abc)\n\n**Example of a group and a back reference in different branches:**\n\n\n      a(b)c|(xy)\\1z\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlPathReference",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference in XML.",
                  "markdown": "Reports an unresolved file reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSingleCharAlternation",
                "shortDescription": {
                  "text": "Single character alternation"
                },
                "fullDescription": {
                  "text": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance. Example: 'a|b|c|d' After the quick-fix is applied: '[abcd]' New in 2017.1",
                  "markdown": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance.\n\n**Example:**\n\n\n      a|b|c|d\n\nAfter the quick-fix is applied:\n\n\n      [abcd]\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnnecessaryNonCapturingGroup",
                "shortDescription": {
                  "text": "Unnecessary non-capturing group"
                },
                "fullDescription": {
                  "text": "Reports unnecessary non-capturing groups, which have no influence on the match result. Example: 'Everybody be cool, (?:this) is a robbery!' After the quick-fix is applied: 'Everybody be cool, this is a robbery!' New in 2021.1",
                  "markdown": "Reports unnecessary non-capturing groups, which have no influence on the match result.\n\n**Example:**\n\n\n      Everybody be cool, (?:this) is a robbery!\n\nAfter the quick-fix is applied:\n\n\n      Everybody be cool, this is a robbery!\n\nNew in 2021.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TodoComment",
                "shortDescription": {
                  "text": "TODO comment"
                },
                "fullDescription": {
                  "text": "Reports TODO comments in your code. You can configure the format for TODO comments in Settings | Editor | TODO. Enable the Only warn on TODO comments without any details option to only warn on empty TODO comments, that don't provide any description on the task that should be done. Disable to report all TODO comments.",
                  "markdown": "Reports **TODO** comments in your code.\n\nYou can configure the format for **TODO** comments in [Settings \\| Editor \\| TODO](settings://preferences.toDoOptions).\n\nEnable the **Only warn on TODO comments without any details** option to only warn on empty TODO comments, that\ndon't provide any description on the task that should be done. Disable to report all TODO comments."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAttribute",
                "shortDescription": {
                  "text": "Unknown attribute"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckTagEmptyBody",
                "shortDescription": {
                  "text": "Empty element content"
                },
                "fullDescription": {
                  "text": "Reports XML elements without contents. Example: '<user>\n    <name></name>\n  </user>' After the quick-fix is applied: '<user>\n    <name/>\n  </user>'",
                  "markdown": "Reports XML elements without contents.\n\n**Example:**\n\n\n      <user>\n        <name></name>\n      </user>\n\nAfter the quick-fix is applied:\n\n\n      <user>\n        <name/>\n      </user>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantEscape",
                "shortDescription": {
                  "text": "Redundant character escape"
                },
                "fullDescription": {
                  "text": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets '[]' of a character class. Although unescaped opening curly braces '{' outside of character classes are allowed in some dialects (JavaScript, Python, and so on), it can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters. For this reason the inspection does not report escaped opening curly braces. Example: '\\-\\;[\\.]' After the quick-fix is applied: '-;[.]' The Ignore escaped closing brackets '}' and ']' option specifies whether to report '\\}' and '\\]' outside of a character class when they are allowed to be unescaped by the RegExp dialect. New in 2017.3",
                  "markdown": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Json5StandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON5 standard"
                },
                "fullDescription": {
                  "text": "Reports inconsistency with the language specification in a JSON5 file.",
                  "markdown": "Reports inconsistency with [the language specification](http://json5.org) in a JSON5 file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonDuplicatePropertyKeys",
                "shortDescription": {
                  "text": "Duplicate keys in object literals"
                },
                "fullDescription": {
                  "text": "Reports a duplicate key in an object literal.",
                  "markdown": "Reports a duplicate key in an object literal."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a named pattern ('define') in RELAX-NG files that use XML syntax. Suggests creating the referenced 'define' element.",
                  "markdown": "Reports an unresolved reference to a named pattern (`define`) in RELAX-NG files that use XML syntax. Suggests creating the referenced `define` element."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathUnknownFunction",
                "shortDescription": {
                  "text": "Unknown JSONPath function"
                },
                "fullDescription": {
                  "text": "Reports an unknown name in a JSONPath function call instead of known standard function names: 'concat', 'keys', 'length', 'min', 'max', 'avg', 'stddev', 'sum'.",
                  "markdown": "Reports an unknown name in a JSONPath function call instead of known standard function names: `concat`, `keys`, `length`, `min`, `max`, `avg`, `stddev`, `sum`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlMissingClosingTag",
                "shortDescription": {
                  "text": "Missing closing tag"
                },
                "fullDescription": {
                  "text": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional. Example: '<html>\n    <body>\n      <p>Behold!\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <p>Behold!</p>\n    </body>\n  </html>'",
                  "markdown": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <p>Behold!\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <p>Behold!</p>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDeprecatedElement",
                "shortDescription": {
                  "text": "Deprecated symbol"
                },
                "fullDescription": {
                  "text": "Reports a deprecated XML element or attribute. Symbols can be marked by XML comment or documentation tag with text 'deprecated'.",
                  "markdown": "Reports a deprecated XML element or attribute.\n\nSymbols can be marked by XML comment or documentation tag with text 'deprecated'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantNestedCharacterClass",
                "shortDescription": {
                  "text": "Redundant nested character class"
                },
                "fullDescription": {
                  "text": "Reports unnecessary nested character classes. Example: '[a-c[x-z]]' After the quick-fix is applied: '[a-cx-z]' New in 2020.2",
                  "markdown": "Reports unnecessary nested character classes.\n\n**Example:**\n\n\n      [a-c[x-z]]\n\nAfter the quick-fix is applied:\n\n\n      [a-cx-z]\n\nNew in 2020.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncorrectFormatting",
                "shortDescription": {
                  "text": "Incorrect formatting"
                },
                "fullDescription": {
                  "text": "Reports formatting issues that appear if your code doesn't follow your project's code style settings. This inspection is not compatible with languages that require third-party formatters for code formatting, for example, Go or C with CLangFormat enabled.",
                  "markdown": "Reports formatting issues that appear if your code doesn't\nfollow your project's code style settings.\n\n\nThis inspection is not compatible with languages that require\nthird-party formatters for code formatting, for example, Go or\nC with CLangFormat enabled."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlWrongAttributeValue",
                "shortDescription": {
                  "text": "Wrong attribute value"
                },
                "fullDescription": {
                  "text": "Reports an incorrect HTML attribute value.",
                  "markdown": "Reports an incorrect HTML attribute value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDefaultAttributeValue",
                "shortDescription": {
                  "text": "Redundant attribute with default value"
                },
                "fullDescription": {
                  "text": "Reports a redundant assignment of the default value to an XML attribute.",
                  "markdown": "Reports a redundant assignment of the default value to an XML attribute."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpOctalEscape",
                "shortDescription": {
                  "text": "Octal escape"
                },
                "fullDescription": {
                  "text": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion. Example: '\\07' After the quick-fix is applied: '\\x07' New in 2017.1",
                  "markdown": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion.\n\n**Example:**\n\n\n      \\07\n\nAfter the quick-fix is applied:\n\n\n      \\x07\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlExtraClosingTag",
                "shortDescription": {
                  "text": "Redundant closing tag"
                },
                "fullDescription": {
                  "text": "Reports redundant closing tags on empty elements, for example, 'img' or 'br'. Example: '<html>\n    <body>\n      <br></br>\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <br>\n    </body>\n  </html>'",
                  "markdown": "Reports redundant closing tags on empty elements, for example, `img` or `br`.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <br></br>\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <br>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedDefine",
                "shortDescription": {
                  "text": "Unused define"
                },
                "fullDescription": {
                  "text": "Reports an unused named pattern ('define') in a RELAX-NG file (XML or Compact Syntax). 'define' elements that are used through an include in another file are ignored.",
                  "markdown": "Reports an unused named pattern (`define`) in a RELAX-NG file (XML or Compact Syntax). `define` elements that are used through an include in another file are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAnchorTarget",
                "shortDescription": {
                  "text": "Unresolved fragment in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved last part of an URL after the '#' sign.",
                  "markdown": "Reports an unresolved last part of an URL after the `#` sign."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistence between a JSON file and the JSON schema that is assigned to it.",
                  "markdown": "Reports inconsistence between a JSON file and the [JSON schema](https://json-schema.org) that is assigned to it.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnexpectedAnchor",
                "shortDescription": {
                  "text": "Begin or end anchor in unexpected position"
                },
                "fullDescription": {
                  "text": "Reports '^' or '\\A' anchors not at the beginning of the pattern and '$', '\\Z' or '\\z' anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the '^' and '$' anchors, most likely the literal character was meant and the escape forgotten. Example: '(Price $10)' New in 2018.1",
                  "markdown": "Reports `^` or `\\A` anchors not at the beginning of the pattern and `$`, `\\Z` or `\\z` anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the `^` and `$` anchors, most likely the literal character was meant and the escape forgotten.\n\n**Example:**\n\n\n      (Price $10)\n\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyDirectory",
                "shortDescription": {
                  "text": "Empty directory"
                },
                "fullDescription": {
                  "text": "Reports empty directories. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Use the Only report empty directories located under a source folder option to have only directories under source roots reported.",
                  "markdown": "Reports empty directories.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nUse the **Only report empty directories located under a source folder** option to have only directories under source\nroots reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SyntaxError",
                "shortDescription": {
                  "text": "Syntax error"
                },
                "fullDescription": {
                  "text": "Reports syntax errors that have been found in the result of a batch code inspection run.",
                  "markdown": "Reports syntax errors that have been found in the result of a batch code inspection run."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpAnonymousGroup",
                "shortDescription": {
                  "text": "Anonymous capturing group or numeric back reference"
                },
                "fullDescription": {
                  "text": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. '(?:xxx)' instead of '(xxx)'. Example: '(\\d\\d\\d\\d)\\1' A better regex pattern could look like this: '(?<quad>\\d\\d\\d\\d)\\k<quad>' New in 2017.2",
                  "markdown": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. `(?:xxx)` instead of `(xxx)`.\n\n**Example:**\n\n\n      (\\d\\d\\d\\d)\\1\n\nA better regex pattern could look like this:\n\n\n      (?<quad>\\d\\d\\d\\d)\\k<quad>\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckDtdRefs",
                "shortDescription": {
                  "text": "Unresolved DTD reference"
                },
                "fullDescription": {
                  "text": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files.",
                  "markdown": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpellCheckingInspection",
                "shortDescription": {
                  "text": "Typo"
                },
                "fullDescription": {
                  "text": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click.",
                  "markdown": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "TYPO"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckXmlFileWithXercesValidator",
                "shortDescription": {
                  "text": "Failed external validation"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator.",
                  "markdown": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonAsciiCharacters",
                "shortDescription": {
                  "text": "Non-ASCII characters"
                },
                "fullDescription": {
                  "text": "Reports code elements that use non-ASCII symbols in an unusual context. Example: Non-ASCII characters used in identifiers, strings, or comments. Identifiers written in different languages, such as 'myСollection' with the letter 'C' written in Cyrillic. Comments or strings containing Unicode symbols, such as long dashes and arrows.",
                  "markdown": "Reports code elements that use non-ASCII symbols in an unusual context.\n\nExample:\n\n* Non-ASCII characters used in identifiers, strings, or comments.\n* Identifiers written in different languages, such as `my`**С**`ollection` with the letter **C** written in Cyrillic.\n* Comments or strings containing Unicode symbols, such as long dashes and arrows."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTag",
                "shortDescription": {
                  "text": "Unknown tag"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported.",
                  "markdown": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LossyEncoding",
                "shortDescription": {
                  "text": "Lossy encoding"
                },
                "fullDescription": {
                  "text": "Reports characters that cannot be displayed because of the current document encoding. Examples: If you type international characters in a document with the US-ASCII charset, some characters will be lost on save. If you load a UTF-8-encoded file using the ISO-8859-1 one-byte charset, some characters will be displayed incorrectly. You can fix this by changing the file encoding either by specifying the encoding directly in the file, e.g. by editing 'encoding=' attribute in the XML prolog of XML file, or by changing the corresponding options in Settings | Editor | File Encodings.",
                  "markdown": "Reports characters that cannot be displayed because of the current document encoding.\n\nExamples:\n\n* If you type international characters in a document with the **US-ASCII** charset, some characters will be lost on save.\n* If you load a **UTF-8** -encoded file using the **ISO-8859-1** one-byte charset, some characters will be displayed incorrectly.\n\nYou can fix this by changing the file encoding\neither by specifying the encoding directly in the file, e.g. by editing `encoding=` attribute in the XML prolog of XML file,\nor by changing the corresponding options in **Settings \\| Editor \\| File Encodings**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEscapedMetaCharacter",
                "shortDescription": {
                  "text": "Escaped meta character"
                },
                "fullDescription": {
                  "text": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character '[', ']' and '^', because those would need additional escaping inside a character class. Example: '\\d+\\.\\d+' After the quick-fix is applied: '\\d+[.]\\d+' New in 2017.1",
                  "markdown": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character `[`, `]` and `^`, because those would need additional escaping inside a character class.\n\n**Example:**\n\n\n      \\d+\\.\\d+\n\nAfter the quick-fix is applied:\n\n\n      \\d+[.]\\d+\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateAlternationBranch",
                "shortDescription": {
                  "text": "Duplicate branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression. Example: '(alpha|bravo|charlie|alpha)' After the quick-fix is applied: '(alpha|bravo|charlie)' New in 2017.1",
                  "markdown": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression.\n\n**Example:**\n\n\n      (alpha|bravo|charlie|alpha)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo|charlie)\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRepeatedSpace",
                "shortDescription": {
                  "text": "Consecutive spaces"
                },
                "fullDescription": {
                  "text": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier. Example: '(     )' After the quick-fix is applied: '( {5})' New in 2017.1",
                  "markdown": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IgnoreFileDuplicateEntry",
                "shortDescription": {
                  "text": "Ignore file duplicates"
                },
                "fullDescription": {
                  "text": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed. Example:     # Output directories\n    /out/\n    /target/\n    /out/",
                  "markdown": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed.\n\nExample:\n\n```\n    # Output directories\n    /out/\n    /target/\n    /out/\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Version control",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonStandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON standard"
                },
                "fullDescription": {
                  "text": "Reports the following discrepancies of a JSON file with the language specification: A line or block comment (configurable). Multiple top-level values (expect for JSON Lines files, configurable for others). A trailing comma in an object or array (configurable). A single quoted string. A property key is a not a double quoted strings. A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable).",
                  "markdown": "Reports the following discrepancies of a JSON file with [the language specification](https://tools.ietf.org/html/rfc7159):\n\n* A line or block comment (configurable).\n* Multiple top-level values (expect for JSON Lines files, configurable for others).\n* A trailing comma in an object or array (configurable).\n* A single quoted string.\n* A property key is a not a double quoted strings.\n* A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckEmptyScriptTag",
                "shortDescription": {
                  "text": "Empty tag"
                },
                "fullDescription": {
                  "text": "Reports empty tags that do not work in some browsers. Example: '<html>\n    <script/>\n  </html>' After the quick-fix is applied: '<html>\n    <script></script>\n  </html>'",
                  "markdown": "Reports empty tags that do not work in some browsers.\n\n**Example:**\n\n\n      <html>\n        <script/>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <script></script>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathUnknownOperator",
                "shortDescription": {
                  "text": "Unknown JSONPath operator"
                },
                "fullDescription": {
                  "text": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: 'in', 'nin', 'subsetof', 'anyof', 'noneof', 'size', 'empty', 'contains'.",
                  "markdown": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: `in`, `nin`, `subsetof`, `anyof`, `noneof`, `size`, `empty`, `contains`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.yaml",
            "version": "223.8385",
            "rules": [
              {
                "id": "YAMLRecursiveAlias",
                "shortDescription": {
                  "text": "Recursive alias"
                },
                "fullDescription": {
                  "text": "Reports recursion in YAML aliases. Alias can't be recursive and be used inside the data referenced by a corresponding anchor. Example: 'some_key: &some_anchor\n    sub_key1: value1\n    sub_key2: *some_anchor'",
                  "markdown": "Reports recursion in YAML aliases.\n\nAlias can't be recursive and be used inside the data referenced by a corresponding anchor.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        sub_key1: value1\n        sub_key2: *some_anchor\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLSchemaValidation",
                "shortDescription": {
                  "text": "Validation by JSON Schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified. Scheme example: '{\n    \"properties\": {\n      \"SomeNumberProperty\": {\n        \"type\": \"number\"\n      }\n    }\n  }' The following is an example with the corresponding warning: 'SomeNumberProperty: hello world'",
                  "markdown": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified.\n\n**Scheme example:**\n\n\n      {\n        \"properties\": {\n          \"SomeNumberProperty\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeNumberProperty: hello world\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLDuplicatedKeys",
                "shortDescription": {
                  "text": "Duplicated YAML keys"
                },
                "fullDescription": {
                  "text": "Reports duplicated keys in YAML files. Example: 'same_key: some value\n  same_key: another value'",
                  "markdown": "Reports duplicated keys in YAML files.\n\n**Example:**\n\n\n      same_key: some value\n      same_key: another value\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLUnusedAnchor",
                "shortDescription": {
                  "text": "Unused anchor"
                },
                "fullDescription": {
                  "text": "Reports unused anchors. Example: 'some_key: &some_anchor\n    key1: value1'",
                  "markdown": "Reports unused anchors.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        key1: value1\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLUnresolvedAlias",
                "shortDescription": {
                  "text": "Unresolved alias"
                },
                "fullDescription": {
                  "text": "Reports unresolved aliases in YAML files. Example: 'some_key: *unknown_alias'",
                  "markdown": "Reports unresolved aliases in YAML files.\n\n**Example:**\n\n\n      some_key: *unknown_alias\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated YAML key"
                },
                "fullDescription": {
                  "text": "Reports deprecated keys in YAML files. Deprecation is checked only if there exists a JSON schema associated with the corresponding YAML file. Note that the deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard 'deprecationMessage' extension. Scheme deprecation example: '{\n    \"properties\": {\n      \"SomeDeprecatedProperty\": {\n        \"deprecationMessage\": \"Baz\",\n        \"description\": \"Foo bar\"\n      }\n    }\n  }' The following is an example with the corresponding warning: 'SomeDeprecatedProperty: some value'",
                  "markdown": "Reports deprecated keys in YAML files.\n\nDeprecation is checked only if there exists a JSON schema associated with the corresponding YAML file.\n\nNote that the deprecation mechanism is not defined in the JSON Schema specification yet,\nand this inspection uses a non-standard `deprecationMessage` extension.\n\n**Scheme deprecation example:**\n\n\n      {\n        \"properties\": {\n          \"SomeDeprecatedProperty\": {\n            \"deprecationMessage\": \"Baz\",\n            \"description\": \"Foo bar\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeDeprecatedProperty: some value\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.properties",
            "version": "223.8385",
            "rules": [
              {
                "id": "DuplicatePropertyInspection",
                "shortDescription": {
                  "text": "Duplicate property"
                },
                "fullDescription": {
                  "text": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values. Example: 'property1=value;\nproperty2=value;' The Options list allows selecting the area in which the inspection should search for duplicates.",
                  "markdown": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values.\n\nExample:\n\n\n    property1=value;\n    property2=value;\n\nThe **Options** list allows selecting the area in which the inspection should search for duplicates."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseEllipsisInPropertyInspection",
                "shortDescription": {
                  "text": "Three dot characters instead of the ellipsis"
                },
                "fullDescription": {
                  "text": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files.",
                  "markdown": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AlphaUnsortedPropertiesFile",
                "shortDescription": {
                  "text": "Properties file or resource bundle is alphabetically unsorted"
                },
                "fullDescription": {
                  "text": "Reports alphabetically unsorted resource bundles or .properties files.",
                  "markdown": "Reports alphabetically unsorted resource bundles or .properties files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFO"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrailingSpacesInProperty",
                "shortDescription": {
                  "text": "Trailing spaces in property"
                },
                "fullDescription": {
                  "text": "Reports properties whose keys or values end with a whitespace.",
                  "markdown": "Reports properties whose keys or values end with a whitespace."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedProperty",
                "shortDescription": {
                  "text": "Unused property"
                },
                "fullDescription": {
                  "text": "Reports properties that are not referenced outside of the .properties file they are contained in.",
                  "markdown": "Reports properties that are not referenced outside of the .properties file they are contained in."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WrongPropertyKeyValueDelimiter",
                "shortDescription": {
                  "text": "Property key/value delimiter doesn't match code style settings"
                },
                "fullDescription": {
                  "text": "Reports properties in which key or value delimiters do not match code style settings.",
                  "markdown": "Reports properties in which key or value delimiters do not match code style settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.css",
            "version": "223.8385",
            "rules": [
              {
                "id": "CssUnusedSymbol",
                "shortDescription": {
                  "text": "Unused selector"
                },
                "fullDescription": {
                  "text": "Reports a CSS class or an element IDs that appears in selectors but is not used in HTML. Note that complete inspection results are available only when running it via Code | Inspect Code or Code | Analyze Code | Run Inspection by Name. Due to performance reasons, style sheet files are not inspected on the fly.",
                  "markdown": "Reports a CSS class or an element IDs that appears in selectors but is not used in HTML.\n\n\nNote that complete inspection results are available only when running it via **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name**.\nDue to performance reasons, style sheet files are not inspected on the fly."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNonIntegerLengthInPixels",
                "shortDescription": {
                  "text": "Non-integer length in pixels"
                },
                "fullDescription": {
                  "text": "Reports a non-integer length in pixels. Example: 'width: 3.14px'",
                  "markdown": "Reports a non-integer length in pixels.\n\n**Example:**\n\n     width: 3.14px\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidImport",
                "shortDescription": {
                  "text": "Misplaced @import"
                },
                "fullDescription": {
                  "text": "Reports a misplaced '@import' statement. According to the specification, '@import' rules must precede all other types of rules, except '@charset' rules.",
                  "markdown": "Reports a misplaced `@import` statement.\n\n\nAccording to the [specification](https://developer.mozilla.org/en-US/docs/Web/CSS/@import),\n`@import` rules must precede all other types of rules, except `@charset` rules."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidHtmlTagReference",
                "shortDescription": {
                  "text": "Invalid type selector"
                },
                "fullDescription": {
                  "text": "Reports a CSS type selector that matches an unknown HTML element.",
                  "markdown": "Reports a CSS [type selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors) that matches an unknown HTML element."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidAtRule",
                "shortDescription": {
                  "text": "Unknown at-rule"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS at-rule.",
                  "markdown": "Reports an unknown [CSS at-rule](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidFunction",
                "shortDescription": {
                  "text": "Invalid function"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS function or an incorrect function parameter.",
                  "markdown": "Reports an unknown [CSS function](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions) or an incorrect function parameter."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnresolvedCustomProperty",
                "shortDescription": {
                  "text": "Unresolved custom property"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a custom property among the arguments of the 'var()' function.",
                  "markdown": "Reports an unresolved reference to a [custom property](https://developer.mozilla.org/en-US/docs/Web/CSS/--*) among the arguments of the `var()` function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssOverwrittenProperties",
                "shortDescription": {
                  "text": "Overwritten property"
                },
                "fullDescription": {
                  "text": "Reports a duplicated CSS property within a ruleset. Respects shorthand properties. Example: '.foo {\n  margin-bottom: 1px;\n  margin-bottom: 1px; /* duplicates margin-bottom */\n  margin: 0; /* overrides margin-bottom */\n}'",
                  "markdown": "Reports a duplicated CSS property within a ruleset. Respects shorthand properties.\n\n**Example:**\n\n\n    .foo {\n      margin-bottom: 1px;\n      margin-bottom: 1px; /* duplicates margin-bottom */\n      margin: 0; /* overrides margin-bottom */\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssMissingSemicolon",
                "shortDescription": {
                  "text": "Missing semicolon"
                },
                "fullDescription": {
                  "text": "Reports a missing semicolon at the end of a declaration.",
                  "markdown": "Reports a missing semicolon at the end of a declaration."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code style issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssRedundantUnit",
                "shortDescription": {
                  "text": "Redundant measure unit"
                },
                "fullDescription": {
                  "text": "Reports a measure unit of a zero value where units are not required by the specification. Example: 'width: 0px'",
                  "markdown": "Reports a measure unit of a zero value where units are not required by the specification.\n\n**Example:**\n\n    width: 0px\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code style issues",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnknownTarget",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference, for example, an incorrect path in an '@import' statement.",
                  "markdown": "Reports an unresolved file reference, for example, an incorrect path in an `@import` statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNegativeValue",
                "shortDescription": {
                  "text": "Negative property value"
                },
                "fullDescription": {
                  "text": "Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height.",
                  "markdown": "Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNoGenericFontName",
                "shortDescription": {
                  "text": "Missing generic font family name"
                },
                "fullDescription": {
                  "text": "Verifies that the 'font-family' property contains a generic font family name as a fallback alternative. Generic font family names are: 'serif', 'sans-serif', 'cursive', 'fantasy', and 'monospace'.",
                  "markdown": "Verifies that the [font-family](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) property contains a generic font family name as a fallback alternative.\n\n\nGeneric font family names are: `serif`, `sans-serif`, `cursive`, `fantasy`,\nand `monospace`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnresolvedClassInComposesRule",
                "shortDescription": {
                  "text": "Unresolved class in 'composes' rule"
                },
                "fullDescription": {
                  "text": "Reports a CSS class reference in the 'composes' rule that cannot be resolved to any valid target. Example: '.className {/* ... */}\n\n  .otherClassName {\n    composes: className;\n  }'",
                  "markdown": "Reports a CSS class reference in the ['composes'](https://github.com/css-modules/css-modules#composition) rule that cannot be resolved to any valid target.\n\n**Example:**\n\n\n      .className {/* ... */}\n\n      .otherClassName {\n        composes: className;\n      }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidCharsetRule",
                "shortDescription": {
                  "text": "Misplaced or incorrect @charset"
                },
                "fullDescription": {
                  "text": "Reports a misplaced '@charset' at-rule or an incorrect charset value.",
                  "markdown": "Reports a misplaced `@charset` at-rule or an incorrect charset value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssMissingComma",
                "shortDescription": {
                  "text": "Missing comma in selector list"
                },
                "fullDescription": {
                  "text": "Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended but a comma is missing at the end of one or several lines. Example: 'input /* comma has probably been forgotten */\n.button {\n  margin: 1px;\n}'",
                  "markdown": "Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended but a comma is missing at the end of one or several lines.\n\n**Example:**\n\n\n    input /* comma has probably been forgotten */\n    .button {\n      margin: 1px;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidPropertyValue",
                "shortDescription": {
                  "text": "Invalid property value"
                },
                "fullDescription": {
                  "text": "Reports an incorrect CSS property value.",
                  "markdown": "Reports an incorrect CSS property value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssReplaceWithShorthandSafely",
                "shortDescription": {
                  "text": "Properties may be safely replaced with a shorthand"
                },
                "fullDescription": {
                  "text": "Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form. For example, 4 properties: 'padding-top', 'padding-right', 'padding-bottom', and 'padding-left' can be safely replaced with a single 'padding' property. Note that this inspection doesn't show up if the set of longhand properties is incomplete (e.g. only 3 'padding-xxx' properties in a ruleset) because switching to a shorthand may change the result. For such cases consider the 'Properties may probably be replaced with a shorthand' inspection.",
                  "markdown": "Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form.\n\n\nFor example, 4 properties: `padding-top`, `padding-right`, `padding-bottom`, and\n`padding-left`\ncan be safely replaced with a single `padding` property.\n\n\nNote that this inspection doesn't show up if the set of longhand properties is incomplete\n(e.g. only 3 `padding-xxx` properties in a ruleset)\nbecause switching to a shorthand may change the result.\nFor such cases consider the 'Properties may probably be replaced with a shorthand'\ninspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssBrowserCompatibilityForProperties",
                "shortDescription": {
                  "text": "Property is incompatible with selected browsers"
                },
                "fullDescription": {
                  "text": "Reports a CSS property that is not supported by the specified browsers. Based on the MDN Compatibility Data.",
                  "markdown": "Reports a CSS property that is not supported by the specified browsers. Based on the [MDN Compatibility Data](https://github.com/mdn/browser-compat-data)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnknownProperty",
                "shortDescription": {
                  "text": "Unknown property"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS property or a property used in a wrong context. Add the unknown property to the 'Custom CSS properties' list to skip validation.",
                  "markdown": "Reports an unknown CSS property or a property used in a wrong context.\n\nAdd the unknown property to the 'Custom CSS properties' list to skip validation."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssConvertColorToHexInspection",
                "shortDescription": {
                  "text": "Color could be replaced with #-hex"
                },
                "fullDescription": {
                  "text": "Reports an 'rgb()', 'hsl()', or other color function. Suggests replacing a color function with an equivalent hexadecimal notation. Example: 'rgb(12, 15, 255)' After the quick-fix is applied: '#0c0fff'.",
                  "markdown": "Reports an `rgb()`, `hsl()`, or other color function.\n\nSuggests replacing a color function with an equivalent hexadecimal notation.\n\n**Example:**\n\n    rgb(12, 15, 255)\n\nAfter the quick-fix is applied:\n\n    #0c0fff.\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidPseudoSelector",
                "shortDescription": {
                  "text": "Invalid pseudo-selector"
                },
                "fullDescription": {
                  "text": "Reports an incorrect CSS pseudo-class pseudo-element.",
                  "markdown": "Reports an incorrect CSS [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes) [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssReplaceWithShorthandUnsafely",
                "shortDescription": {
                  "text": "Properties may probably be replaced with a shorthand"
                },
                "fullDescription": {
                  "text": "Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form, which is however not 100% equivalent in this case. For example, 2 properties: 'outline-color' and 'outline-style' may be replaced with a single 'outline'. Such replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states. In this example, switching to the 'outline' shorthand means that 'outline-width' is also set to its initial value, which is 'medium'. This inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe). For such cases see the 'Properties may be safely replaced with a shorthand' inspection instead.",
                  "markdown": "Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form, which is however not 100% equivalent in this case.\n\n\nFor example, 2 properties: `outline-color` and `outline-style` may be replaced with a single `outline`.\nSuch replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states.\nIn this example, switching to the `outline` shorthand means that `outline-width` is also set to its initial value,\nwhich is `medium`.\n\n\nThis inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe).\nFor such cases see the 'Properties may be safely replaced with a shorthand' inspection instead."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidMediaFeature",
                "shortDescription": {
                  "text": "Invalid media feature"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS media feature or an incorrect media feature value.",
                  "markdown": "Reports an unknown [CSS media feature](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries) or an incorrect media feature value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssConvertColorToRgbInspection",
                "shortDescription": {
                  "text": "Color could be replaced with rgb()"
                },
                "fullDescription": {
                  "text": "Reports an 'hsl()' or 'hwb()' color function or a hexadecimal color notation. Suggests replacing such color value with an equivalent 'rgb()' or 'rgba()' color function. Example: '#0c0fff' After the quick-fix is applied: 'rgb(12, 15, 255)'.",
                  "markdown": "Reports an `hsl()` or `hwb()` color function or a hexadecimal color notation.\n\nSuggests replacing such color value with an equivalent `rgb()` or `rgba()` color function.\n\n**Example:**\n\n    #0c0fff\n\nAfter the quick-fix is applied:\n\n    rgb(12, 15, 255).\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "HtmlTools",
            "version": "223.8385",
            "rules": [
              {
                "id": "HtmlRequiredAltAttribute",
                "shortDescription": {
                  "text": "Missing required 'alt' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'alt' attribute in a 'img' or 'applet' tag or in a 'area' element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: H24, H35, H36, H37.",
                  "markdown": "Reports a missing `alt` attribute in a `img` or `applet` tag or in a `area` element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: [H24](https://www.w3.org/TR/WCAG20-TECHS/H24.html), [H35](https://www.w3.org/TR/WCAG20-TECHS/H35.html), [H36](https://www.w3.org/TR/WCAG20-TECHS/H36.html), [H37](https://www.w3.org/TR/WCAG20-TECHS/H37.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlDeprecatedTag",
                "shortDescription": {
                  "text": "Obsolete tag"
                },
                "fullDescription": {
                  "text": "Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag.",
                  "markdown": "Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckImageSize",
                "shortDescription": {
                  "text": "Mismatched image size"
                },
                "fullDescription": {
                  "text": "Reports a 'width' and 'height' attribute value of a 'img' tag that is different from the actual width and height of the referenced image.",
                  "markdown": "Reports a `width` and `height` attribute value of a `img` tag that is different from the actual width and height of the referenced image."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlFormInputWithoutLabel",
                "shortDescription": {
                  "text": "Missing associated label"
                },
                "fullDescription": {
                  "text": "Reports a form element ('input', 'textarea', or 'select') without an associated label. Suggests creating a new label. Based on WCAG 2.0: H44.",
                  "markdown": "Reports a form element (`input`, `textarea`, or `select`) without an associated label. Suggests creating a new label. Based on WCAG 2.0: [H44](https://www.w3.org/TR/WCAG20-TECHS/H44.html).  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredSummaryAttribute",
                "shortDescription": {
                  "text": "Missing required 'summary' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'summary' attribute in a 'table' tag. Suggests adding a'summary' attribute. Based on WCAG 2.0: H73.",
                  "markdown": "Reports a missing `summary` attribute in a `table` tag. Suggests adding a`summary` attribute. Based on WCAG 2.0: [H73](https://www.w3.org/TR/WCAG20-TECHS/H73.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredLangAttribute",
                "shortDescription": {
                  "text": "Missing required 'lang' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'lang' (or 'xml:lang') attribute in a 'html' tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: H57.",
                  "markdown": "Reports a missing `lang` (or `xml:lang`) attribute in a `html` tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: [H57](https://www.w3.org/TR/WCAG20-TECHS/H57.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlNonExistentInternetResource",
                "shortDescription": {
                  "text": "Unresolved web link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved web link. Works by making network requests in the background.",
                  "markdown": "Reports an unresolved web link. Works by making network requests in the background."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredTitleAttribute",
                "shortDescription": {
                  "text": "Missing required 'title' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing title attribute 'frame', 'iframe', 'dl', and 'a' tags. Suggests adding a title attribute. Based on WCAG 2.0: H33, H40, and H64.",
                  "markdown": "Reports a missing title attribute `frame`, `iframe`, `dl`, and `a` tags. Suggests adding a title attribute. Based on WCAG 2.0: [H33](https://www.w3.org/TR/WCAG20-TECHS/H33.html), [H40](https://www.w3.org/TR/WCAG20-TECHS/H40.html), and [H64](https://www.w3.org/TR/WCAG20-TECHS/H64.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredTitleElement",
                "shortDescription": {
                  "text": "Missing required 'title' element"
                },
                "fullDescription": {
                  "text": "Reports a missing 'title' element inside a 'head' section. Suggests adding a 'title' element. The title should describe the document. Based on WCAG 2.0: H25.",
                  "markdown": "Reports a missing `title` element inside a `head` section. Suggests adding a `title` element. The title should describe the document. Based on WCAG 2.0: [H25](https://www.w3.org/TR/WCAG20-TECHS/H25.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlDeprecatedAttribute",
                "shortDescription": {
                  "text": "Obsolete attribute"
                },
                "fullDescription": {
                  "text": "Reports an obsolete HTML5 attribute.",
                  "markdown": "Reports an obsolete HTML5 attribute."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlPresentationalElement",
                "shortDescription": {
                  "text": "Presentational tag"
                },
                "fullDescription": {
                  "text": "Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag.",
                  "markdown": "Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.plugins.dependencyAnalysis",
            "version": "223.8385",
            "rules": [
              {
                "id": "CheckThirdPartySoftwareList",
                "shortDescription": {
                  "text": "Check third party software list"
                },
                "fullDescription": {
                  "text": "Check project for possible problems: user's third party software list does not match the collected project metadata",
                  "markdown": "Check project for possible problems: user's third party software list does not match the collected project metadata"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Dependency analysis",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckDependencyLicenses",
                "shortDescription": {
                  "text": "Check dependency licenses"
                },
                "fullDescription": {
                  "text": "Check dependencies licenses for possible problems: missing or prohibited licenses, or other compliance issues",
                  "markdown": "Check dependencies licenses for possible problems: missing or prohibited licenses, or other compliance issues"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Dependency analysis",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckModuleLicenses",
                "shortDescription": {
                  "text": "Check module licenses"
                },
                "fullDescription": {
                  "text": "Check module licenses for possible problems: missing licenses or other compliance issues",
                  "markdown": "Check module licenses for possible problems: missing licenses or other compliance issues"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Dependency analysis",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncorrectProjectDependenciesConfiguration",
                "shortDescription": {
                  "text": "Check configuration of project dependencies"
                },
                "fullDescription": {
                  "text": "Checking configuration of project dependencies",
                  "markdown": "Checking configuration of project dependencies"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Dependency analysis",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.intelliLang",
            "version": "223.8385",
            "rules": [
              {
                "id": "InjectedReferences",
                "shortDescription": {
                  "text": "Injected references"
                },
                "fullDescription": {
                  "text": "Reports unresolved references injected by Language Injections. Example:     @Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist",
                  "markdown": "Reports unresolved references injected by [Language Injections](https://www.jetbrains.com/help/idea/using-language-injections.html).\n\nExample:\n\n```\n    @Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.plugins.ini4idea",
            "version": "223.8385",
            "rules": [
              {
                "id": "DuplicateKeyInSection",
                "shortDescription": {
                  "text": "Duplicate directive in section"
                },
                "fullDescription": {
                  "text": "Reports duplicate properties in the 'ini' file section.",
                  "markdown": "Reports duplicate properties in the `ini` file section."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Ini files",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicateSectionInFile",
                "shortDescription": {
                  "text": "Duplicate section in file"
                },
                "fullDescription": {
                  "text": "Reports duplicate sections in the 'ini' file.",
                  "markdown": "Reports duplicate sections in the `ini` file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Ini files",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "tanvd.grazi",
            "version": "223.8385",
            "rules": [
              {
                "id": "LanguageDetectionInspection",
                "shortDescription": {
                  "text": "Natural language detection"
                },
                "fullDescription": {
                  "text": "Detects natural languages and suggests enabling corresponding grammar and spelling checks.",
                  "markdown": "Detects natural languages and suggests enabling corresponding grammar and spelling checks."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GrazieInspection",
                "shortDescription": {
                  "text": "Grammar"
                },
                "fullDescription": {
                  "text": "Reports grammar mistakes in your text. You can configure the inspection in Settings | Editor | Natural Languages | Grammar.",
                  "markdown": "Reports grammar mistakes in your text. You can configure the inspection in [Settings \\| Editor \\| Natural Languages \\| Grammar](settings://reference.settingsdialog.project.grazie)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "TYPO"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.qodana",
            "version": "223.8385",
            "rules": [
              {
                "id": "QodanaServiceMessage",
                "shortDescription": {
                  "text": "Qodana service message"
                },
                "fullDescription": {
                  "text": "Reports the Qodana service messages such as suspending a particular inspection due to a large number of reported problems.",
                  "markdown": "Reports the Qodana service messages such as suspending a particular inspection due to a large number of reported problems."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDPY"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          }
        ]
      },
      "invocations": [
        {
          "exitCode": 0,
          "toolExecutionNotifications": [
            {
              "message": {
                "text": "Reporting from [\"Unresolved references\", \"An invalid interpreter\"] 'sanity' inspections was suspended due to high problems count."
              },
              "level": "error"
            }
          ],
          "executionSuccessful": true
        }
      ],
      "language": "en-US",
      "versionControlProvenance": [
        {
          "repositoryUri": "https://github.com/tylovejoy/genjibot",
          "revisionId": "1287999368f942239f77be062e360d0762c98745",
          "branch": "master",
          "properties": {
            "repoUrl": "https://github.com/tylovejoy/genjibot",
            "lastAuthorName": "Ty Lovejoy",
            "vcsType": "Git",
            "lastAuthorEmail": "ty@fromskytocenter.com"
          }
        }
      ],
      "results": [
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'itx' value is not used",
            "markdown": "Parameter 'itx' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/records.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 31,
                  "charOffset": 563,
                  "charLength": 33,
                  "snippet": {
                    "text": "itx: core.Interaction[core.Genji]"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 480,
                  "charLength": 254,
                  "snippet": {
                    "text": "\nclass MapCodeTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        value = value.upper().replace(\"O\", \"0\").lstrip().rstrip()\n        if not re.match(CODE_VERIFICATION, value):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ce2460c2cd05f2fc0cdb530d414d3a8b60889fe10d09aeced162ff0feec282da"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'itx' value is not used",
            "markdown": "Parameter 'itx' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/records.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 31,
                  "charOffset": 2631,
                  "charLength": 33,
                  "snippet": {
                    "text": "itx: core.Interaction[core.Genji]"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2549,
                  "charLength": 197,
                  "snippet": {
                    "text": "\nclass RecordTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> float:\n        try:\n            value = utils.time_convert(value)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "24329e26b71ab5762cbd65cd13a1f77663a3d094899dc406b4887ce5e0afd482"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'type_' value is not used",
            "markdown": "Parameter 'type_' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/command_tree.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 9,
                  "charOffset": 4580,
                  "charLength": 46,
                  "snippet": {
                    "text": "type_: Optional[discord.AppCommandType] = None"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 130,
                  "startColumn": 1,
                  "charOffset": 4525,
                  "charLength": 164,
                  "snippet": {
                    "text": "        *,\n        guild: Optional[Snowflake],\n        type_: Optional[discord.AppCommandType] = None,\n        clear_app_commands_cache: bool = True,\n    ) -> None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b0459ac6819574607303f76ff262825f2ceefc5444c9d3e946be257917c95080"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'ctx' value is not used",
            "markdown": "Parameter 'ctx' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 31,
                  "charOffset": 373,
                  "charLength": 33,
                  "snippet": {
                    "text": "ctx: commands.Context[core.Genji]"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 319,
                  "charLength": 173,
                  "snippet": {
                    "text": "        self.bot = bot\n\n    async def cog_check(self, ctx: commands.Context[core.Genji]) -> bool:\n        return True\n        # return bool(ctx.author.get_role(utils.STAFF))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "905a27b3147dff64ff7ad64c6feb065ae175b70b96109ffd5682c8752af1109e"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/verification.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 62,
                  "charOffset": 758,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 647,
                  "charLength": 230,
                  "snippet": {
                    "text": "        custom_id=\"persistent_view:accept\",\n    )\n    async def green(self, itx: core.Interaction[core.Genji], button: discord.ui.Button):\n        await itx.response.defer(ephemeral=True)\n        await self.verification(itx, True)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "798429a6cd6e8907957f2f249e9bbb064f6a95110862fedd7764e31f3d2d2ab8"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/verification.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 60,
                  "charOffset": 1075,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 966,
                  "charLength": 217,
                  "snippet": {
                    "text": "        custom_id=\"persistent_view:reject\",\n    )\n    async def red(self, itx: core.Interaction[core.Genji], button: discord.ui.Button):\n        modal = RejectReasonModal()\n        await itx.response.send_modal(modal)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "db2e240c46918dd290220c643430b0bdb4697cd946ea4213cb489baa9acdfd5f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/roles.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 64,
                  "charOffset": 615,
                  "charLength": 22,
                  "snippet": {
                    "text": "button: discord.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "charOffset": 517,
                  "charLength": 226,
                  "snippet": {
                    "text": "        custom_id=\"na_role\",\n    )\n    async def na_role(self, itx: core.Interaction[core.Genji], button: discord.Button):\n        await itx.response.defer(ephemeral=True)\n        role = itx.guild.get_role(1034572821139050567)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "46946588a623236677bd3606a35c7faa5618831236416095bdd6d4a277a2e570"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/roles.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 64,
                  "charOffset": 972,
                  "charLength": 22,
                  "snippet": {
                    "text": "button: discord.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 1,
                  "charOffset": 874,
                  "charLength": 226,
                  "snippet": {
                    "text": "        custom_id=\"eu_role\",\n    )\n    async def eu_role(self, itx: core.Interaction[core.Genji], button: discord.Button):\n        await itx.response.defer(ephemeral=True)\n        role = itx.guild.get_role(1054431520170971287)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c2b4351c7953656d9e0b1298c1c579466d21ae7c5558dd595527d5ed6c545491"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/roles.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 50,
                  "charOffset": 1344,
                  "charLength": 22,
                  "snippet": {
                    "text": "button: discord.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 1264,
                  "charLength": 158,
                  "snippet": {
                    "text": "    )\n    async def asia_role(\n        self, itx: core.Interaction[core.Genji], button: discord.Button\n    ):\n        await itx.response.defer(ephemeral=True)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "cff4e1e19ef482a9e1013a559e9f9e76ad1ef601e126605ffc1214dd771e2bcd"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/roles.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 50,
                  "charOffset": 1724,
                  "charLength": 22,
                  "snippet": {
                    "text": "button: discord.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 1,
                  "charOffset": 1643,
                  "charLength": 159,
                  "snippet": {
                    "text": "    )\n    async def china_role(\n        self, itx: core.Interaction[core.Genji], button: discord.Button\n    ):\n        await itx.response.defer(ephemeral=True)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d140ea3f505aa6dd601c3976835bc5ef4891e22e962c9de9953ecbd371d840c3"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/roles.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 50,
                  "charOffset": 2232,
                  "charLength": 22,
                  "snippet": {
                    "text": "button: discord.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 77,
                  "startColumn": 1,
                  "charOffset": 2149,
                  "charLength": 161,
                  "snippet": {
                    "text": "    )\n    async def console_role(\n        self, itx: core.Interaction[core.Genji], button: discord.Button\n    ):\n        await itx.response.defer(ephemeral=True)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "1bac955c31697ab45982d9d1c4cd9f0015a3af18d7d1b9cd3fae5da37c0f51c4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/roles.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 64,
                  "charOffset": 2613,
                  "charLength": 22,
                  "snippet": {
                    "text": "button: discord.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 2515,
                  "charLength": 226,
                  "snippet": {
                    "text": "        custom_id=\"pc_role\",\n    )\n    async def pc_role(self, itx: core.Interaction[core.Genji], button: discord.Button):\n        await itx.response.defer(ephemeral=True)\n        role = itx.guild.get_role(1060611282883063919)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a24470edbdbc9e4b7e6bc6fe445959ef40d9192013c14c81ea585cf0b843da3c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnusedLocalInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Parameter 'button' value is not used",
            "markdown": "Parameter 'button' value is not used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/paginator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 9,
                  "charOffset": 3856,
                  "charLength": 25,
                  "snippet": {
                    "text": "button: discord.ui.Button"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 118,
                  "startColumn": 1,
                  "charOffset": 3791,
                  "charLength": 147,
                  "snippet": {
                    "text": "        self,\n        itx: core.Interaction[core.Genji],\n        button: discord.ui.Button,\n    ):\n        modal = PageNumberModal(len(self.pages))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "9b7467c87a20144f26a4f7c156833dcfb9bd55723399e0fef1f92265b1680406"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyUnboundLocalVariableInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'medals' might be referenced before assignment",
            "markdown": "Local variable 'medals' might be referenced before assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/verification.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 66,
                  "charOffset": 6753,
                  "charLength": 6,
                  "snippet": {
                    "text": "medals"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 183,
                  "startColumn": 1,
                  "charOffset": 6667,
                  "charLength": 112,
                  "snippet": {
                    "text": "\n            if res:\n                itx.client.dispatch(\"newsfeed_record\", itx, res, medals)\n\n    @staticmethod"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d19e8c441c5d1af016937824755731aa618ecae3adc5516639a60ec72f0c9e34"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/utils.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 7,
                  "charOffset": 6703,
                  "charLength": 10,
                  "snippet": {
                    "text": "FakeAvatar"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 205,
                  "startColumn": 1,
                  "charOffset": 6695,
                  "charLength": 84,
                  "snippet": {
                    "text": "\n\nclass FakeAvatar:\n    url: str = \"https://cdn.discordapp.com/embed/avatars/2.png\"\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b1efdd0cbfac1a6b8dd7260a397a3f3fa68e56589e260b546335976c40f33371"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyClassHasNoInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Class has no __init__ method",
            "markdown": "Class has no __init__ method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/constants.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 7,
                  "charOffset": 1902,
                  "charLength": 5,
                  "snippet": {
                    "text": "Roles"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "charOffset": 1872,
                  "charLength": 106,
                  "snippet": {
                    "text": "\n# TODO: Hardcoded LIVE\nclass Roles:\n    NINJA = 989188787106119690\n    # NINJA_PLUS = 1034572581061263400"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c2206ff184be2318c69c66a5902db5e644772816d0fb31d1ec9c1341a0be8129"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyAttributeOutsideInitInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Instance attribute description defined outside __init__",
            "markdown": "Instance attribute description defined outside __init__"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/embeds.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 13,
                  "charOffset": 953,
                  "charLength": 16,
                  "snippet": {
                    "text": "self.description"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 1,
                  "charOffset": 848,
                  "charLength": 241,
                  "snippet": {
                    "text": "    def add_description_field(self, name: str, value: str):\n        if not self.description:\n            self.description = \"\"\n        self.description += (\n            f\"```ansi\\n\\u001b[1;37m{name}\\n```{value}\\n\"  # \\u001b[{format};{color}m"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3719e93f7bce0317893005684d62144b44c641835262b5b6a0fe3c3a42c3b231"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cogs/test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 30,
                  "charOffset": 435,
                  "charLength": 13,
                  "snippet": {
                    "text": "\"~\", \"*\", \"^\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 326,
                  "charLength": 165,
                  "snippet": {
                    "text": "        ctx: commands.Context,\n        guilds: commands.Greedy[discord.Object],\n        spec: typing.Literal[\"~\", \"*\", \"^\"] | None = None,\n    ) -> None:\n        \"\"\""
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c92ecb7020ea46204e7854c1ed6d8f2e819ed0cfef7ad855efda55bf82b7e125"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyTypeHintsInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types",
            "markdown": "'Literal' may be parameterized with literal ints, byte and unicode strings, bools, Enum values, None, other literal types, or type aliases to other literal types"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cogs/test.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 31,
                  "charOffset": 3168,
                  "charLength": 32,
                  "snippet": {
                    "text": "\"debug\", \"info\", \"DEBUG\", \"INFO\""
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 3081,
                  "charLength": 175,
                  "snippet": {
                    "text": "        self,\n        ctx: commands.Context[core.Genji],\n        level: typing.Literal[\"debug\", \"info\", \"DEBUG\", \"INFO\"],\n    ):\n        ctx.bot.logger.setLevel(level.upper())"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "620a91cf2229f8da78c2d77196aeeb07a05ad8855ce4abff54a13190eea7061a"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'transform' may be 'static'",
            "markdown": "Method `transform` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/maps.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 15,
                  "charOffset": 208,
                  "charLength": 9,
                  "snippet": {
                    "text": "transform"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 1,
                  "charOffset": 141,
                  "charLength": 244,
                  "snippet": {
                    "text": "\nclass MapNameTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        if value not in itx.client.map_names:\n            value = utils.fuzz_(value, itx.client.map_names)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e3787f63bd635295df785a81787d6b6473fe379ad34cfa65fb3866aefd055c06"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'transform' may be 'static'",
            "markdown": "Method `transform` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/maps.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 15,
                  "charOffset": 475,
                  "charLength": 9,
                  "snippet": {
                    "text": "transform"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 408,
                  "charLength": 244,
                  "snippet": {
                    "text": "\nclass MapTypeTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        if value not in itx.client.map_types:\n            value = utils.fuzz_(value, itx.client.map_types)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "02c53fa1f790ec21b8e2a27b0e445a74f6c3ac097f3d938a73fcae2179d7a1e6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'transform' may be 'static'",
            "markdown": "Method `transform` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/maps.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 15,
                  "charOffset": 747,
                  "charLength": 9,
                  "snippet": {
                    "text": "transform"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "charOffset": 675,
                  "charLength": 257,
                  "snippet": {
                    "text": "\nclass MapMechanicsTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        if value not in itx.client.map_mechanics:\n            value = utils.fuzz_(value, itx.client.map_mechanics)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "4aa04314bbd9d350fbf25c23ceab36ca30d71a17d08e46838e4d19f87e84e6e2"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'transform' may be 'static'",
            "markdown": "Method `transform` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/maps.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 15,
                  "charOffset": 1030,
                  "charLength": 9,
                  "snippet": {
                    "text": "transform"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 955,
                  "charLength": 266,
                  "snippet": {
                    "text": "\nclass MapRestrictionsTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        if value not in itx.client.map_restrictions:\n            value = utils.fuzz_(value, itx.client.map_restrictions)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ac6f76a400116f4b92803d5c03efcacea4267bd784fce2390094435b5d7f79df"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'transform' may be 'static'",
            "markdown": "Method `transform` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/records.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 15,
                  "charOffset": 547,
                  "charLength": 9,
                  "snippet": {
                    "text": "transform"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 480,
                  "charLength": 254,
                  "snippet": {
                    "text": "\nclass MapCodeTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        value = value.upper().replace(\"O\", \"0\").lstrip().rstrip()\n        if not re.match(CODE_VERIFICATION, value):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2719636af00edf7d8a3ec3b53772f5ca1187fa7c125a96f3e145034ccafc1ac4"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'transform' may be 'static'",
            "markdown": "Method `transform` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/records.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 15,
                  "charOffset": 879,
                  "charLength": 9,
                  "snippet": {
                    "text": "transform"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 1,
                  "charOffset": 806,
                  "charLength": 260,
                  "snippet": {
                    "text": "\nclass MapCodeSubmitTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        value = value.upper().replace(\"O\", \"0\").lstrip().rstrip()\n        if not re.match(CODE_VERIFICATION, value):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e878e3e21ccc4bba5387347c1450efa3147d5c07493bb95af15783c2346ea18f"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'transform' may be 'static'",
            "markdown": "Method `transform` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/records.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 15,
                  "charOffset": 1300,
                  "charLength": 9,
                  "snippet": {
                    "text": "transform"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 1,
                  "charOffset": 1226,
                  "charLength": 211,
                  "snippet": {
                    "text": "\nclass MapCodeRecordsTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        value = value.upper().replace(\"O\", \"0\").lstrip().rstrip()\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "58c812e467738a50bd3da387121033f6a9ac7022f4697edc5eaed3e45f480875"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'transform' may be 'static'",
            "markdown": "Method `transform` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/records.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 15,
                  "charOffset": 1729,
                  "charLength": 9,
                  "snippet": {
                    "text": "transform"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 1,
                  "charOffset": 1665,
                  "charLength": 239,
                  "snippet": {
                    "text": "\nclass UserTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> int:\n        if value not in map(str, itx.client.all_users.keys()):\n            raise utils.UserNotFoundError"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "2c4efd3ccd1a1ac97a6f24b01ea129b6ca41878252fd75362e602ed1ba0025c6"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'transform' may be 'static'",
            "markdown": "Method `transform` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/records.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 15,
                  "charOffset": 1999,
                  "charLength": 9,
                  "snippet": {
                    "text": "transform"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 1,
                  "charOffset": 1932,
                  "charLength": 241,
                  "snippet": {
                    "text": "\nclass CreatorTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> int:\n        if value not in map(str, itx.client.creators.keys()):\n            raise utils.UserNotFoundError"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8a9cc4c0cfaabde35d977a1fc7e9420b1acc8a70b44cbfbbb59f5e4c1b8e942b"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'transform' may be 'static'",
            "markdown": "Method `transform` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/records.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 15,
                  "charOffset": 2267,
                  "charLength": 9,
                  "snippet": {
                    "text": "transform"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "charOffset": 2201,
                  "charLength": 178,
                  "snippet": {
                    "text": "\nclass AllUserTranformer(app_commands.Transformer):\n    async def transform(\n        self, itx: core.Interaction[core.Genji], value: str\n    ) -> utils.FakeUser | discord.Member:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "310ec5593b5ebeca7b579e7b19a07a26b748d29743bfe8f5e087a5d77e0c981a"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'transform' may be 'static'",
            "markdown": "Method `transform` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/records.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 15,
                  "charOffset": 2615,
                  "charLength": 9,
                  "snippet": {
                    "text": "transform"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2549,
                  "charLength": 197,
                  "snippet": {
                    "text": "\nclass RecordTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> float:\n        try:\n            value = utils.time_convert(value)"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "d91c5b89c0b1c99906b9012cba2fe684af83a8f63cc835a39ee27c4544c2a086"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'transform' may be 'static'",
            "markdown": "Method `transform` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "utils/records.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 15,
                  "charOffset": 2910,
                  "charLength": 9,
                  "snippet": {
                    "text": "transform"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 2847,
                  "charLength": 244,
                  "snippet": {
                    "text": "\nclass URLTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        value = value.strip()\n        if not value.startswith(\"https://\") and not value.startswith(\"http://\"):"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "8ba739c3ad8d8d0ae2aecf1854e61a840e4eeb74b16834b486ea6e5fe84f3821"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'cog_check' may be 'static'",
            "markdown": "Method `cog_check` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cogs/mod.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 15,
                  "charOffset": 357,
                  "charLength": 9,
                  "snippet": {
                    "text": "cog_check"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 319,
                  "charLength": 173,
                  "snippet": {
                    "text": "        self.bot = bot\n\n    async def cog_check(self, ctx: commands.Context[core.Genji]) -> bool:\n        return True\n        # return bool(ctx.author.get_role(utils.STAFF))"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "78f77e64c353582ff3ca0eb513d081c14327111c651b92aa85bb0b1f9d8e2d9c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'on_submit' may be 'static'",
            "markdown": "Method `on_submit` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/verification.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 15,
                  "charOffset": 316,
                  "charLength": 9,
                  "snippet": {
                    "text": "on_submit"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "charOffset": 221,
                  "charLength": 230,
                  "snippet": {
                    "text": "    reason = discord.ui.TextInput(label=\"Reason\", style=discord.TextStyle.long)\n\n    async def on_submit(self, itx: core.Interaction[core.Genji]):\n        await itx.response.send_message(\"Sending reason to user.\", ephemeral=True)\n"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "a0449587a2634f19f1fd221ba1948a03f11fd161c754f485431678bba4a2a99c"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        },
        {
          "ruleId": "PyMethodMayBeStaticInspection",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Method 'on_error' may be 'static'",
            "markdown": "Method `on_error` may be 'static'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "views/paginator.py",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 15,
                  "charOffset": 5723,
                  "charLength": 8,
                  "snippet": {
                    "text": "on_error"
                  },
                  "sourceLanguage": "Python"
                },
                "contextRegion": {
                  "startLine": 175,
                  "startColumn": 1,
                  "charOffset": 5659,
                  "charLength": 154,
                  "snippet": {
                    "text": "            await itx.delete_original_response()\n\n    async def on_error(\n        self, itx: core.Interaction[core.Genji], error: Exception\n    ) -> None:"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "b9c6e19df89a0be132559fb4f1f5310f813d69fd9e5fe0432c9aa6d538bc1c21"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "Python"
            ]
          }
        }
      ],
      "automationDetails": {
        "id": "project/qodana/2023-01-18",
        "guid": "05831942-b6e7-40d9-90f8-4d1a0fafea36",
        "properties": {
          "jobUrl": "https://github.com/tylovejoy/genjibot/actions/runs/3950961216"
        }
      },
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "properties": {
        "qodana.sanity.results": [
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/genji.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 4526,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport logging\nimport typing\n\nimport discord\nfrom discord import app_commands\nfrom discord.ext import commands\n\nimport cogs\nimport core\nfrom utils import MapCacheData, UserCacheData\n\nif typing.TYPE_CHECKING:\n    import aiohttp\n\n    import database\n\n\nclass Genji(commands.Bot):\n    \"\"\"Genji bot class inherited from commands.Bot.\"\"\"\n\n    def __init__(\n        self,\n        *,\n        session: aiohttp.ClientSession,\n        db: database.Database,\n    ) -> None:\n        super().__init__(\n            \"?\",\n            intents=self._generate_intents(),\n            help_command=None,\n            tree_cls=core.GenjiCommandTree,\n        )\n        self.session = session\n        self.database = db\n        self.logger = self._setup_logging()\n        self.database.logger = self.logger\n        # Caches\n        self.map_names: list[str] | None = None\n        self.map_types: list[str] | None = None\n        self.map_mechanics: list[str] | None = None\n        self.map_restrictions: list[str] | None = None\n        self.map_cache: dict[str, MapCacheData] | None = {}\n        self.all_users: dict[int, UserCacheData] | None = {}\n        self.creators: dict[int, UserCacheData] | None = {}\n        self.fake_users: dict[int, UserCacheData] | None = {}\n\n        self.map_mechanics_options: list[discord.SelectOption] = []\n        self.map_restrictions_options: list[discord.SelectOption] = []\n        self.map_types_options: list[discord.SelectOption] = []\n\n        self.map_restrictions_convert: dict[int, str] = {}\n        self.map_mechanics_convert: dict[int, str] = {}\n\n        self.map_types_choices: list[app_commands.Choice] = []\n        self.map_mechanics_choices: list[app_commands.Choice] = []\n        self.map_names_choices: list[app_commands.Choice] = []\n        self.map_codes_choices: list[app_commands.Choice] = []\n        self.users_choices: list[app_commands.Choice] = []\n        self.creators_choices: list[app_commands.Choice] = []\n        self.fake_users_choices: list[app_commands.Choice] = []\n\n        self.tag_cache: list[str] = []\n        self.tag_choices: list[app_commands.Choice] = []\n\n        self.persistent_views_added = False\n\n    async def setup_hook(self) -> None:\n        \"\"\"\n        The setup_hook function is called when the bot is starting up.\n        It's responsible for loading all the cogs that are in\n        the initial_extensions list. This function is also used\n        to start a connection with the database,\n        and register any tasks that need to be run on a loop.\n\n        Args:\n            self: bot instance\n\n        Returns:\n            None\n        \"\"\"\n\n        for ext in cogs.EXTENSIONS + [\"jishaku\", \"core.events\"]:\n            self.logger.info(f\"Loading {ext}...\")\n            await self.load_extension(ext)\n\n    @staticmethod\n    def _setup_logging() -> logging.Logger:\n        \"\"\"\n        The _setup_logging function sets up the logging module for use with Discord.\n        It sets the log level to INFO and creates a StreamHandler that prints to stdout.\n        The formatter is set to display the name of the logger,\n        its level, and its message.\n\n        Returns:\n            The logger object\n        \"\"\"\n        logger = logging.getLogger(\"discord\")\n        logger.setLevel(logging.INFO)\n\n        console_handler = logging.StreamHandler()\n        console_handler.setFormatter(\n            logging.Formatter(\n                \"{asctime} | {levelname: <8} | \"\n                \"{module}:{funcName}:{lineno} - {message}\",\n                style=\"{\",\n            )\n        )\n        logger.addHandler(console_handler)\n        return logger\n\n    @staticmethod\n    def _generate_intents() -> discord.Intents:\n        \"\"\"\n        The _generate_intents function generates the intents for the bot.\n        This is used to generate a discord.Intents object that can be passed into\n        the Bot constructor as an argument.\n\n        Args:\n\n        Returns:\n            Intents\n        \"\"\"\n        intents = discord.Intents(\n            guild_messages=True,\n            guilds=True,\n            integrations=True,\n            dm_messages=True,\n            webhooks=True,\n            members=True,\n            message_content=True,\n            guild_reactions=True,\n            # invites=True,\n            # emojis=True,\n            # bans=True,\n            # presences=True,\n            # dm_typing=True,\n            # voice_states=True,\n            # dm_reactions=True,\n            # guild_typing=True,\n        )\n        return intents\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 4526,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport logging\nimport typing\n\nimport discord\nfrom discord import app_commands\nfrom discord.ext import commands\n\nimport cogs\nimport core\nfrom utils import MapCacheData, UserCacheData\n\nif typing.TYPE_CHECKING:\n    import aiohttp\n\n    import database\n\n\nclass Genji(commands.Bot):\n    \"\"\"Genji bot class inherited from commands.Bot.\"\"\"\n\n    def __init__(\n        self,\n        *,\n        session: aiohttp.ClientSession,\n        db: database.Database,\n    ) -> None:\n        super().__init__(\n            \"?\",\n            intents=self._generate_intents(),\n            help_command=None,\n            tree_cls=core.GenjiCommandTree,\n        )\n        self.session = session\n        self.database = db\n        self.logger = self._setup_logging()\n        self.database.logger = self.logger\n        # Caches\n        self.map_names: list[str] | None = None\n        self.map_types: list[str] | None = None\n        self.map_mechanics: list[str] | None = None\n        self.map_restrictions: list[str] | None = None\n        self.map_cache: dict[str, MapCacheData] | None = {}\n        self.all_users: dict[int, UserCacheData] | None = {}\n        self.creators: dict[int, UserCacheData] | None = {}\n        self.fake_users: dict[int, UserCacheData] | None = {}\n\n        self.map_mechanics_options: list[discord.SelectOption] = []\n        self.map_restrictions_options: list[discord.SelectOption] = []\n        self.map_types_options: list[discord.SelectOption] = []\n\n        self.map_restrictions_convert: dict[int, str] = {}\n        self.map_mechanics_convert: dict[int, str] = {}\n\n        self.map_types_choices: list[app_commands.Choice] = []\n        self.map_mechanics_choices: list[app_commands.Choice] = []\n        self.map_names_choices: list[app_commands.Choice] = []\n        self.map_codes_choices: list[app_commands.Choice] = []\n        self.users_choices: list[app_commands.Choice] = []\n        self.creators_choices: list[app_commands.Choice] = []\n        self.fake_users_choices: list[app_commands.Choice] = []\n\n        self.tag_cache: list[str] = []\n        self.tag_choices: list[app_commands.Choice] = []\n\n        self.persistent_views_added = False\n\n    async def setup_hook(self) -> None:\n        \"\"\"\n        The setup_hook function is called when the bot is starting up.\n        It's responsible for loading all the cogs that are in\n        the initial_extensions list. This function is also used\n        to start a connection with the database,\n        and register any tasks that need to be run on a loop.\n\n        Args:\n            self: bot instance\n\n        Returns:\n            None\n        \"\"\"\n\n        for ext in cogs.EXTENSIONS + [\"jishaku\", \"core.events\"]:\n            self.logger.info(f\"Loading {ext}...\")\n            await self.load_extension(ext)\n\n    @staticmethod\n    def _setup_logging() -> logging.Logger:\n        \"\"\"\n        The _setup_logging function sets up the logging module for use with Discord.\n        It sets the log level to INFO and creates a StreamHandler that prints to stdout.\n        The formatter is set to display the name of the logger,\n        its level, and its message.\n\n        Returns:\n            The logger object\n        \"\"\"\n        logger = logging.getLogger(\"discord\")\n        logger.setLevel(logging.INFO)\n\n        console_handler = logging.StreamHandler()\n        console_handler.setFormatter(\n            logging.Formatter(\n                \"{asctime} | {levelname: <8} | \"\n                \"{module}:{funcName}:{lineno} - {message}\",\n                style=\"{\",\n            )\n        )\n        logger.addHandler(console_handler)\n        return logger\n\n    @staticmethod\n    def _generate_intents() -> discord.Intents:\n        \"\"\"\n        The _generate_intents function generates the intents for the bot.\n        This is used to generate a discord.Intents object that can be passed into\n        the Bot constructor as an argument.\n\n        Args:\n\n        Returns:\n            Intents\n        \"\"\"\n        intents = discord.Intents(\n            guild_messages=True,\n            guilds=True,\n            integrations=True,\n            dm_messages=True,\n            webhooks=True,\n            members=True,\n            message_content=True,\n            guild_reactions=True,\n            # invites=True,\n            # emojis=True,\n            # bans=True,\n            # presences=True,\n            # dm_typing=True,\n            # voice_states=True,\n            # dm_reactions=True,\n            # guild_typing=True,\n        )\n        return intents\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "2828ab5cfd15dcd4655360202c820a8f98ccce89b7a5fb18ea2beeb09da6703e"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/errors.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 6937,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport datetime\nimport io\nimport re\nimport traceback\nimport typing\n\nimport discord\nfrom discord import app_commands\n\nimport utils\n\nif typing.TYPE_CHECKING:\n    from core import Genji, Interaction\n\n\nclass BaseParkourException(Exception):\n    def __init__(self):\n        super().__init__(self.__doc__)\n\n\nclass DatabaseConnectionError(Exception):\n    \"\"\"Connection failed. This will be logged. Try again later.\"\"\"\n\n\nclass IncorrectRecordFormatError(\n    BaseParkourException, app_commands.errors.AppCommandError\n):\n    \"\"\"Record must be in HH:MM:SS.ss format.\"\"\"\n\n\nclass IncorrectCodeFormatError(\n    BaseParkourException, app_commands.errors.AppCommandError\n):\n    \"\"\"Map code must be a valid Overwatch share code.\"\"\"\n\n\nclass IncorrectURLFormatError(\n    BaseParkourException, app_commands.errors.AppCommandError\n):\n    \"\"\"The given URL is invalid.\"\"\"\n\n\nclass InvalidFiltersError(BaseParkourException):\n    \"\"\"\n    You must choose _at least_ **one** filter\n    (map name, map type, or creator, mechanics, official, difficulty)\n    \"\"\"\n\n\nclass InvalidMapNameError(BaseParkourException, app_commands.errors.AppCommandError):\n    \"\"\"Invalid map name given. Please make sure to use the autocompleted map names.\"\"\"\n\n\nclass InvalidMapCodeError(BaseParkourException, app_commands.errors.AppCommandError):\n    \"\"\"Invalid map code given. Please make sure to use the autocompleted map codes.\"\"\"\n\n\nclass InvalidMapLevelError(BaseParkourException, app_commands.errors.AppCommandError):\n    \"\"\"Invalid map level given. Please make sure to use the autocompleted map levels.\"\"\"\n\n\nclass InvalidMapTypeError(BaseParkourException, app_commands.errors.AppCommandError):\n    \"\"\"Invalid map name given. Please make sure to use the autocompleted map types.\"\"\"\n\n\nclass RecordNotFasterError(BaseParkourException):\n    \"\"\"Record must be faster than your previous submission.\"\"\"\n\n\nclass NoMapsFoundError(BaseParkourException):\n    \"\"\"No maps have been found with the given filters.\"\"\"\n\n\nclass NoRecordsFoundError(BaseParkourException):\n    \"\"\"No records have been found.\"\"\"\n\n\nclass NoPermissionsError(BaseParkourException):\n    \"\"\"You do not have permission to do this action.\"\"\"\n\n\nclass CreatorAlreadyExists(BaseParkourException):\n    \"\"\"Creator already associated with this map.\"\"\"\n\n\nclass CreatorDoesntExist(BaseParkourException):\n    \"\"\"Creator is not associated with this map.\"\"\"\n\n\nclass MapExistsError(BaseParkourException, app_commands.errors.AppCommandError):\n    \"\"\"This map code already exists!\"\"\"\n\n\nclass NoGuidesExistError(BaseParkourException):\n    \"\"\"No guides exist for this map code.\"\"\"\n\n\nclass GuideExistsError(BaseParkourException):\n    \"\"\"This guide has already been submitted.\"\"\"\n\n\nclass OutOfRangeError(BaseParkourException):\n    \"\"\"Choice is out of range.\"\"\"\n\n\nclass InvalidInteger(BaseParkourException):\n    \"\"\"Choice must be a valid integer.\"\"\"\n\n\nclass UserNotFoundError(BaseParkourException):\n    \"\"\"User does not exist.\"\"\"\n\n\nclass RankTooLowError(BaseParkourException):\n    \"\"\"Your rank is too low to do this action.\"\"\"\n\n\nclass InvalidFakeUser(BaseParkourException):\n    \"\"\"This fake user does not exist.\"\"\"\n\n\nclass InvalidMedals(BaseParkourException):\n    \"\"\"\n    Medals are incorrectly formatted.\n    Make sure gold is faster than silver and silver is faster than bronze\n    \"\"\"\n\n\nclass ArchivedMap(BaseParkourException):\n    \"\"\"Map has been archived. Records cannot be submitted.\"\"\"\n\n\nclass CannotVerifyOwnRecords(BaseParkourException):\n    \"\"\"You cannot verify your own records/submissions.\"\"\"\n\n\nasync def on_app_command_error(\n    itx: Interaction[Genji], error: app_commands.errors.CommandInvokeError | Exception\n):\n    exception = getattr(error, \"original\", error)\n    if isinstance(exception, utils.BaseParkourException):\n        embed = utils.ErrorEmbed(description=str(exception))\n        content = (\n            \"This message will delete in \"\n            f\"{discord.utils.format_dt(discord.utils.utcnow() + datetime.timedelta(minutes=1), 'R')}\"\n        )\n        if itx.response.is_done():\n            await itx.edit_original_response(\n                content=content,\n                embed=embed,\n            )\n        else:\n            await itx.response.send_message(\n                content=content,\n                embed=embed,\n                ephemeral=True,\n            )\n        await utils.delete_interaction(itx, minutes=1)\n\n    elif isinstance(exception, app_commands.CommandOnCooldown):\n        now = discord.utils.utcnow()\n        seconds = float(re.search(r\"(\\d+\\.\\d{2})s\", str(exception)).group(1))\n        end = now + datetime.timedelta(seconds=seconds)\n        embed = utils.ErrorEmbed(\n            description=(\n                f\"Command is on cooldown. \"\n                f\"Cooldown ends {discord.utils.format_dt(end, style='R')}.\\n\"\n                f\"This message will be deleted at the same time.\"\n            )\n        )\n        if itx.response.is_done():\n            await itx.edit_original_response(\n                embed=embed,\n            )\n        else:\n            await itx.response.send_message(\n                embed=embed,\n                ephemeral=True,\n            )\n        await utils.delete_interaction(itx, minutes=seconds / 60)\n    else:\n        edit = (\n            itx.edit_original_response\n            if itx.response.is_done()\n            else itx.response.send_message\n        )\n        embed = utils.ErrorEmbed(\n            description=(\n                \"Unknown.\\n\"\n                \"It has been logged and sent to <@141372217677053952>.\\n\"\n                \"Please try again later.\"\n            ),\n            unknown=True,\n        )\n        await edit(\n            embed=embed,\n        )\n\n        channel = itx.client.get_channel(991795696707584062)\n\n        command_name = f\"**Command:** `{itx.command.name}`\\n\"\n        channel_name = f\"**Channel:** `{itx.channel}`\\n\"\n        user_name = f\"**User:** `{itx.user}`\"\n        args = [f\"┣ **{k}:** `{v}`\\n\" for k, v in itx.namespace.__dict__.items()]\n        if args:\n            args[-1] = \"┗\" + args[-1][1:]\n        args_name = \"**Args:**\\n\" + \"\".join(args)\n        formatted_tb = \"\".join(\n            traceback.format_exception(None, exception, exception.__traceback__)\n        )\n        if len(formatted_tb) < 1850:\n            await channel.send(\n                f\"{command_name}{args_name}{channel_name}{user_name}\\n```py\\n\"\n                + formatted_tb\n                + \"\\n```\"\n            )\n        else:\n            await channel.send(\n                f\"{command_name} {args_name} {channel_name} {user_name}\",\n                file=discord.File(\n                    fp=io.BytesIO(\n                        bytearray(\n                            str(exception) + formatted_tb,\n                            \"utf-8\",\n                        )\n                    ),\n                    filename=\"error.log\",\n                ),\n            )\n    await utils.delete_interaction(itx, minutes=15)\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 6937,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport datetime\nimport io\nimport re\nimport traceback\nimport typing\n\nimport discord\nfrom discord import app_commands\n\nimport utils\n\nif typing.TYPE_CHECKING:\n    from core import Genji, Interaction\n\n\nclass BaseParkourException(Exception):\n    def __init__(self):\n        super().__init__(self.__doc__)\n\n\nclass DatabaseConnectionError(Exception):\n    \"\"\"Connection failed. This will be logged. Try again later.\"\"\"\n\n\nclass IncorrectRecordFormatError(\n    BaseParkourException, app_commands.errors.AppCommandError\n):\n    \"\"\"Record must be in HH:MM:SS.ss format.\"\"\"\n\n\nclass IncorrectCodeFormatError(\n    BaseParkourException, app_commands.errors.AppCommandError\n):\n    \"\"\"Map code must be a valid Overwatch share code.\"\"\"\n\n\nclass IncorrectURLFormatError(\n    BaseParkourException, app_commands.errors.AppCommandError\n):\n    \"\"\"The given URL is invalid.\"\"\"\n\n\nclass InvalidFiltersError(BaseParkourException):\n    \"\"\"\n    You must choose _at least_ **one** filter\n    (map name, map type, or creator, mechanics, official, difficulty)\n    \"\"\"\n\n\nclass InvalidMapNameError(BaseParkourException, app_commands.errors.AppCommandError):\n    \"\"\"Invalid map name given. Please make sure to use the autocompleted map names.\"\"\"\n\n\nclass InvalidMapCodeError(BaseParkourException, app_commands.errors.AppCommandError):\n    \"\"\"Invalid map code given. Please make sure to use the autocompleted map codes.\"\"\"\n\n\nclass InvalidMapLevelError(BaseParkourException, app_commands.errors.AppCommandError):\n    \"\"\"Invalid map level given. Please make sure to use the autocompleted map levels.\"\"\"\n\n\nclass InvalidMapTypeError(BaseParkourException, app_commands.errors.AppCommandError):\n    \"\"\"Invalid map name given. Please make sure to use the autocompleted map types.\"\"\"\n\n\nclass RecordNotFasterError(BaseParkourException):\n    \"\"\"Record must be faster than your previous submission.\"\"\"\n\n\nclass NoMapsFoundError(BaseParkourException):\n    \"\"\"No maps have been found with the given filters.\"\"\"\n\n\nclass NoRecordsFoundError(BaseParkourException):\n    \"\"\"No records have been found.\"\"\"\n\n\nclass NoPermissionsError(BaseParkourException):\n    \"\"\"You do not have permission to do this action.\"\"\"\n\n\nclass CreatorAlreadyExists(BaseParkourException):\n    \"\"\"Creator already associated with this map.\"\"\"\n\n\nclass CreatorDoesntExist(BaseParkourException):\n    \"\"\"Creator is not associated with this map.\"\"\"\n\n\nclass MapExistsError(BaseParkourException, app_commands.errors.AppCommandError):\n    \"\"\"This map code already exists!\"\"\"\n\n\nclass NoGuidesExistError(BaseParkourException):\n    \"\"\"No guides exist for this map code.\"\"\"\n\n\nclass GuideExistsError(BaseParkourException):\n    \"\"\"This guide has already been submitted.\"\"\"\n\n\nclass OutOfRangeError(BaseParkourException):\n    \"\"\"Choice is out of range.\"\"\"\n\n\nclass InvalidInteger(BaseParkourException):\n    \"\"\"Choice must be a valid integer.\"\"\"\n\n\nclass UserNotFoundError(BaseParkourException):\n    \"\"\"User does not exist.\"\"\"\n\n\nclass RankTooLowError(BaseParkourException):\n    \"\"\"Your rank is too low to do this action.\"\"\"\n\n\nclass InvalidFakeUser(BaseParkourException):\n    \"\"\"This fake user does not exist.\"\"\"\n\n\nclass InvalidMedals(BaseParkourException):\n    \"\"\"\n    Medals are incorrectly formatted.\n    Make sure gold is faster than silver and silver is faster than bronze\n    \"\"\"\n\n\nclass ArchivedMap(BaseParkourException):\n    \"\"\"Map has been archived. Records cannot be submitted.\"\"\"\n\n\nclass CannotVerifyOwnRecords(BaseParkourException):\n    \"\"\"You cannot verify your own records/submissions.\"\"\"\n\n\nasync def on_app_command_error(\n    itx: Interaction[Genji], error: app_commands.errors.CommandInvokeError | Exception\n):\n    exception = getattr(error, \"original\", error)\n    if isinstance(exception, utils.BaseParkourException):\n        embed = utils.ErrorEmbed(description=str(exception))\n        content = (\n            \"This message will delete in \"\n            f\"{discord.utils.format_dt(discord.utils.utcnow() + datetime.timedelta(minutes=1), 'R')}\"\n        )\n        if itx.response.is_done():\n            await itx.edit_original_response(\n                content=content,\n                embed=embed,\n            )\n        else:\n            await itx.response.send_message(\n                content=content,\n                embed=embed,\n                ephemeral=True,\n            )\n        await utils.delete_interaction(itx, minutes=1)\n\n    elif isinstance(exception, app_commands.CommandOnCooldown):\n        now = discord.utils.utcnow()\n        seconds = float(re.search(r\"(\\d+\\.\\d{2})s\", str(exception)).group(1))\n        end = now + datetime.timedelta(seconds=seconds)\n        embed = utils.ErrorEmbed(\n            description=(\n                f\"Command is on cooldown. \"\n                f\"Cooldown ends {discord.utils.format_dt(end, style='R')}.\\n\"\n                f\"This message will be deleted at the same time.\"\n            )\n        )\n        if itx.response.is_done():\n            await itx.edit_original_response(\n                embed=embed,\n            )\n        else:\n            await itx.response.send_message(\n                embed=embed,\n                ephemeral=True,\n            )\n        await utils.delete_interaction(itx, minutes=seconds / 60)\n    else:\n        edit = (\n            itx.edit_original_response\n            if itx.response.is_done()\n            else itx.response.send_message\n        )\n        embed = utils.ErrorEmbed(\n            description=(\n                \"Unknown.\\n\"\n                \"It has been logged and sent to <@141372217677053952>.\\n\"\n                \"Please try again later.\"\n            ),\n            unknown=True,\n        )\n        await edit(\n            embed=embed,\n        )\n\n        channel = itx.client.get_channel(991795696707584062)\n\n        command_name = f\"**Command:** `{itx.command.name}`\\n\"\n        channel_name = f\"**Channel:** `{itx.channel}`\\n\"\n        user_name = f\"**User:** `{itx.user}`\"\n        args = [f\"┣ **{k}:** `{v}`\\n\" for k, v in itx.namespace.__dict__.items()]\n        if args:\n            args[-1] = \"┗\" + args[-1][1:]\n        args_name = \"**Args:**\\n\" + \"\".join(args)\n        formatted_tb = \"\".join(\n            traceback.format_exception(None, exception, exception.__traceback__)\n        )\n        if len(formatted_tb) < 1850:\n            await channel.send(\n                f\"{command_name}{args_name}{channel_name}{user_name}\\n```py\\n\"\n                + formatted_tb\n                + \"\\n```\"\n            )\n        else:\n            await channel.send(\n                f\"{command_name} {args_name} {channel_name} {user_name}\",\n                file=discord.File(\n                    fp=io.BytesIO(\n                        bytearray(\n                            str(exception) + formatted_tb,\n                            \"utf-8\",\n                        )\n                    ),\n                    filename=\"error.log\",\n                ),\n            )\n    await utils.delete_interaction(itx, minutes=15)\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "56277eca64b90bd7e4a43928fd13d48b42f1c2afb8fefef15ce540f45771615c"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/maps.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 1243,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport typing\n\nfrom discord import app_commands\n\nimport utils\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nclass MapNameTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        if value not in itx.client.map_names:\n            value = utils.fuzz_(value, itx.client.map_names)\n        return value\n\n\nclass MapTypeTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        if value not in itx.client.map_types:\n            value = utils.fuzz_(value, itx.client.map_types)\n        return value\n\n\nclass MapMechanicsTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        if value not in itx.client.map_mechanics:\n            value = utils.fuzz_(value, itx.client.map_mechanics)\n        return value\n\n\nclass MapRestrictionsTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        if value not in itx.client.map_restrictions:\n            value = utils.fuzz_(value, itx.client.map_restrictions)\n        return value\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 1243,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport typing\n\nfrom discord import app_commands\n\nimport utils\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nclass MapNameTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        if value not in itx.client.map_names:\n            value = utils.fuzz_(value, itx.client.map_names)\n        return value\n\n\nclass MapTypeTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        if value not in itx.client.map_types:\n            value = utils.fuzz_(value, itx.client.map_types)\n        return value\n\n\nclass MapMechanicsTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        if value not in itx.client.map_mechanics:\n            value = utils.fuzz_(value, itx.client.map_mechanics)\n        return value\n\n\nclass MapRestrictionsTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        if value not in itx.client.map_restrictions:\n            value = utils.fuzz_(value, itx.client.map_restrictions)\n        return value\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "c3d5dd1fac332516233c301bd6ceae645d7e1750441a26d01f9d781d252bb3fd"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/records.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 9154,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport datetime\nimport decimal\nimport re\nimport typing\n\nimport discord\nfrom discord import Embed, app_commands\n\nimport database\nimport utils\nfrom utils import GenjiEmbed\n\nif typing.TYPE_CHECKING:\n    import core\n\n\n# URL_REGEX = re.compile(\n#     r\"^https?:\\/\\/(?:www\\.)?\"\n#     r\"[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.\"\n#     r\"[a-zA-Z0-9()]{1,6}\\b\"\n#     r\"(?:[-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)$\"\n# )\n\nCODE_VERIFICATION = re.compile(r\"^[A-Z0-9]{4,6}$\")\n\n\nclass MapCodeTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        value = value.upper().replace(\"O\", \"0\").lstrip().rstrip()\n        if not re.match(CODE_VERIFICATION, value):\n            raise utils.IncorrectCodeFormatError\n        return value\n\n\nclass MapCodeSubmitTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        value = value.upper().replace(\"O\", \"0\").lstrip().rstrip()\n        if not re.match(CODE_VERIFICATION, value):\n            raise utils.IncorrectCodeFormatError\n        if value in itx.client.map_cache.keys():\n            raise utils.MapExistsError\n        return value\n\n\nclass MapCodeRecordsTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        value = value.upper().replace(\"O\", \"0\").lstrip().rstrip()\n\n        if value not in itx.client.map_cache.keys():\n            raise utils.InvalidMapCodeError\n\n        if not re.match(utils.CODE_VERIFICATION, value):\n            raise utils.IncorrectCodeFormatError\n\n        return value\n\n\nclass UserTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> int:\n        if value not in map(str, itx.client.all_users.keys()):\n            raise utils.UserNotFoundError\n        return int(value)\n\n\nclass CreatorTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> int:\n        if value not in map(str, itx.client.creators.keys()):\n            raise utils.UserNotFoundError\n        return int(value)\n\n\nclass AllUserTranformer(app_commands.Transformer):\n    async def transform(\n        self, itx: core.Interaction[core.Genji], value: str\n    ) -> utils.FakeUser | discord.Member:\n        value = int(value)\n        if value < 100000:\n            return utils.FakeUser(value, itx.client.all_users[value])\n\n        return itx.guild.get_member(value)\n\n\nclass RecordTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> float:\n        try:\n            value = utils.time_convert(value)\n        except ValueError:\n            raise utils.IncorrectRecordFormatError\n        return value\n\n\nclass URLTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        value = value.strip()\n        if not value.startswith(\"https://\") and not value.startswith(\"http://\"):\n            value = \"https://\" + value\n        async with itx.client.session.get(value) as resp:\n            if resp.status != 200:\n                raise utils.IncorrectURLFormatError\n            return str(resp.url)\n\n\ndef time_convert(string: str) -> float:\n    \"\"\"Convert HH:MM:SS.ss string into seconds (float).\"\"\"\n    negative = -1 if string[0] == \"-\" else 1\n    time = string.split(\":\")\n    match len(time):\n        case 1:\n            res = float(time[0])\n        case 2:\n            res = float((int(time[0]) * 60) + (negative * float(time[1])))\n        case 3:\n            res = float(\n                (int(time[0]) * 3600)\n                + (negative * (int(time[1]) * 60))\n                + (negative * float(time[2]))\n            )\n        case _:\n            raise ValueError(\"Failed to match any cases.\")\n    return res\n\n\ndef pretty_record(record: decimal.Decimal | float) -> str:\n    \"\"\"\n    The pretty_record property takes the record time for a given\n    document and returns a string representation of that time.\n    The function is used to display the record times in an easily\n    readable format on the leaderboard page.\n\n    Returns:\n        A string\n    \"\"\"\n    record = float(record)\n    negative = \"-\" if record < 0 else \"\"\n    dt = datetime.datetime.min + datetime.timedelta(seconds=abs(record))\n    hour_remove = 0\n    seconds_remove = -4\n\n    if dt.hour == 0 and dt.minute == 0:\n        hour_remove = 6\n        if dt.second < 10:\n            hour_remove += 1\n\n    elif dt.hour == 0:\n        hour_remove = 3\n        if dt.minute < 10:\n            hour_remove = 4\n\n    if dt.microsecond == 0:\n        seconds_remove = -4\n\n    return negative + dt.strftime(\"%H:%M:%S.%f\")[hour_remove:seconds_remove]\n\n\ndef icon_generator(\n    record: database.DotRecord, medals: tuple[float, float, float]\n) -> str:\n    if record.video:\n        if record.record < medals[0] != 0:\n            icon = utils.FULLY_VERIFIED_GOLD\n        elif record.record < medals[1] != 0:\n            icon = utils.FULLY_VERIFIED_SILVER\n        elif record.record < medals[2] != 0:\n            icon = utils.FULLY_VERIFIED_BRONZE\n        else:\n            icon = utils.FULLY_VERIFIED\n    else:\n        # if record.record < medals[0] != 0:\n        #     icon = utils.PARTIAL_VERIFIED_GOLD\n        # elif record.record < medals[1] != 0:\n        #     icon = utils.PARTIAL_VERIFIED_SILVER\n        # elif record.record < medals[2] != 0:\n        #     icon = utils.PARTIAL_VERIFIED_BRONZE\n        # else:\n        #     icon = utils.PARTIAL_VERIFIED\n        icon = utils.PARTIAL_VERIFIED\n    return icon\n\n\ndef all_levels_records_embed(\n    records: list[database.DotRecord],\n    title: str,\n) -> list[Embed | GenjiEmbed]:\n    embed_list = []\n    embed = utils.GenjiEmbed(title=title)\n    for i, record in enumerate(records):\n        if record.gold:\n            medals = (record.gold, record.silver, record.bronze)\n            medals = tuple(map(float, medals))\n        else:\n            medals = (0, 0, 0)\n        if not record.video:\n            description = (\n                f\"┣ `Name` {record.nickname}\\n\"\n                f\"┗ `Record` [{record.record}]\"\n                # f\"┗ `Record` [{pretty_record(record.record)}]\"\n                f\"({record.screenshot}) \"\n                f\"{icon_generator(record, medals)}\\n\"\n            )\n        else:\n            description = (\n                f\"┣ `Name` {record.nickname}\\n\"\n                # f\"┣ `Record` [{pretty_record(record.record)}]\"\n                f\"┣ `Record` [{record.record}]\"\n                f\"({record.screenshot}) \"\n                f\"{icon_generator(record, medals)}\\n \"\n                f\"┗ `Video` [Link]({record.video})\\n\"\n            )\n        embed.add_field(\n            name=f\"{utils.PLACEMENTS.get(i + 1, '')} {make_ordinal(i + 1)}\",\n            # if single\n            # else record.level_name,\n            value=description,\n            inline=False,\n        )\n        if (\n            (i != 0 and i % 10 == 0)\n            or (i == 0 and len(records) == 1)\n            or i == len(records) - 1\n        ):\n            embed = utils.set_embed_thumbnail_maps(record.map_name, embed)\n            embed_list.append(embed)\n            embed = utils.GenjiEmbed(title=title)\n    return embed_list\n\n\ndef pr_records_embed(\n    records: list[database.DotRecord],\n    title: str,\n) -> list[Embed | GenjiEmbed]:\n    embed_list = []\n    embed = utils.GenjiEmbed(title=title)\n    for i, record in enumerate(records):\n        cur_code = f\"{record.map_name} by {record.creators} ({record.map_code})\"\n        description = \"\"\n        print(record.map_code)\n        if record.gold:\n            medals = (record.gold, record.silver, record.bronze)\n            medals = tuple(map(float, medals))\n        else:\n            medals = (0, 0, 0)\n        if not record.video:\n            description += (\n                f\"┣ `Record` [{record.record}]\"\n                f\"({record.screenshot}) \"\n                f\"{icon_generator(record, medals)}\\n┃\\n\"\n            )\n        else:\n            description += (\n                f\"┣ `Record` [{record.record}]\"\n                f\"({record.screenshot})\"\n                f\"{icon_generator(record, medals)}\\n \"\n                f\"┣ `Video` [Link]({record.video})\\n┃\\n\"\n            )\n        embed.add_field(\n            name=f\"{cur_code}\",\n            value=\"┗\".join(description[:-3].rsplit(\"┣\", 1)),\n            inline=False,\n        )\n        if (\n            (i != 0 and i % 10 == 0)\n            or (i == 0 and len(records) == 1)\n            or i == len(records) - 1\n        ):\n            embed_list.append(embed)\n            embed = utils.GenjiEmbed(title=title)\n    return embed_list\n\n\ndef make_ordinal(n: int) -> str:\n    \"\"\"\n    Convert an integer into its ordinal representation::\n        make_ordinal(0)   => '0th'\n        make_ordinal(3)   => '3rd'\n        make_ordinal(122) => '122nd'\n        make_ordinal(213) => '213th'\n    \"\"\"\n    n = int(n)\n    suffix = [\"th\", \"st\", \"nd\", \"rd\", \"th\"][min(n % 10, 4)]\n    if 11 <= (n % 100) <= 13:\n        suffix = \"th\"\n    return str(n) + suffix\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 9154,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport datetime\nimport decimal\nimport re\nimport typing\n\nimport discord\nfrom discord import Embed, app_commands\n\nimport database\nimport utils\nfrom utils import GenjiEmbed\n\nif typing.TYPE_CHECKING:\n    import core\n\n\n# URL_REGEX = re.compile(\n#     r\"^https?:\\/\\/(?:www\\.)?\"\n#     r\"[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.\"\n#     r\"[a-zA-Z0-9()]{1,6}\\b\"\n#     r\"(?:[-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)$\"\n# )\n\nCODE_VERIFICATION = re.compile(r\"^[A-Z0-9]{4,6}$\")\n\n\nclass MapCodeTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        value = value.upper().replace(\"O\", \"0\").lstrip().rstrip()\n        if not re.match(CODE_VERIFICATION, value):\n            raise utils.IncorrectCodeFormatError\n        return value\n\n\nclass MapCodeSubmitTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        value = value.upper().replace(\"O\", \"0\").lstrip().rstrip()\n        if not re.match(CODE_VERIFICATION, value):\n            raise utils.IncorrectCodeFormatError\n        if value in itx.client.map_cache.keys():\n            raise utils.MapExistsError\n        return value\n\n\nclass MapCodeRecordsTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        value = value.upper().replace(\"O\", \"0\").lstrip().rstrip()\n\n        if value not in itx.client.map_cache.keys():\n            raise utils.InvalidMapCodeError\n\n        if not re.match(utils.CODE_VERIFICATION, value):\n            raise utils.IncorrectCodeFormatError\n\n        return value\n\n\nclass UserTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> int:\n        if value not in map(str, itx.client.all_users.keys()):\n            raise utils.UserNotFoundError\n        return int(value)\n\n\nclass CreatorTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> int:\n        if value not in map(str, itx.client.creators.keys()):\n            raise utils.UserNotFoundError\n        return int(value)\n\n\nclass AllUserTranformer(app_commands.Transformer):\n    async def transform(\n        self, itx: core.Interaction[core.Genji], value: str\n    ) -> utils.FakeUser | discord.Member:\n        value = int(value)\n        if value < 100000:\n            return utils.FakeUser(value, itx.client.all_users[value])\n\n        return itx.guild.get_member(value)\n\n\nclass RecordTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> float:\n        try:\n            value = utils.time_convert(value)\n        except ValueError:\n            raise utils.IncorrectRecordFormatError\n        return value\n\n\nclass URLTransformer(app_commands.Transformer):\n    async def transform(self, itx: core.Interaction[core.Genji], value: str) -> str:\n        value = value.strip()\n        if not value.startswith(\"https://\") and not value.startswith(\"http://\"):\n            value = \"https://\" + value\n        async with itx.client.session.get(value) as resp:\n            if resp.status != 200:\n                raise utils.IncorrectURLFormatError\n            return str(resp.url)\n\n\ndef time_convert(string: str) -> float:\n    \"\"\"Convert HH:MM:SS.ss string into seconds (float).\"\"\"\n    negative = -1 if string[0] == \"-\" else 1\n    time = string.split(\":\")\n    match len(time):\n        case 1:\n            res = float(time[0])\n        case 2:\n            res = float((int(time[0]) * 60) + (negative * float(time[1])))\n        case 3:\n            res = float(\n                (int(time[0]) * 3600)\n                + (negative * (int(time[1]) * 60))\n                + (negative * float(time[2]))\n            )\n        case _:\n            raise ValueError(\"Failed to match any cases.\")\n    return res\n\n\ndef pretty_record(record: decimal.Decimal | float) -> str:\n    \"\"\"\n    The pretty_record property takes the record time for a given\n    document and returns a string representation of that time.\n    The function is used to display the record times in an easily\n    readable format on the leaderboard page.\n\n    Returns:\n        A string\n    \"\"\"\n    record = float(record)\n    negative = \"-\" if record < 0 else \"\"\n    dt = datetime.datetime.min + datetime.timedelta(seconds=abs(record))\n    hour_remove = 0\n    seconds_remove = -4\n\n    if dt.hour == 0 and dt.minute == 0:\n        hour_remove = 6\n        if dt.second < 10:\n            hour_remove += 1\n\n    elif dt.hour == 0:\n        hour_remove = 3\n        if dt.minute < 10:\n            hour_remove = 4\n\n    if dt.microsecond == 0:\n        seconds_remove = -4\n\n    return negative + dt.strftime(\"%H:%M:%S.%f\")[hour_remove:seconds_remove]\n\n\ndef icon_generator(\n    record: database.DotRecord, medals: tuple[float, float, float]\n) -> str:\n    if record.video:\n        if record.record < medals[0] != 0:\n            icon = utils.FULLY_VERIFIED_GOLD\n        elif record.record < medals[1] != 0:\n            icon = utils.FULLY_VERIFIED_SILVER\n        elif record.record < medals[2] != 0:\n            icon = utils.FULLY_VERIFIED_BRONZE\n        else:\n            icon = utils.FULLY_VERIFIED\n    else:\n        # if record.record < medals[0] != 0:\n        #     icon = utils.PARTIAL_VERIFIED_GOLD\n        # elif record.record < medals[1] != 0:\n        #     icon = utils.PARTIAL_VERIFIED_SILVER\n        # elif record.record < medals[2] != 0:\n        #     icon = utils.PARTIAL_VERIFIED_BRONZE\n        # else:\n        #     icon = utils.PARTIAL_VERIFIED\n        icon = utils.PARTIAL_VERIFIED\n    return icon\n\n\ndef all_levels_records_embed(\n    records: list[database.DotRecord],\n    title: str,\n) -> list[Embed | GenjiEmbed]:\n    embed_list = []\n    embed = utils.GenjiEmbed(title=title)\n    for i, record in enumerate(records):\n        if record.gold:\n            medals = (record.gold, record.silver, record.bronze)\n            medals = tuple(map(float, medals))\n        else:\n            medals = (0, 0, 0)\n        if not record.video:\n            description = (\n                f\"┣ `Name` {record.nickname}\\n\"\n                f\"┗ `Record` [{record.record}]\"\n                # f\"┗ `Record` [{pretty_record(record.record)}]\"\n                f\"({record.screenshot}) \"\n                f\"{icon_generator(record, medals)}\\n\"\n            )\n        else:\n            description = (\n                f\"┣ `Name` {record.nickname}\\n\"\n                # f\"┣ `Record` [{pretty_record(record.record)}]\"\n                f\"┣ `Record` [{record.record}]\"\n                f\"({record.screenshot}) \"\n                f\"{icon_generator(record, medals)}\\n \"\n                f\"┗ `Video` [Link]({record.video})\\n\"\n            )\n        embed.add_field(\n            name=f\"{utils.PLACEMENTS.get(i + 1, '')} {make_ordinal(i + 1)}\",\n            # if single\n            # else record.level_name,\n            value=description,\n            inline=False,\n        )\n        if (\n            (i != 0 and i % 10 == 0)\n            or (i == 0 and len(records) == 1)\n            or i == len(records) - 1\n        ):\n            embed = utils.set_embed_thumbnail_maps(record.map_name, embed)\n            embed_list.append(embed)\n            embed = utils.GenjiEmbed(title=title)\n    return embed_list\n\n\ndef pr_records_embed(\n    records: list[database.DotRecord],\n    title: str,\n) -> list[Embed | GenjiEmbed]:\n    embed_list = []\n    embed = utils.GenjiEmbed(title=title)\n    for i, record in enumerate(records):\n        cur_code = f\"{record.map_name} by {record.creators} ({record.map_code})\"\n        description = \"\"\n        print(record.map_code)\n        if record.gold:\n            medals = (record.gold, record.silver, record.bronze)\n            medals = tuple(map(float, medals))\n        else:\n            medals = (0, 0, 0)\n        if not record.video:\n            description += (\n                f\"┣ `Record` [{record.record}]\"\n                f\"({record.screenshot}) \"\n                f\"{icon_generator(record, medals)}\\n┃\\n\"\n            )\n        else:\n            description += (\n                f\"┣ `Record` [{record.record}]\"\n                f\"({record.screenshot})\"\n                f\"{icon_generator(record, medals)}\\n \"\n                f\"┣ `Video` [Link]({record.video})\\n┃\\n\"\n            )\n        embed.add_field(\n            name=f\"{cur_code}\",\n            value=\"┗\".join(description[:-3].rsplit(\"┣\", 1)),\n            inline=False,\n        )\n        if (\n            (i != 0 and i % 10 == 0)\n            or (i == 0 and len(records) == 1)\n            or i == len(records) - 1\n        ):\n            embed_list.append(embed)\n            embed = utils.GenjiEmbed(title=title)\n    return embed_list\n\n\ndef make_ordinal(n: int) -> str:\n    \"\"\"\n    Convert an integer into its ordinal representation::\n        make_ordinal(0)   => '0th'\n        make_ordinal(3)   => '3rd'\n        make_ordinal(122) => '122nd'\n        make_ordinal(213) => '213th'\n    \"\"\"\n    n = int(n)\n    suffix = [\"th\", \"st\", \"nd\", \"rd\", \"th\"][min(n % 10, 4)]\n    if 11 <= (n % 100) <= 13:\n        suffix = \"th\"\n    return str(n) + suffix\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "224219b94a68d857a12c061fb1ec17046ce22bf1bd0b0de8a643cd2427eb4336"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "views/maps.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 11058,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport functools\nimport io\nimport re\nfrom typing import TYPE_CHECKING\n\nimport discord\nfrom discord import app_commands\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker\n\nfrom matplotlib.ticker import MaxNLocator\n\nimport utils\n\nif TYPE_CHECKING:\n    import core\n\n\nclass MapSubmitSelection(discord.ui.Select):\n    async def callback(self, itx: core.Interaction[core.Genji]):\n        await itx.response.defer(ephemeral=True)\n        for x in self.options:\n            x.default = x.value in self.values\n        await self.view.map_submit_enable()\n\n\nclass MapTypeSelect(MapSubmitSelection):\n    def __init__(self, options: list[discord.SelectOption]) -> None:\n        super().__init__(\n            options=options,\n            placeholder=\"Map type(s)?\",\n            max_values=len(options),\n        )\n\n\nclass DifficultySelect(MapSubmitSelection):\n    def __init__(self, options: list[discord.SelectOption]) -> None:\n        super().__init__(\n            options=options,\n            placeholder=\"What difficulty?\",\n        )\n\n\nclass MechanicsSelect(MapSubmitSelection):\n    def __init__(self, options: list[discord.SelectOption]) -> None:\n        super().__init__(\n            options=options,\n            placeholder=\"Map mechanic(s)?\",\n            max_values=len(options),\n        )\n\n\nclass RestrictionsSelect(MapSubmitSelection):\n    def __init__(self, options: list[discord.SelectOption]) -> None:\n        super().__init__(\n            options=options,\n            placeholder=\"Map restriction(s)?\",\n            max_values=len(options),\n        )\n\n\nclass PlaytestVoting(discord.ui.View):\n\n    options = [\n        discord.SelectOption(label=x, value=str(i))\n        for i, x in enumerate(utils.DIFFICULTIES_EXT)\n    ]\n\n    def __init__(\n        self,\n        map_code: str,\n        base_diff: str,\n        author_id: int,\n        client: core.Genji,\n        original_msg: int,\n    ):\n        super().__init__(timeout=None)\n        self.map_code = map_code\n        self.base_diff = base_diff\n        self.author_id = author_id\n        self.client = client\n        self.author_rank = None\n        self.message_id = original_msg\n\n    async def interaction_check(self, itx: core.Interaction[core.Genji]) -> bool:\n        res = False\n        author = await self.client.database.get_row(\n            \"SELECT * FROM users WHERE user_id = $1\",\n            itx.user.id,\n        )\n        if itx.user.id != self.author_id:\n            res = True\n            if self.base_diff == \"Hell\" and author.rank < 6:  # TODO: Test\n                res = False\n                self.author_rank = author.rank\n        return res\n\n    async def check_status(self, itx: core.Interaction[core.Genji], votes: int):\n        query = \"\"\"\n        SELECT * FROM records r LEFT JOIN users u ON u.user_id = r.user_id \n        WHERE map_code = $1 and rank >= $2 and r.user_id != $3;\n        \"\"\"\n\n        records = [\n            x\n            async for x in await itx.client.database.get(\n                query,\n                self.map_code,\n                5 if self.base_diff != \"Hell\" else 6,\n                self.author_id,\n            )\n        ]\n\n        if (\n            (\n                self.base_diff in utils.DIFFICULTIES[0:4]\n                and votes == 5\n                and len(records) == 5\n            )\n            or (\n                self.base_diff in utils.DIFFICULTIES[4:6]\n                and votes == 3\n                and len(records) == 5\n            )\n            or (\n                self.base_diff in utils.DIFFICULTIES[6:]\n                and votes == 2\n                and len(records) == 5\n            )\n        ):\n            self.stop()\n            record = await itx.client.database.get_row(\n                \"SELECT * FROM playtest WHERE map_code=$1 AND user_id=$2;\",\n                self.map_code,\n                self.author_id,\n            )\n            await itx.client.get_channel(utils.PLAYTEST).get_thread(\n                record.thread_id\n            ).edit(archived=True, locked=True)\n            await itx.client.get_channel(utils.PLAYTEST).get_partial_message(\n                record.original_msg\n            ).delete()\n\n            votes = [\n                x\n                async for x in itx.client.database.get(\n                    \"\"\"SELECT * FROM playtest WHERE map_code=$1\"\"\",\n                    self.map_code,\n                )\n            ]\n            vote_values = [x.value for x in votes]\n            difficulty = utils.convert_num_to_difficulty(\n                sum(vote_values) / len(vote_values)\n            )\n            author = itx.guild.get_member(self.author_id)\n\n            if difficulty in utils.allowed_difficulties(self.author_rank):\n                # Approved map\n                await itx.client.database.set(\n                    \"\"\"UPDATE maps SET official=TRUE WHERE map_code=$1;\"\"\",\n                    self.map_code,\n                )\n\n                votes = [\n                    (self.map_code, x.user_id, utils.DIFFICULTIES_RANGES[x.value][0])\n                    for x in votes\n                    if x.user_id != self.author_id\n                ]\n\n                await itx.client.database.set_many(\n                    \"\"\"\n                    INSERT INTO map_ratings (map_code, user_id, difficulty) \n                        VALUES($1, $2, $3);\n                        -- ON CONFLICT (map_code, user_id) \n                        -- DO UPDATE SET difficulty=$3\n                        -- WHERE map_ratings.user_id = EXCLUDED.user_id \n                        -- AND map_ratings.map_code = EXCLUDED.map_code; \n                    \"\"\",\n                    votes,\n                )\n\n                avg = await itx.client.database.get_row(\n                    \"SELECT AVG(difficulty) avg FROM map_ratings WHERE map_code=$1;\",\n                    self.map_code,\n                ).avg\n                # Post new maps channel\n                # TODO: FIX EMBED\n                new_map_embed = (\n                    await itx.guild.get_thread(votes[0].thread_id).fetch_message(\n                        votes[0].message_id\n                    )\n                ).embeds[0]\n                new_map_embed.title = \"New Map!\"\n                new_map_embed.set_footer(\n                    text=\"For notification of newly added maps only. \"\n                    \"Data may be out of date. \"\n                    \"Use `/map-search` for the latest info.\"\n                )\n                new_map_embed.description = re.sub(\n                    r\"┣ `Difficulty` (.+)\\n┣\",\n                    f\"┣ `Difficulty` {utils.convert_num_to_difficulty(avg)}\\n┣\",\n                    new_map_embed.description,\n                )\n\n                new_map_message = await itx.guild.get_channel(utils.NEW_MAPS).send(\n                    embed=new_map_embed\n                )\n\n                itx.client.dispatch(\n                    \"newsfeed_new_map\", author, new_map_message.jump_url, self.map_code\n                )\n                await utils.update_affected_users(itx, self.map_code)\n\n            else:\n                # Delete map\n                await itx.client.database.set(\n                    \"\"\"DELETE FROM maps WHERE map_code=$1;\"\"\",\n                    self.map_code,\n                )\n                # Send message to author\n                if author:\n                    await author.send(\n                        \"Your map has been voted higher in difficulty \"\n                        \"than your rank allows.\\n\"\n                        \"Either edit the map that aligns with your current role, \"\n                        \"or wait to submit until you have achieved the necessary role.\"\n                    )\n\n            await itx.client.database.set(\n                \"\"\"DELETE FROM playtest WHERE map_code=$1;\"\"\",\n                self.map_code,\n            )\n\n    @staticmethod\n    def setup(ax):\n        ax.spines[\"right\"].set_color(\"none\")\n        ax.spines[\"left\"].set_color(\"none\")\n        ax.yaxis.set_major_locator(ticker.NullLocator())\n        ax.spines[\"top\"].set_color(\"none\")\n        ax.xaxis.set_ticks_position(\"bottom\")\n        ax.set_xlim(0, 18)\n        ax.set_ylim(0, 1)\n        ax.patch.set_alpha(0.0)\n\n    def plot(self, avg: int | float):\n        # Change scale of average to 18 scale instead of 10\n        avg = float(avg) * 18 / 11\n        labels_ = [\n            \"Beginner\",\n            \" \",\n            \"Easy\",\n            \" \",\n            \" \",\n            \"Medium\",\n            \" \",\n            \" \",\n            \"Hard\",\n            \" \",\n            \" \",\n            \"Very Hard\",\n            \" \",\n            \" \",\n            \"Extreme\",\n            \" \",\n            \"Hell\",\n        ]\n        plt.figure(figsize=(8, 8))\n        n = 8\n        ax = plt.subplot(n, 1, 5)\n        self.setup(ax)\n        ax.plot(range(0, 18), [0] * 18, color=\"White\")\n        plt.plot(avg, 0.5, \"ro\", ms=20.75, mfc=\"r\")\n        ax.xaxis.set_major_locator(ticker.IndexLocator(base=1, offset=1))\n        ax.set_xticklabels(labels_, rotation=90, fontsize=18)\n        ax.xaxis.set_tick_params(pad=10)\n        plt.xlabel(\"Average\", fontsize=24)\n        plt.subplots_adjust(top=1.25)\n        plt.margins(y=0)\n        b = io.BytesIO()\n        plt.savefig(b, format=\"png\")\n        plt.close()\n        b.seek(0)\n        return discord.File(b, filename=\"vote_chart.png\")\n\n    @discord.ui.select(\n        options=options,\n        placeholder=\"What difficulty would you rate this map?\",\n        custom_id=\"diff_voting\",\n    )\n    async def difficulties(\n        self, itx: core.Interaction[core.Genji], select: discord.ui.Select\n    ):\n        await itx.response.defer(ephemeral=True)\n        role = itx.guild.get_role(utils.Roles.GRANDMASTER)\n        if role not in itx.user.roles:\n            await itx.followup.send(\n                content=f\"You must be {role.mention} to vote.\",\n                ephemeral=True,\n            )\n            return\n\n        vote_value = int(select.values[0]) * 11 / 17\n\n        await itx.client.database.set(\n            \"\"\"\n            INSERT INTO playtest (thread_id, message_id, map_code, user_id, value)\n            VALUES ($1, $2, $3, $4, $5) \n            ON CONFLICT (user_id, message_id)\n            DO UPDATE SET value = $5\n            WHERE playtest.user_id = EXCLUDED.user_id\n            AND playtest.message_id = EXCLUDED.message_id;\n            \"\"\",\n            itx.channel.id,\n            itx.message.id,\n            self.map_code,\n            itx.user.id,\n            vote_value,\n        )\n\n        avg = (\n            await itx.client.database.get_row(\n                \"\"\"\n                SELECT AVG(value) as value\n                FROM playtest \n                WHERE message_id = $1;\n                \"\"\",\n                itx.message.id,\n            )\n        ).value\n\n        func = functools.partial(self.plot, avg)\n        image = await itx.client.loop.run_in_executor(None, func)\n\n        await itx.message.edit(\n            embed=itx.message.embeds[0].set_image(url=\"attachment://vote_chart.png\"),\n            attachments=[image],\n        )\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 11058,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport functools\nimport io\nimport re\nfrom typing import TYPE_CHECKING\n\nimport discord\nfrom discord import app_commands\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker\n\nfrom matplotlib.ticker import MaxNLocator\n\nimport utils\n\nif TYPE_CHECKING:\n    import core\n\n\nclass MapSubmitSelection(discord.ui.Select):\n    async def callback(self, itx: core.Interaction[core.Genji]):\n        await itx.response.defer(ephemeral=True)\n        for x in self.options:\n            x.default = x.value in self.values\n        await self.view.map_submit_enable()\n\n\nclass MapTypeSelect(MapSubmitSelection):\n    def __init__(self, options: list[discord.SelectOption]) -> None:\n        super().__init__(\n            options=options,\n            placeholder=\"Map type(s)?\",\n            max_values=len(options),\n        )\n\n\nclass DifficultySelect(MapSubmitSelection):\n    def __init__(self, options: list[discord.SelectOption]) -> None:\n        super().__init__(\n            options=options,\n            placeholder=\"What difficulty?\",\n        )\n\n\nclass MechanicsSelect(MapSubmitSelection):\n    def __init__(self, options: list[discord.SelectOption]) -> None:\n        super().__init__(\n            options=options,\n            placeholder=\"Map mechanic(s)?\",\n            max_values=len(options),\n        )\n\n\nclass RestrictionsSelect(MapSubmitSelection):\n    def __init__(self, options: list[discord.SelectOption]) -> None:\n        super().__init__(\n            options=options,\n            placeholder=\"Map restriction(s)?\",\n            max_values=len(options),\n        )\n\n\nclass PlaytestVoting(discord.ui.View):\n\n    options = [\n        discord.SelectOption(label=x, value=str(i))\n        for i, x in enumerate(utils.DIFFICULTIES_EXT)\n    ]\n\n    def __init__(\n        self,\n        map_code: str,\n        base_diff: str,\n        author_id: int,\n        client: core.Genji,\n        original_msg: int,\n    ):\n        super().__init__(timeout=None)\n        self.map_code = map_code\n        self.base_diff = base_diff\n        self.author_id = author_id\n        self.client = client\n        self.author_rank = None\n        self.message_id = original_msg\n\n    async def interaction_check(self, itx: core.Interaction[core.Genji]) -> bool:\n        res = False\n        author = await self.client.database.get_row(\n            \"SELECT * FROM users WHERE user_id = $1\",\n            itx.user.id,\n        )\n        if itx.user.id != self.author_id:\n            res = True\n            if self.base_diff == \"Hell\" and author.rank < 6:  # TODO: Test\n                res = False\n                self.author_rank = author.rank\n        return res\n\n    async def check_status(self, itx: core.Interaction[core.Genji], votes: int):\n        query = \"\"\"\n        SELECT * FROM records r LEFT JOIN users u ON u.user_id = r.user_id \n        WHERE map_code = $1 and rank >= $2 and r.user_id != $3;\n        \"\"\"\n\n        records = [\n            x\n            async for x in await itx.client.database.get(\n                query,\n                self.map_code,\n                5 if self.base_diff != \"Hell\" else 6,\n                self.author_id,\n            )\n        ]\n\n        if (\n            (\n                self.base_diff in utils.DIFFICULTIES[0:4]\n                and votes == 5\n                and len(records) == 5\n            )\n            or (\n                self.base_diff in utils.DIFFICULTIES[4:6]\n                and votes == 3\n                and len(records) == 5\n            )\n            or (\n                self.base_diff in utils.DIFFICULTIES[6:]\n                and votes == 2\n                and len(records) == 5\n            )\n        ):\n            self.stop()\n            record = await itx.client.database.get_row(\n                \"SELECT * FROM playtest WHERE map_code=$1 AND user_id=$2;\",\n                self.map_code,\n                self.author_id,\n            )\n            await itx.client.get_channel(utils.PLAYTEST).get_thread(\n                record.thread_id\n            ).edit(archived=True, locked=True)\n            await itx.client.get_channel(utils.PLAYTEST).get_partial_message(\n                record.original_msg\n            ).delete()\n\n            votes = [\n                x\n                async for x in itx.client.database.get(\n                    \"\"\"SELECT * FROM playtest WHERE map_code=$1\"\"\",\n                    self.map_code,\n                )\n            ]\n            vote_values = [x.value for x in votes]\n            difficulty = utils.convert_num_to_difficulty(\n                sum(vote_values) / len(vote_values)\n            )\n            author = itx.guild.get_member(self.author_id)\n\n            if difficulty in utils.allowed_difficulties(self.author_rank):\n                # Approved map\n                await itx.client.database.set(\n                    \"\"\"UPDATE maps SET official=TRUE WHERE map_code=$1;\"\"\",\n                    self.map_code,\n                )\n\n                votes = [\n                    (self.map_code, x.user_id, utils.DIFFICULTIES_RANGES[x.value][0])\n                    for x in votes\n                    if x.user_id != self.author_id\n                ]\n\n                await itx.client.database.set_many(\n                    \"\"\"\n                    INSERT INTO map_ratings (map_code, user_id, difficulty) \n                        VALUES($1, $2, $3);\n                        -- ON CONFLICT (map_code, user_id) \n                        -- DO UPDATE SET difficulty=$3\n                        -- WHERE map_ratings.user_id = EXCLUDED.user_id \n                        -- AND map_ratings.map_code = EXCLUDED.map_code; \n                    \"\"\",\n                    votes,\n                )\n\n                avg = await itx.client.database.get_row(\n                    \"SELECT AVG(difficulty) avg FROM map_ratings WHERE map_code=$1;\",\n                    self.map_code,\n                ).avg\n                # Post new maps channel\n                # TODO: FIX EMBED\n                new_map_embed = (\n                    await itx.guild.get_thread(votes[0].thread_id).fetch_message(\n                        votes[0].message_id\n                    )\n                ).embeds[0]\n                new_map_embed.title = \"New Map!\"\n                new_map_embed.set_footer(\n                    text=\"For notification of newly added maps only. \"\n                    \"Data may be out of date. \"\n                    \"Use `/map-search` for the latest info.\"\n                )\n                new_map_embed.description = re.sub(\n                    r\"┣ `Difficulty` (.+)\\n┣\",\n                    f\"┣ `Difficulty` {utils.convert_num_to_difficulty(avg)}\\n┣\",\n                    new_map_embed.description,\n                )\n\n                new_map_message = await itx.guild.get_channel(utils.NEW_MAPS).send(\n                    embed=new_map_embed\n                )\n\n                itx.client.dispatch(\n                    \"newsfeed_new_map\", author, new_map_message.jump_url, self.map_code\n                )\n                await utils.update_affected_users(itx, self.map_code)\n\n            else:\n                # Delete map\n                await itx.client.database.set(\n                    \"\"\"DELETE FROM maps WHERE map_code=$1;\"\"\",\n                    self.map_code,\n                )\n                # Send message to author\n                if author:\n                    await author.send(\n                        \"Your map has been voted higher in difficulty \"\n                        \"than your rank allows.\\n\"\n                        \"Either edit the map that aligns with your current role, \"\n                        \"or wait to submit until you have achieved the necessary role.\"\n                    )\n\n            await itx.client.database.set(\n                \"\"\"DELETE FROM playtest WHERE map_code=$1;\"\"\",\n                self.map_code,\n            )\n\n    @staticmethod\n    def setup(ax):\n        ax.spines[\"right\"].set_color(\"none\")\n        ax.spines[\"left\"].set_color(\"none\")\n        ax.yaxis.set_major_locator(ticker.NullLocator())\n        ax.spines[\"top\"].set_color(\"none\")\n        ax.xaxis.set_ticks_position(\"bottom\")\n        ax.set_xlim(0, 18)\n        ax.set_ylim(0, 1)\n        ax.patch.set_alpha(0.0)\n\n    def plot(self, avg: int | float):\n        # Change scale of average to 18 scale instead of 10\n        avg = float(avg) * 18 / 11\n        labels_ = [\n            \"Beginner\",\n            \" \",\n            \"Easy\",\n            \" \",\n            \" \",\n            \"Medium\",\n            \" \",\n            \" \",\n            \"Hard\",\n            \" \",\n            \" \",\n            \"Very Hard\",\n            \" \",\n            \" \",\n            \"Extreme\",\n            \" \",\n            \"Hell\",\n        ]\n        plt.figure(figsize=(8, 8))\n        n = 8\n        ax = plt.subplot(n, 1, 5)\n        self.setup(ax)\n        ax.plot(range(0, 18), [0] * 18, color=\"White\")\n        plt.plot(avg, 0.5, \"ro\", ms=20.75, mfc=\"r\")\n        ax.xaxis.set_major_locator(ticker.IndexLocator(base=1, offset=1))\n        ax.set_xticklabels(labels_, rotation=90, fontsize=18)\n        ax.xaxis.set_tick_params(pad=10)\n        plt.xlabel(\"Average\", fontsize=24)\n        plt.subplots_adjust(top=1.25)\n        plt.margins(y=0)\n        b = io.BytesIO()\n        plt.savefig(b, format=\"png\")\n        plt.close()\n        b.seek(0)\n        return discord.File(b, filename=\"vote_chart.png\")\n\n    @discord.ui.select(\n        options=options,\n        placeholder=\"What difficulty would you rate this map?\",\n        custom_id=\"diff_voting\",\n    )\n    async def difficulties(\n        self, itx: core.Interaction[core.Genji], select: discord.ui.Select\n    ):\n        await itx.response.defer(ephemeral=True)\n        role = itx.guild.get_role(utils.Roles.GRANDMASTER)\n        if role not in itx.user.roles:\n            await itx.followup.send(\n                content=f\"You must be {role.mention} to vote.\",\n                ephemeral=True,\n            )\n            return\n\n        vote_value = int(select.values[0]) * 11 / 17\n\n        await itx.client.database.set(\n            \"\"\"\n            INSERT INTO playtest (thread_id, message_id, map_code, user_id, value)\n            VALUES ($1, $2, $3, $4, $5) \n            ON CONFLICT (user_id, message_id)\n            DO UPDATE SET value = $5\n            WHERE playtest.user_id = EXCLUDED.user_id\n            AND playtest.message_id = EXCLUDED.message_id;\n            \"\"\",\n            itx.channel.id,\n            itx.message.id,\n            self.map_code,\n            itx.user.id,\n            vote_value,\n        )\n\n        avg = (\n            await itx.client.database.get_row(\n                \"\"\"\n                SELECT AVG(value) as value\n                FROM playtest \n                WHERE message_id = $1;\n                \"\"\",\n                itx.message.id,\n            )\n        ).value\n\n        func = functools.partial(self.plot, avg)\n        image = await itx.client.loop.run_in_executor(None, func)\n\n        await itx.message.edit(\n            embed=itx.message.embeds[0].set_image(url=\"attachment://vote_chart.png\"),\n            attachments=[image],\n        )\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "73ccbd18b7dada13a5b1786faf03e12ceb52d5fd9234492cf949d39d7b6acb63"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "views/confirmation.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 5318,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport datetime\nfrom typing import TYPE_CHECKING\n\nimport discord\n\nimport utils\nimport views\n\nif TYPE_CHECKING:\n    import core\n\n\nclass ConfirmButton(discord.ui.Button):\n    def __init__(self, disabled=False):\n        super().__init__(\n            label=\"Yes, the information entered is correct.\",\n            emoji=utils.CONFIRM_EMOJI,\n            style=discord.ButtonStyle.green,\n            disabled=disabled,\n        )\n\n    async def callback(self, itx: core.Interaction[core.Genji]):\n        \"\"\"Confirmation button callback.\"\"\"\n        if self.view.original_itx.user != itx.user:\n            await itx.response.send_message(\n                \"You are not allowed to confirm this submission.\",\n                ephemeral=True,\n            )\n            return\n        self.view.value = True\n        self.view.clear_items()\n        self.view.stop()\n        await self.view.original_itx.edit_original_response(\n            content=self.view.confirm_msg, view=self.view\n        )\n\n\nclass RejectButton(discord.ui.Button):\n    def __init__(self):\n        super().__init__(\n            label=\"No, the information entered is not correct.\",\n            emoji=utils.UNVERIFIED_EMOJI,\n            style=discord.ButtonStyle.red,\n        )\n\n    async def callback(self, itx: core.Interaction[core.Genji]):\n        \"\"\"Rejection button callback.\"\"\"\n        await itx.response.defer(ephemeral=True)\n        if self.view.original_itx.user != itx.user:\n            await itx.response.send_message(\n                \"You are not allowed to reject this submission.\",\n                ephemeral=True,\n            )\n            return\n        self.view.value = False\n        self.view.clear_items()\n        content = (\n            \"Not confirmed. \"\n            \"This message will delete in \"\n            f\"{discord.utils.format_dt(discord.utils.utcnow() + datetime.timedelta(minutes=1), 'R')}\"  # noqa\n        )\n        await self.view.original_itx.edit_original_response(\n            content=content,\n            view=self.view,\n        )\n        await utils.delete_interaction(self.view.original_itx, minutes=1)\n        self.view.stop()\n\n\nclass Confirm(discord.ui.View):\n    difficulty: views.MapTypeSelect | None\n    restrictions: views.RestrictionsSelect | None\n    map_type: views.MapTypeSelect | None\n    mechanics: views.MechanicsSelect | None\n\n    def __init__(\n        self,\n        original_itx: core.Interaction[core.Genji],\n        confirm_msg=\"Confirmed.\",\n        preceeding_items: dict[str, discord.ui.Item] | None = None,\n        ephemeral=False,\n    ):\n        super().__init__()\n\n        self.original_itx = original_itx\n        self.confirm_msg = confirm_msg\n        self.value = None\n        self.ephemeral = ephemeral\n\n        if preceeding_items:\n            for attr, item in preceeding_items.items():\n                setattr(self, attr, item)\n                self.add_item(getattr(self, attr))\n\n        self.confirm = ConfirmButton(disabled=bool(preceeding_items))\n        self.reject = RejectButton()\n        self.add_item(self.confirm)\n        self.add_item(self.reject)\n\n    async def map_submit_enable(self):\n        values = [\n            getattr(getattr(self, x, None), \"values\", True)\n            for x in [\"map_type\", \"difficulty\"]\n        ]\n        if all(values):\n            self.confirm.disabled = False\n            await self.original_itx.edit_original_response(view=self)\n\n\nclass QualitySelect(discord.ui.Select):\n    view: ConfirmCompletion\n\n    def __init__(self):\n        super().__init__(\n            options=[\n                discord.SelectOption(\n                    label=utils.ALL_STARS[x],\n                    value=str(x),\n                )\n                for x in range(1, 7)\n            ]\n        )\n\n    async def callback(self, interaction: core.Interaction[core.Genji]):\n        await interaction.response.defer(ephemeral=True)\n        await self.view.enable_submit()\n\n\nclass ConfirmCompletion(discord.ui.View):\n    def __init__(\n        self,\n        rank: int,\n        original_itx: core.Interaction[core.Genji],\n        confirm_msg=\"Confirmed.\",\n        ephemeral=False,\n    ):\n        super().__init__()\n        self.rank = rank\n        self.original_itx = original_itx\n        self.confirm_msg = confirm_msg\n        self.value = None\n        self.ephemeral = ephemeral\n\n        if self.rank >= 5:\n            self.quality = QualitySelect()\n            self.add_item(self.quality)\n\n        self.confirm = ConfirmButton(disabled=self.rank >= 5)\n        self.reject = RejectButton()\n        self.add_item(self.confirm)\n        self.add_item(self.reject)\n\n    async def enable_submit(self):\n        self.confirm.disabled = False\n        for o in self.quality.options:\n            o.default = o.value in self.quality.values\n        await self.original_itx.edit_original_response(view=self)\n\n\nclass RecordVideoConfirmCompletion(discord.ui.View):\n    def __init__(\n        self,\n        original_itx: core.Interaction[core.Genji],\n        confirm_msg=\"Confirmed.\",\n    ):\n        super().__init__()\n        self.original_itx = original_itx\n        self.confirm_msg = confirm_msg\n        self.value = None\n\n        self.confirm = ConfirmButton()\n        self.reject = RejectButton()\n        self.add_item(self.confirm)\n        self.add_item(self.reject)\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 5318,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport datetime\nfrom typing import TYPE_CHECKING\n\nimport discord\n\nimport utils\nimport views\n\nif TYPE_CHECKING:\n    import core\n\n\nclass ConfirmButton(discord.ui.Button):\n    def __init__(self, disabled=False):\n        super().__init__(\n            label=\"Yes, the information entered is correct.\",\n            emoji=utils.CONFIRM_EMOJI,\n            style=discord.ButtonStyle.green,\n            disabled=disabled,\n        )\n\n    async def callback(self, itx: core.Interaction[core.Genji]):\n        \"\"\"Confirmation button callback.\"\"\"\n        if self.view.original_itx.user != itx.user:\n            await itx.response.send_message(\n                \"You are not allowed to confirm this submission.\",\n                ephemeral=True,\n            )\n            return\n        self.view.value = True\n        self.view.clear_items()\n        self.view.stop()\n        await self.view.original_itx.edit_original_response(\n            content=self.view.confirm_msg, view=self.view\n        )\n\n\nclass RejectButton(discord.ui.Button):\n    def __init__(self):\n        super().__init__(\n            label=\"No, the information entered is not correct.\",\n            emoji=utils.UNVERIFIED_EMOJI,\n            style=discord.ButtonStyle.red,\n        )\n\n    async def callback(self, itx: core.Interaction[core.Genji]):\n        \"\"\"Rejection button callback.\"\"\"\n        await itx.response.defer(ephemeral=True)\n        if self.view.original_itx.user != itx.user:\n            await itx.response.send_message(\n                \"You are not allowed to reject this submission.\",\n                ephemeral=True,\n            )\n            return\n        self.view.value = False\n        self.view.clear_items()\n        content = (\n            \"Not confirmed. \"\n            \"This message will delete in \"\n            f\"{discord.utils.format_dt(discord.utils.utcnow() + datetime.timedelta(minutes=1), 'R')}\"  # noqa\n        )\n        await self.view.original_itx.edit_original_response(\n            content=content,\n            view=self.view,\n        )\n        await utils.delete_interaction(self.view.original_itx, minutes=1)\n        self.view.stop()\n\n\nclass Confirm(discord.ui.View):\n    difficulty: views.MapTypeSelect | None\n    restrictions: views.RestrictionsSelect | None\n    map_type: views.MapTypeSelect | None\n    mechanics: views.MechanicsSelect | None\n\n    def __init__(\n        self,\n        original_itx: core.Interaction[core.Genji],\n        confirm_msg=\"Confirmed.\",\n        preceeding_items: dict[str, discord.ui.Item] | None = None,\n        ephemeral=False,\n    ):\n        super().__init__()\n\n        self.original_itx = original_itx\n        self.confirm_msg = confirm_msg\n        self.value = None\n        self.ephemeral = ephemeral\n\n        if preceeding_items:\n            for attr, item in preceeding_items.items():\n                setattr(self, attr, item)\n                self.add_item(getattr(self, attr))\n\n        self.confirm = ConfirmButton(disabled=bool(preceeding_items))\n        self.reject = RejectButton()\n        self.add_item(self.confirm)\n        self.add_item(self.reject)\n\n    async def map_submit_enable(self):\n        values = [\n            getattr(getattr(self, x, None), \"values\", True)\n            for x in [\"map_type\", \"difficulty\"]\n        ]\n        if all(values):\n            self.confirm.disabled = False\n            await self.original_itx.edit_original_response(view=self)\n\n\nclass QualitySelect(discord.ui.Select):\n    view: ConfirmCompletion\n\n    def __init__(self):\n        super().__init__(\n            options=[\n                discord.SelectOption(\n                    label=utils.ALL_STARS[x],\n                    value=str(x),\n                )\n                for x in range(1, 7)\n            ]\n        )\n\n    async def callback(self, interaction: core.Interaction[core.Genji]):\n        await interaction.response.defer(ephemeral=True)\n        await self.view.enable_submit()\n\n\nclass ConfirmCompletion(discord.ui.View):\n    def __init__(\n        self,\n        rank: int,\n        original_itx: core.Interaction[core.Genji],\n        confirm_msg=\"Confirmed.\",\n        ephemeral=False,\n    ):\n        super().__init__()\n        self.rank = rank\n        self.original_itx = original_itx\n        self.confirm_msg = confirm_msg\n        self.value = None\n        self.ephemeral = ephemeral\n\n        if self.rank >= 5:\n            self.quality = QualitySelect()\n            self.add_item(self.quality)\n\n        self.confirm = ConfirmButton(disabled=self.rank >= 5)\n        self.reject = RejectButton()\n        self.add_item(self.confirm)\n        self.add_item(self.reject)\n\n    async def enable_submit(self):\n        self.confirm.disabled = False\n        for o in self.quality.options:\n            o.default = o.value in self.quality.values\n        await self.original_itx.edit_original_response(view=self)\n\n\nclass RecordVideoConfirmCompletion(discord.ui.View):\n    def __init__(\n        self,\n        original_itx: core.Interaction[core.Genji],\n        confirm_msg=\"Confirmed.\",\n    ):\n        super().__init__()\n        self.original_itx = original_itx\n        self.confirm_msg = confirm_msg\n        self.value = None\n\n        self.confirm = ConfirmButton()\n        self.reject = RejectButton()\n        self.add_item(self.confirm)\n        self.add_item(self.reject)\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "23b7ec5f83ca1c2826db70928507df7d9bfde008f227c38c93947f21bb273f21"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/interaction.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 203,
                    "snippet": {
                      "text": "from typing import Generic, TypeVar\n\nimport discord\nfrom discord.ext import commands\n\nBotT = TypeVar(\"BotT\", bound=commands.Bot)\n\n\nclass Interaction(discord.Interaction, Generic[BotT]):\n    client: BotT\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 203,
                    "snippet": {
                      "text": "from typing import Generic, TypeVar\n\nimport discord\nfrom discord.ext import commands\n\nBotT = TypeVar(\"BotT\", bound=commands.Bot)\n\n\nclass Interaction(discord.Interaction, Generic[BotT]):\n    client: BotT\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "6b6eaeef87c0cc5431693c273ac5b334017b83c05b7bbff8dc18a75a10ddd749"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/utils.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 6779,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport asyncio\nimport operator\nimport re\nimport typing\n\nimport discord\nfrom thefuzz import fuzz\n\nimport utils\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nasync def delete_interaction(\n    itx: core.Interaction[core.Genji], *, minutes: int | float\n):\n    \"\"\"Delete an itx message after x minutes. Fails silently.\n    Args:\n        itx (discord.Interaction): Interaction to find original message.\n        minutes (int): Minutes (use 0 for no delay)\n    \"\"\"\n    if minutes < 0:\n        raise ValueError(\"Time cannot be negative.\")\n    await asyncio.sleep(60 * minutes)\n    try:\n        await itx.delete_original_response()\n    except (discord.HTTPException, discord.NotFound, discord.Forbidden):\n        ...\n\n\ndef fuzz_(string: str, iterable: typing.Iterable[str]) -> str:\n    \"\"\"Fuzz a value.\"\"\"\n    values = [(val, fuzz.partial_ratio(string, val)) for val in iterable]\n    return str(max(values, key=operator.itemgetter(1))[0])\n\n\ndef fuzz_multiple(string: str, iterable: typing.Iterable[str]) -> list[str]:\n    \"\"\"Fuzz a value.\"\"\"\n    values = [(val, fuzz.partial_ratio(string, val)) for val in iterable]\n    values = sorted(values, key=operator.itemgetter(1), reverse=True)[:10]\n    values = list(map(lambda x: x[0], values))\n    return values\n\n\nclass MapCacheData(typing.TypedDict):\n    user_ids: list[int]\n    archived: bool\n\n\nclass UserCacheData(typing.TypedDict):\n    nickname: str\n    alertable: bool\n\n\nNUMBER_EMOJI = {\n    1: \"1️⃣\",\n    2: \"2️⃣\",\n    3: \"3️⃣\",\n    4: \"4️⃣\",\n    5: \"5️⃣\",\n    6: \"6️⃣\",\n    7: \"7️⃣\",\n    8: \"8️⃣\",\n    9: \"9️⃣\",\n    10: \"🔟\",\n}\n\n_RANK_THRESHOLD = (10, 10, 10, 10, 5, 2)\n\n\nasync def update_affected_users(\n    itx: core.Interaction[core.Genji],\n    map_code: str,\n):\n    users = [\n        x.user_id\n        async for x in itx.client.database.get(\n            \"\"\"\n            SELECT DISTINCT user_id FROM records WHERE map_code=$1;\n            \"\"\",\n            map_code,\n        )\n    ]\n    if users:\n        for x in users:\n            if user := itx.guild.get_member(x):\n                await utils.auto_role(itx.client, user)\n\n\nasync def auto_role(client: core.Genji, user: discord.Member):\n    rank, rank_plus = await rank_finder(client, user)\n    rank_roles = list(\n        map(\n            lambda x: client.get_guild(utils.GUILD_ID).get_role(x),\n            utils.Roles.ranks()[1:],\n        )\n    )\n    rank_plus_roles = list(\n        map(\n            lambda x: client.get_guild(utils.GUILD_ID).get_role(x),\n            utils.Roles.ranks_plus()[1:],\n        )\n    )\n\n    added = list(filter(lambda x: x not in user.roles, rank_roles[:rank])) + list(\n        filter(lambda x: x not in user.roles, rank_plus_roles[:rank_plus])\n    )\n    removed = list(filter(lambda x: x in user.roles, rank_roles[rank + 1 :])) + list(\n        filter(lambda x: x in user.roles, rank_plus_roles[rank_plus + 1 :])\n    )\n    new_roles = user.roles\n    for a in added:\n        if a not in new_roles:\n            new_roles.append(a)\n    for r in removed:\n        if r in new_roles:\n            new_roles.remove(r)\n\n    if set(new_roles) != set(user.roles):\n        await user.edit(roles=new_roles)\n\n        await client.database.set(\n            \"\"\"UPDATE users SET rank=$2 WHERE user_id=$1;\"\"\",\n            user.id,\n            rank,\n        )\n\n    response = (\n        \"🚨***ALERT!***🚨\\nYour roles have been updated! If roles have been removed, \"\n        \"it's because a map that you have completed has changed difficulty.\\n\"\n        \"Complete more maps to get your roles back!\\n\"\n    )\n    if added:\n        response += \", \".join([f\"**{x.name}**\" for x in added]) + \" has been added.\\n\"\n        client.dispatch(\"newsfeed_role\", client, user, added)\n\n    if removed:\n        response += (\n            \", \".join([f\"**{x.name}**\" for x in removed]) + \" has been removed.\\n\"\n        )\n\n    if added or removed:\n        await user.send(response)\n\n\nasync def rank_finder(client: core.Genji, user: discord.Member) -> tuple[int, int]:\n    amounts = await get_completions_data(client, user.id)\n    rank = 0\n    rank_plus = 0  # Gold only\n    for i, diff in enumerate(utils.DIFFICULTIES[1:]):  # Ignore Beginner\n        if diff not in amounts or amounts[diff][0] < _RANK_THRESHOLD[i]:\n            break\n        if amounts[diff][0] >= _RANK_THRESHOLD[i]:\n            rank += 1\n            if amounts[diff][1] >= _RANK_THRESHOLD[i] and rank_plus + 1 == rank:\n                rank_plus += 1\n    return rank, rank_plus\n\n\nasync def get_completions_data(\n    client: core.Genji, user: int\n) -> dict[str, tuple[int, int, int, int]]:\n    query = \"\"\"\n        WITH ranges (\"range\", \"name\") AS (VALUES ('[0.59,2.35)'::numrange, 'Easy'),\n                                         ('[2.35,4.12)'::numrange, 'Medium'),\n                                         ('[4.12,5.88)'::numrange, 'Hard'),\n                                         ('[5.88,7.65)'::numrange, 'Very Hard'),\n                                         ('[7.65,9.41)'::numrange, 'Extreme'),\n                                         ('[9.41,10.0]'::numrange, 'Hell')),\n             map_data AS (SELECT AVG(mr.difficulty)                   AS difficulty,\n                                 record <= gold                       AS gold,\n                                 record <= silver AND record > gold   AS silver,\n                                 record <= bronze AND record > silver AS bronze\n                          FROM records r\n                                   LEFT JOIN maps m         ON r.map_code = m.map_code\n                                   LEFT JOIN map_ratings mr ON m.map_code = mr.map_code\n                                   LEFT JOIN map_medals mm  ON r.map_code = mm.map_code\n                          WHERE r.user_id = $1 AND m.official = TRUE AND m.archived = FALSE\n                          GROUP BY m.map_code, record, gold, silver, bronze)\n        SELECT COUNT(name)                        AS completions,\n               name                               AS difficulty,\n               count(CASE WHEN gold THEN 1 END)   AS gold,\n               count(CASE WHEN silver THEN 1 END) AS silver,\n               count(CASE WHEN bronze THEN 1 END) AS bronze\n        FROM ranges r\n                 INNER JOIN map_data md ON r.range @> md.difficulty\n        GROUP BY name;\n    \"\"\"\n    amounts = {\n        x.difficulty: tuple(map(int, (x.completions, x.gold, x.silver, x.bronze)))\n        async for x in client.database.get(query, user)\n    }\n    return amounts\n\n\nclass FakeUser:\n    def __init__(self, id_: int, data: UserCacheData):\n        self.id = id_\n        self.nickname = data[\"nickname\"]\n        self.mention = data[\"nickname\"]\n        self.display_avatar = FakeAvatar()\n\n\nclass FakeAvatar:\n    url: str = \"https://cdn.discordapp.com/embed/avatars/2.png\"\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 6779,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport asyncio\nimport operator\nimport re\nimport typing\n\nimport discord\nfrom thefuzz import fuzz\n\nimport utils\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nasync def delete_interaction(\n    itx: core.Interaction[core.Genji], *, minutes: int | float\n):\n    \"\"\"Delete an itx message after x minutes. Fails silently.\n    Args:\n        itx (discord.Interaction): Interaction to find original message.\n        minutes (int): Minutes (use 0 for no delay)\n    \"\"\"\n    if minutes < 0:\n        raise ValueError(\"Time cannot be negative.\")\n    await asyncio.sleep(60 * minutes)\n    try:\n        await itx.delete_original_response()\n    except (discord.HTTPException, discord.NotFound, discord.Forbidden):\n        ...\n\n\ndef fuzz_(string: str, iterable: typing.Iterable[str]) -> str:\n    \"\"\"Fuzz a value.\"\"\"\n    values = [(val, fuzz.partial_ratio(string, val)) for val in iterable]\n    return str(max(values, key=operator.itemgetter(1))[0])\n\n\ndef fuzz_multiple(string: str, iterable: typing.Iterable[str]) -> list[str]:\n    \"\"\"Fuzz a value.\"\"\"\n    values = [(val, fuzz.partial_ratio(string, val)) for val in iterable]\n    values = sorted(values, key=operator.itemgetter(1), reverse=True)[:10]\n    values = list(map(lambda x: x[0], values))\n    return values\n\n\nclass MapCacheData(typing.TypedDict):\n    user_ids: list[int]\n    archived: bool\n\n\nclass UserCacheData(typing.TypedDict):\n    nickname: str\n    alertable: bool\n\n\nNUMBER_EMOJI = {\n    1: \"1️⃣\",\n    2: \"2️⃣\",\n    3: \"3️⃣\",\n    4: \"4️⃣\",\n    5: \"5️⃣\",\n    6: \"6️⃣\",\n    7: \"7️⃣\",\n    8: \"8️⃣\",\n    9: \"9️⃣\",\n    10: \"🔟\",\n}\n\n_RANK_THRESHOLD = (10, 10, 10, 10, 5, 2)\n\n\nasync def update_affected_users(\n    itx: core.Interaction[core.Genji],\n    map_code: str,\n):\n    users = [\n        x.user_id\n        async for x in itx.client.database.get(\n            \"\"\"\n            SELECT DISTINCT user_id FROM records WHERE map_code=$1;\n            \"\"\",\n            map_code,\n        )\n    ]\n    if users:\n        for x in users:\n            if user := itx.guild.get_member(x):\n                await utils.auto_role(itx.client, user)\n\n\nasync def auto_role(client: core.Genji, user: discord.Member):\n    rank, rank_plus = await rank_finder(client, user)\n    rank_roles = list(\n        map(\n            lambda x: client.get_guild(utils.GUILD_ID).get_role(x),\n            utils.Roles.ranks()[1:],\n        )\n    )\n    rank_plus_roles = list(\n        map(\n            lambda x: client.get_guild(utils.GUILD_ID).get_role(x),\n            utils.Roles.ranks_plus()[1:],\n        )\n    )\n\n    added = list(filter(lambda x: x not in user.roles, rank_roles[:rank])) + list(\n        filter(lambda x: x not in user.roles, rank_plus_roles[:rank_plus])\n    )\n    removed = list(filter(lambda x: x in user.roles, rank_roles[rank + 1 :])) + list(\n        filter(lambda x: x in user.roles, rank_plus_roles[rank_plus + 1 :])\n    )\n    new_roles = user.roles\n    for a in added:\n        if a not in new_roles:\n            new_roles.append(a)\n    for r in removed:\n        if r in new_roles:\n            new_roles.remove(r)\n\n    if set(new_roles) != set(user.roles):\n        await user.edit(roles=new_roles)\n\n        await client.database.set(\n            \"\"\"UPDATE users SET rank=$2 WHERE user_id=$1;\"\"\",\n            user.id,\n            rank,\n        )\n\n    response = (\n        \"🚨***ALERT!***🚨\\nYour roles have been updated! If roles have been removed, \"\n        \"it's because a map that you have completed has changed difficulty.\\n\"\n        \"Complete more maps to get your roles back!\\n\"\n    )\n    if added:\n        response += \", \".join([f\"**{x.name}**\" for x in added]) + \" has been added.\\n\"\n        client.dispatch(\"newsfeed_role\", client, user, added)\n\n    if removed:\n        response += (\n            \", \".join([f\"**{x.name}**\" for x in removed]) + \" has been removed.\\n\"\n        )\n\n    if added or removed:\n        await user.send(response)\n\n\nasync def rank_finder(client: core.Genji, user: discord.Member) -> tuple[int, int]:\n    amounts = await get_completions_data(client, user.id)\n    rank = 0\n    rank_plus = 0  # Gold only\n    for i, diff in enumerate(utils.DIFFICULTIES[1:]):  # Ignore Beginner\n        if diff not in amounts or amounts[diff][0] < _RANK_THRESHOLD[i]:\n            break\n        if amounts[diff][0] >= _RANK_THRESHOLD[i]:\n            rank += 1\n            if amounts[diff][1] >= _RANK_THRESHOLD[i] and rank_plus + 1 == rank:\n                rank_plus += 1\n    return rank, rank_plus\n\n\nasync def get_completions_data(\n    client: core.Genji, user: int\n) -> dict[str, tuple[int, int, int, int]]:\n    query = \"\"\"\n        WITH ranges (\"range\", \"name\") AS (VALUES ('[0.59,2.35)'::numrange, 'Easy'),\n                                         ('[2.35,4.12)'::numrange, 'Medium'),\n                                         ('[4.12,5.88)'::numrange, 'Hard'),\n                                         ('[5.88,7.65)'::numrange, 'Very Hard'),\n                                         ('[7.65,9.41)'::numrange, 'Extreme'),\n                                         ('[9.41,10.0]'::numrange, 'Hell')),\n             map_data AS (SELECT AVG(mr.difficulty)                   AS difficulty,\n                                 record <= gold                       AS gold,\n                                 record <= silver AND record > gold   AS silver,\n                                 record <= bronze AND record > silver AS bronze\n                          FROM records r\n                                   LEFT JOIN maps m         ON r.map_code = m.map_code\n                                   LEFT JOIN map_ratings mr ON m.map_code = mr.map_code\n                                   LEFT JOIN map_medals mm  ON r.map_code = mm.map_code\n                          WHERE r.user_id = $1 AND m.official = TRUE AND m.archived = FALSE\n                          GROUP BY m.map_code, record, gold, silver, bronze)\n        SELECT COUNT(name)                        AS completions,\n               name                               AS difficulty,\n               count(CASE WHEN gold THEN 1 END)   AS gold,\n               count(CASE WHEN silver THEN 1 END) AS silver,\n               count(CASE WHEN bronze THEN 1 END) AS bronze\n        FROM ranges r\n                 INNER JOIN map_data md ON r.range @> md.difficulty\n        GROUP BY name;\n    \"\"\"\n    amounts = {\n        x.difficulty: tuple(map(int, (x.completions, x.gold, x.silver, x.bronze)))\n        async for x in client.database.get(query, user)\n    }\n    return amounts\n\n\nclass FakeUser:\n    def __init__(self, id_: int, data: UserCacheData):\n        self.id = id_\n        self.nickname = data[\"nickname\"]\n        self.mention = data[\"nickname\"]\n        self.display_avatar = FakeAvatar()\n\n\nclass FakeAvatar:\n    url: str = \"https://cdn.discordapp.com/embed/avatars/2.png\"\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "81e0aca5149b10cfa1e2eaaf5dcc4a93d9925e10f4ca7241f9dfc17e7622d8a0"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/embeds.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 3241,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport re\nimport typing\n\nimport discord\n\n\nclass GenjiEmbed(discord.Embed):\n    def __init__(\n        self,\n        *,\n        color: int | discord.Color | None = None,\n        title: str | None = None,\n        url: str | None = None,\n        description: str | None = None,\n        thumbnail: str | None = None,\n        image: str | None = None,\n    ):\n        if not color:\n            color = discord.Color.from_rgb(1, 1, 1)\n\n        super().__init__(color=color, title=title, url=url, description=description)\n\n        if not thumbnail:\n            self.set_thumbnail(url=\"https://i.imgur.com/qhcwGOY.png\")\n        else:\n            self.set_thumbnail(url=thumbnail)\n\n        if not image:\n            self.set_image(url=\"https://i.imgur.com/YhJokJW.png\")\n        else:\n            self.set_image(url=image)\n\n    def add_description_field(self, name: str, value: str):\n        if not self.description:\n            self.description = \"\"\n        self.description += (\n            f\"```ansi\\n\\u001b[1;37m{name}\\n```{value}\\n\"  # \\u001b[{format};{color}m\n        )\n\n\nclass ErrorEmbed(GenjiEmbed):\n    def __init__(\n        self,\n        *,\n        description: str,\n        unknown: bool = False,\n    ):\n        if unknown:\n            super().__init__(\n                title=\"Uh oh! Something went wrong.\",\n                description=description,\n                color=discord.Color.red(),\n                thumbnail=\"http://bkan0n.com/assets/images/icons/error.png\",\n            )\n        else:\n            super().__init__(\n                title=\"What happened?\",\n                description=description,\n                color=discord.Color.yellow(),\n            )\n\n            self.set_footer(text=\"If you have any questions, message nebula#6662\")\n\n\ndef set_embed_thumbnail_maps(\n    map_name: str, embed: discord.Embed\n) -> discord.Embed | GenjiEmbed:\n    \"\"\"\n    The embed_thumbnail_setter function takes a map name\n    and an embed object as parameters.\n    It then uses the map name to search for a thumbnail image\n    and sets that image as the embed's thumbnail.\n    Args:\n        map_name (str): Set the map name to be used in the embed\n        embed (discord.Embed): Set the thumbnail of the embed\n    Returns:\n        The embed object with the thumbnail set to a map's image\n    \"\"\"\n    map_name = re.sub(r\"[:'\\s]\", \"\", map_name).lower()\n    embed.set_thumbnail(url=f\"http://bkan0n.com/assets/images/maps/{map_name}.png\")\n    return embed\n\n\ndef record_embed(data: dict[str, typing.Any]):\n    if not data.get(\"video\", None):\n        description = (\n            f\"┣ `   Code ` {data['map_code']}\\n\"\n            # f\"┣ `  Level ` {data['map_level']}\\n\"\n            f\"┗ ` Record ` {data['record']}\\n\"\n        )\n    else:\n        description = (\n            f\"┣ `   Code ` {data['map_code']}\\n\"\n            # f\"┣ `  Level ` {data['map_level']}\\n\"\n            f\"┣ ` Record ` {data['record']}\\n\"\n            f\"┗ `  Video ` [Link]({data['video']})\\n\"\n        )\n\n    embed = GenjiEmbed(\n        title=\"New Personal Record!\",\n        description=description,\n    )\n    embed.set_author(name=data[\"user_name\"], icon_url=data[\"user_url\"])\n    embed.set_image(url=\"attachment://image.png\")\n    return embed\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 3241,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport re\nimport typing\n\nimport discord\n\n\nclass GenjiEmbed(discord.Embed):\n    def __init__(\n        self,\n        *,\n        color: int | discord.Color | None = None,\n        title: str | None = None,\n        url: str | None = None,\n        description: str | None = None,\n        thumbnail: str | None = None,\n        image: str | None = None,\n    ):\n        if not color:\n            color = discord.Color.from_rgb(1, 1, 1)\n\n        super().__init__(color=color, title=title, url=url, description=description)\n\n        if not thumbnail:\n            self.set_thumbnail(url=\"https://i.imgur.com/qhcwGOY.png\")\n        else:\n            self.set_thumbnail(url=thumbnail)\n\n        if not image:\n            self.set_image(url=\"https://i.imgur.com/YhJokJW.png\")\n        else:\n            self.set_image(url=image)\n\n    def add_description_field(self, name: str, value: str):\n        if not self.description:\n            self.description = \"\"\n        self.description += (\n            f\"```ansi\\n\\u001b[1;37m{name}\\n```{value}\\n\"  # \\u001b[{format};{color}m\n        )\n\n\nclass ErrorEmbed(GenjiEmbed):\n    def __init__(\n        self,\n        *,\n        description: str,\n        unknown: bool = False,\n    ):\n        if unknown:\n            super().__init__(\n                title=\"Uh oh! Something went wrong.\",\n                description=description,\n                color=discord.Color.red(),\n                thumbnail=\"http://bkan0n.com/assets/images/icons/error.png\",\n            )\n        else:\n            super().__init__(\n                title=\"What happened?\",\n                description=description,\n                color=discord.Color.yellow(),\n            )\n\n            self.set_footer(text=\"If you have any questions, message nebula#6662\")\n\n\ndef set_embed_thumbnail_maps(\n    map_name: str, embed: discord.Embed\n) -> discord.Embed | GenjiEmbed:\n    \"\"\"\n    The embed_thumbnail_setter function takes a map name\n    and an embed object as parameters.\n    It then uses the map name to search for a thumbnail image\n    and sets that image as the embed's thumbnail.\n    Args:\n        map_name (str): Set the map name to be used in the embed\n        embed (discord.Embed): Set the thumbnail of the embed\n    Returns:\n        The embed object with the thumbnail set to a map's image\n    \"\"\"\n    map_name = re.sub(r\"[:'\\s]\", \"\", map_name).lower()\n    embed.set_thumbnail(url=f\"http://bkan0n.com/assets/images/maps/{map_name}.png\")\n    return embed\n\n\ndef record_embed(data: dict[str, typing.Any]):\n    if not data.get(\"video\", None):\n        description = (\n            f\"┣ `   Code ` {data['map_code']}\\n\"\n            # f\"┣ `  Level ` {data['map_level']}\\n\"\n            f\"┗ ` Record ` {data['record']}\\n\"\n        )\n    else:\n        description = (\n            f\"┣ `   Code ` {data['map_code']}\\n\"\n            # f\"┣ `  Level ` {data['map_level']}\\n\"\n            f\"┣ ` Record ` {data['record']}\\n\"\n            f\"┗ `  Video ` [Link]({data['video']})\\n\"\n        )\n\n    embed = GenjiEmbed(\n        title=\"New Personal Record!\",\n        description=description,\n    )\n    embed.set_author(name=data[\"user_name\"], icon_url=data[\"user_url\"])\n    embed.set_image(url=\"attachment://image.png\")\n    return embed\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "64759bc298014b99434cb37249eb0db9ceae797bdfe1800ec8fd5457bff05b95"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/command_tree.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 5054,
                    "snippet": {
                      "text": "from __future__ import annotations\nfrom typing import Dict, Optional, List, TYPE_CHECKING, Union\n\nimport discord\nfrom discord import app_commands\n\nif TYPE_CHECKING:\n    from discord.abc import Snowflake\n\n    AppCommandStore = Dict[str, app_commands.AppCommand]  # name: AppCommand\n\n\nclass GenjiCommandTree(app_commands.CommandTree):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._global_app_commands: AppCommandStore = {}\n        # guild_id: AppCommandStore\n        self._guild_app_commands: Dict[int, AppCommandStore] = {}\n\n    def find_app_command_by_names(\n        self,\n        *qualified_name: str,\n        guild: Optional[Union[Snowflake, int]] = None,\n    ) -> Optional[app_commands.AppCommand]:\n        commands = self._global_app_commands\n        if guild:\n            guild_id = guild.id if not isinstance(guild, int) else guild\n            guild_commands = self._guild_app_commands.get(guild_id, {})\n            if not guild_commands and self.fallback_to_global:\n                commands = self._global_app_commands\n            else:\n                commands = guild_commands\n\n        for cmd_name, cmd in commands.items():\n            if any(name in qualified_name for name in cmd_name.split()):\n                return cmd\n\n        return None\n\n    def get_app_command(\n        self,\n        value: Union[str, int],\n        guild: Optional[Union[Snowflake, int]] = None,\n    ) -> Optional[app_commands.AppCommand]:\n        def search_dict(d: AppCommandStore) -> Optional[app_commands.AppCommand]:\n            for cmd_name, cmd in d.items():\n                if value == cmd_name or (str(value).isdigit() and int(value) == cmd.id):\n                    return cmd\n            return None\n\n        if guild:\n            guild_id = guild.id if not isinstance(guild, int) else guild\n            guild_commands = self._guild_app_commands.get(guild_id, {})\n            if not self.fallback_to_global:\n                return search_dict(guild_commands)\n            else:\n                return search_dict(guild_commands) or search_dict(\n                    self._global_app_commands\n                )\n        else:\n            return search_dict(self._global_app_commands)\n\n    @staticmethod\n    def _unpack_app_commands(\n        commands: List[app_commands.AppCommand],\n    ) -> AppCommandStore:\n        ret: AppCommandStore = {}\n\n        def unpack_options(\n            options: List[\n                Union[\n                    app_commands.AppCommand,\n                    app_commands.AppCommandGroup,\n                    app_commands.Argument,\n                ]\n            ]\n        ):\n            for option in options:\n                if isinstance(option, app_commands.AppCommandGroup):\n                    ret[option.qualified_name] = option  # type: ignore\n                    unpack_options(option.options)  # type: ignore\n\n        for command in commands:\n            ret[command.name] = command\n            unpack_options(command.options)  # type: ignore\n\n        return ret\n\n    async def _update_cache(\n        self,\n        commands: Optional[List[app_commands.AppCommand]] = None,\n        guild: Optional[Union[Snowflake, int]] = None,\n    ) -> None:\n        # because we support both int and Snowflake\n        # we need to convert it to a Snowflake like object if it's an int\n        _guild: Optional[Snowflake] = None\n        if guild is not None:\n            if isinstance(guild, int):\n                _guild = discord.Object(guild)\n            else:\n                _guild = guild\n\n        if _guild:\n            self._guild_app_commands[_guild.id] = self._unpack_app_commands(commands)\n        else:\n            self._global_app_commands = self._unpack_app_commands(commands)\n\n    async def fetch_command(\n        self, command_id: int, /, *, guild: Optional[Snowflake] = None\n    ) -> app_commands.AppCommand:\n        res = await super().fetch_command(command_id, guild=guild)\n        await self._update_cache([res], guild=guild)\n        return res\n\n    async def fetch_commands(\n        self, *, guild: Optional[Snowflake] = None\n    ) -> List[app_commands.AppCommand]:\n        res = await super().fetch_commands(guild=guild)\n        await self._update_cache(res, guild=guild)\n        return res\n\n    def clear_app_commands_cache(self, *, guild: Optional[Snowflake]) -> None:\n        if guild:\n            self._guild_app_commands.pop(guild.id, None)\n        else:\n            self._global_app_commands = {}\n\n    def clear_commands(\n        self,\n        *,\n        guild: Optional[Snowflake],\n        type_: Optional[discord.AppCommandType] = None,\n        clear_app_commands_cache: bool = True,\n    ) -> None:\n        super().clear_commands(guild=guild)\n        if clear_app_commands_cache:\n            self.clear_app_commands_cache(guild=guild)\n\n    async def sync(\n        self, *, guild: Optional[Snowflake] = None\n    ) -> List[app_commands.AppCommand]:\n        res = await super().sync(guild=guild)\n        await self._update_cache(res, guild=guild)\n        return res\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 5054,
                    "snippet": {
                      "text": "from __future__ import annotations\nfrom typing import Dict, Optional, List, TYPE_CHECKING, Union\n\nimport discord\nfrom discord import app_commands\n\nif TYPE_CHECKING:\n    from discord.abc import Snowflake\n\n    AppCommandStore = Dict[str, app_commands.AppCommand]  # name: AppCommand\n\n\nclass GenjiCommandTree(app_commands.CommandTree):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._global_app_commands: AppCommandStore = {}\n        # guild_id: AppCommandStore\n        self._guild_app_commands: Dict[int, AppCommandStore] = {}\n\n    def find_app_command_by_names(\n        self,\n        *qualified_name: str,\n        guild: Optional[Union[Snowflake, int]] = None,\n    ) -> Optional[app_commands.AppCommand]:\n        commands = self._global_app_commands\n        if guild:\n            guild_id = guild.id if not isinstance(guild, int) else guild\n            guild_commands = self._guild_app_commands.get(guild_id, {})\n            if not guild_commands and self.fallback_to_global:\n                commands = self._global_app_commands\n            else:\n                commands = guild_commands\n\n        for cmd_name, cmd in commands.items():\n            if any(name in qualified_name for name in cmd_name.split()):\n                return cmd\n\n        return None\n\n    def get_app_command(\n        self,\n        value: Union[str, int],\n        guild: Optional[Union[Snowflake, int]] = None,\n    ) -> Optional[app_commands.AppCommand]:\n        def search_dict(d: AppCommandStore) -> Optional[app_commands.AppCommand]:\n            for cmd_name, cmd in d.items():\n                if value == cmd_name or (str(value).isdigit() and int(value) == cmd.id):\n                    return cmd\n            return None\n\n        if guild:\n            guild_id = guild.id if not isinstance(guild, int) else guild\n            guild_commands = self._guild_app_commands.get(guild_id, {})\n            if not self.fallback_to_global:\n                return search_dict(guild_commands)\n            else:\n                return search_dict(guild_commands) or search_dict(\n                    self._global_app_commands\n                )\n        else:\n            return search_dict(self._global_app_commands)\n\n    @staticmethod\n    def _unpack_app_commands(\n        commands: List[app_commands.AppCommand],\n    ) -> AppCommandStore:\n        ret: AppCommandStore = {}\n\n        def unpack_options(\n            options: List[\n                Union[\n                    app_commands.AppCommand,\n                    app_commands.AppCommandGroup,\n                    app_commands.Argument,\n                ]\n            ]\n        ):\n            for option in options:\n                if isinstance(option, app_commands.AppCommandGroup):\n                    ret[option.qualified_name] = option  # type: ignore\n                    unpack_options(option.options)  # type: ignore\n\n        for command in commands:\n            ret[command.name] = command\n            unpack_options(command.options)  # type: ignore\n\n        return ret\n\n    async def _update_cache(\n        self,\n        commands: Optional[List[app_commands.AppCommand]] = None,\n        guild: Optional[Union[Snowflake, int]] = None,\n    ) -> None:\n        # because we support both int and Snowflake\n        # we need to convert it to a Snowflake like object if it's an int\n        _guild: Optional[Snowflake] = None\n        if guild is not None:\n            if isinstance(guild, int):\n                _guild = discord.Object(guild)\n            else:\n                _guild = guild\n\n        if _guild:\n            self._guild_app_commands[_guild.id] = self._unpack_app_commands(commands)\n        else:\n            self._global_app_commands = self._unpack_app_commands(commands)\n\n    async def fetch_command(\n        self, command_id: int, /, *, guild: Optional[Snowflake] = None\n    ) -> app_commands.AppCommand:\n        res = await super().fetch_command(command_id, guild=guild)\n        await self._update_cache([res], guild=guild)\n        return res\n\n    async def fetch_commands(\n        self, *, guild: Optional[Snowflake] = None\n    ) -> List[app_commands.AppCommand]:\n        res = await super().fetch_commands(guild=guild)\n        await self._update_cache(res, guild=guild)\n        return res\n\n    def clear_app_commands_cache(self, *, guild: Optional[Snowflake]) -> None:\n        if guild:\n            self._guild_app_commands.pop(guild.id, None)\n        else:\n            self._global_app_commands = {}\n\n    def clear_commands(\n        self,\n        *,\n        guild: Optional[Snowflake],\n        type_: Optional[discord.AppCommandType] = None,\n        clear_app_commands_cache: bool = True,\n    ) -> None:\n        super().clear_commands(guild=guild)\n        if clear_app_commands_cache:\n            self.clear_app_commands_cache(guild=guild)\n\n    async def sync(\n        self, *, guild: Optional[Snowflake] = None\n    ) -> List[app_commands.AppCommand]:\n        res = await super().sync(guild=guild)\n        await self._update_cache(res, guild=guild)\n        return res\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "c521ee6931b7bfbffadda3e1b3828fbc2757f127b3b7e24fff88790f77419da5"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "cogs/mod.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 29490,
                    "snippet": {
                      "text": "from __future__ import annotations\nimport copy\n\nimport typing\n\nimport discord\nfrom discord import app_commands\nfrom discord.ext import commands\n\nimport cogs\nimport utils\nimport utils.maps\nimport views\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nclass ModCommands(commands.Cog):\n    def __init__(self, bot: core.Genji):\n        self.bot = bot\n\n    async def cog_check(self, ctx: commands.Context[core.Genji]) -> bool:\n        return True\n        # return bool(ctx.author.get_role(utils.STAFF))\n\n    mod = app_commands.Group(\n        name=\"mod\",\n        guild_ids=[utils.GUILD_ID],\n        description=\"Mod only commands\",\n    )\n    map = app_commands.Group(\n        name=\"map\",\n        guild_ids=[utils.GUILD_ID],\n        description=\"Mod only commands\",\n        parent=mod,\n    )\n\n    @map.command(name=\"add-creator\")\n    @app_commands.autocomplete(\n        map_code=cogs.map_codes_autocomplete,\n        creator=cogs.users_autocomplete,\n    )\n    async def add_creator(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n        creator: app_commands.Transform[int, utils.CreatorTransformer],\n    ) -> None:\n        \"\"\"\n        Add a creator to a map.\n\n        Args:\n            itx: Interaction\n            map_code: Overwatch share code\n            creator: User\n        \"\"\"\n        await cogs.add_creator_(creator, itx, map_code, checks=True)\n\n    @map.command(name=\"remove-creator\")\n    @app_commands.autocomplete(\n        map_code=cogs.map_codes_autocomplete,\n        creator=cogs.users_autocomplete,\n    )\n    async def remove_creator(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n        creator: app_commands.Transform[int, utils.CreatorTransformer],\n    ) -> None:\n        \"\"\"\n        Remove a creator from a map.\n\n        Args:\n            itx: Interaction\n            map_code: Overwatch share code\n            creator: User\n        \"\"\"\n        await cogs.remove_creator_(creator, itx, map_code)\n\n    @map.command(name=\"edit-medals\")\n    @app_commands.autocomplete(\n        map_code=cogs.map_codes_autocomplete,\n    )\n    async def edit_medals(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n        gold: app_commands.Transform[float, utils.RecordTransformer],\n        silver: app_commands.Transform[float, utils.RecordTransformer],\n        bronze: app_commands.Transform[float, utils.RecordTransformer],\n    ) -> None:\n        \"\"\"\n        Edit all medals for a map.\n\n        Args:\n            itx: Interaction\n            map_code: Overwatch share code\n            gold: Gold medal time\n            silver: Silver medal time\n            bronze: Bronze medal time\n        \"\"\"\n\n        await itx.response.defer(ephemeral=True)\n        if not 0 < gold < silver < bronze:\n            raise utils.InvalidMedals\n        await itx.client.database.set(\n            \"\"\"            \n            INSERT INTO map_medals (gold, silver, bronze, map_code)\n            VALUES ($1, $2, $3, $4) \n            ON CONFLICT (map_code)\n            DO UPDATE SET gold = $1, silver = $2, bronze = $3\n            WHERE map_medals.map_code = EXCLUDED.map_code\n            \"\"\",\n            gold,\n            silver,\n            bronze,\n            map_code,\n        )\n        await itx.edit_original_response(\n            content=f\"{map_code} medals have been changed to:\\n\"\n            f\"`Gold` {gold}\\n\"\n            f\"`Silver` {silver}\\n\"\n            f\"`Bronze` {bronze}\\n\"\n        )\n        if playtest := await itx.client.database.get_row(\n            \"SELECT thread_id, original_msg FROM playtest WHERE map_code=$1\", map_code\n        ):\n            itx.client.dispatch(\n                \"newsfeed_medals\",\n                itx,\n                map_code,\n                gold,\n                silver,\n                bronze,\n                playtest.thread_id,\n                playtest.original_msg,\n            )\n        else:\n\n            itx.client.dispatch(\"newsfeed_medals\", itx, map_code, gold, silver, bronze)\n            await utils.update_affected_users(itx, map_code)\n\n    @map.command(name=\"submit-map\")\n    @app_commands.autocomplete(\n        user=cogs.users_autocomplete,\n        map_name=cogs.map_name_autocomplete,\n    )\n    async def submit_fake_map(\n        self,\n        itx: core.Interaction[core.Genji],\n        user: app_commands.Transform[\n            utils.FakeUser | discord.Member, utils.AllUserTranformer\n        ],\n        map_code: app_commands.Transform[str, utils.MapCodeSubmitTransformer],\n        map_name: app_commands.Transform[str, utils.MapNameTransformer],\n        checkpoint_count: app_commands.Range[int, 1, 500],\n        description: str | None = None,\n        guide_url: str | None = None,\n        gold: app_commands.Transform[float, utils.RecordTransformer] | None = None,\n        silver: app_commands.Transform[float, utils.RecordTransformer] | None = None,\n        bronze: app_commands.Transform[float, utils.RecordTransformer] | None = None,\n    ) -> None:\n        \"\"\"\n        Submit a map for a specific user to the database This will skip the playtesting phase.\n\n        Args:\n            itx: Interaction\n            user: user\n            map_code: Overwatch share code\n            map_name: Overwatch map\n            checkpoint_count: Number of checkpoints in the map\n            description: Other optional information for the map\n            guide_url: Guide URL\n            gold: Gold medal time (must be the fastest time)\n            silver: Silver medal time (must be between gold and bronze)\n            bronze: Bronze medal time (must be the slowest time)\n        \"\"\"\n\n        medals = None\n        if gold and silver and bronze:\n            medals = (gold, silver, bronze)\n\n        await cogs.submit_map_(\n            itx,\n            user,\n            map_code,\n            map_name,\n            checkpoint_count,\n            description,\n            guide_url,\n            medals,\n            mod=True,\n        )\n\n    @mod.command(name=\"remove-record\")\n    @app_commands.autocomplete(\n        map_code=cogs.map_codes_autocomplete,\n    )\n    async def remove_record(\n        self,\n        itx: core.Interaction[core.Genji],\n        member: discord.Member,\n        map_code: app_commands.Transform[str, utils.MapCodeRecordsTransformer],\n    ):\n        \"\"\"\n        Remove a record from the database/user\n\n        Args:\n            itx: Interaction\n            member: User\n            map_code: Overwatch share code\n\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n        record = [\n            x\n            async for x in self.bot.database.get(\n                \"SELECT * FROM records r \"\n                \"LEFT JOIN users u on r.user_id = u.user_id \"\n                \"WHERE r.user_id=$1 AND map_code=$2\",\n                member.id,\n                map_code,\n            )\n        ]\n        if not record:\n            raise utils.NoRecordsFoundError\n\n        record = record[0]\n        embed = utils.GenjiEmbed(\n            title=\"Delete Record\",\n            description=(\n                f\"`Name` {record.nickname}\\n\"\n                f\"`Code` {record.map_code}\\n\"\n                f\"`Record` {record.record}\\n\"\n                # f\"`Level` {record.level_name}\\n\"\n            ),\n        )\n        view = views.Confirm(itx)\n        await itx.edit_original_response(\n            content=\"Delete this record?\", embed=embed, view=view\n        )\n        await view.wait()\n\n        if not view.value:\n            return\n\n        await self.bot.database.set(\n            \"DELETE FROM records WHERE user_id=$1 AND map_code=$2\",\n            member.id,\n            map_code,\n        )\n\n        await member.send(f\"Your record for {map_code} has been deleted by staff.\")\n        await utils.auto_role(itx.client, member)\n\n    @mod.command(name=\"change-name\")\n    @app_commands.autocomplete(member=cogs.users_autocomplete)\n    async def change_name(\n        self,\n        itx: core.Interaction[core.Genji],\n        member: app_commands.Transform[int, utils.UserTransformer],\n        nickname: app_commands.Range[str, 1, 25],\n    ):\n        \"\"\"\n        Change a user display name.\n\n        Args:\n            itx: Interaction\n            member: User\n            nickname: New nickname\n        \"\"\"\n        old = self.bot.all_users[member][\"nickname\"]\n        self.bot.all_users[member][\"nickname\"] = nickname\n        await self.bot.database.set(\n            \"UPDATE users SET nickname=$1 WHERE user_id=$2\", nickname, member\n        )\n        await itx.response.send_message(\n            f\"Changing {old} ({member}) nickname to {nickname}\"\n        )\n\n    @mod.command(name=\"create-fake-member\")\n    async def create_fake_member(\n        self, itx: core.Interaction[core.Genji], \n        fake_user: str,\n    ):\n        \"\"\"\n        Create a fake user. MAKE SURE THIS USER DOESN'T ALREADY EXIST!\n\n        Args:\n            itx: Discord itx\n            fake_user: The fake user\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n\n        view = views.Confirm(itx, ephemeral=True)\n        await itx.edit_original_response(\n            content=f\"Create fake user {fake_user}?\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n        value = (\n            await itx.client.database.get_row(\n                \"SELECT MAX(user_id) + 1 user_id_ FROM users \"\n                \"WHERE user_id < 100000 LIMIT 1;\"\n            )\n        ).user_id_\n        await itx.client.database.set(\n            \"INSERT INTO users (user_id, nickname, alertable) VALUES ($1, $2, $3);\",\n            value,\n            fake_user,\n            False,\n        )\n        itx.client.all_users[value] = utils.UserCacheData(\n            nickname=fake_user,\n            alertable=False,\n        )\n        itx.client.users_choices.append(\n            app_commands.Choice(\n                name=fake_user,\n                value=str(value),\n            )\n        )\n\n\n    @mod.command(name=\"link-member\")\n    @app_commands.autocomplete(fake_user=cogs.users_autocomplete)\n    async def link_member(\n        self, itx: core.Interaction[core.Genji], fake_user: str, member: discord.Member\n    ):\n        \"\"\"\n        Link a fake user to a server member.\n\n        Args:\n            itx: Discord itx\n            fake_user: The fake user\n            member: The real user\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n        try:\n            fake_user = int(fake_user)\n        except ValueError:\n            raise utils.InvalidFakeUser\n        if fake_user >= 100000:\n            raise utils.InvalidFakeUser\n        fake_name = await itx.client.database.get_row(\n            \"SELECT * FROM users WHERE user_id=$1\", fake_user\n        )\n        if not fake_name:\n            raise utils.InvalidFakeUser\n\n        view = views.Confirm(itx, ephemeral=True)\n        await itx.edit_original_response(\n            content=f\"Link {fake_name.nickname} to {member.mention}?\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n        await self.link_fake_to_member(itx, fake_user, member)\n\n    @staticmethod\n    async def link_fake_to_member(\n        itx: core.Interaction[core.Genji], fake_id: int, member: discord.Member\n    ):\n        await itx.client.database.set(\n            \"UPDATE map_creators SET user_id=$2 WHERE user_id=$1\", fake_id, member.id\n        )\n        await itx.client.database.set(\n            \"UPDATE map_ratings SET user_id=$2 WHERE user_id=$1\", fake_id, member.id\n        )\n        await itx.client.database.set(\n            \"DELETE FROM users WHERE user_id=$1\",\n            fake_id,\n        )\n\n    @map.command()\n    @app_commands.choices(\n        action=[\n            app_commands.Choice(name=\"archive\", value=\"archive\"),\n            app_commands.Choice(name=\"unarchive\", value=\"unarchive\"),\n        ]\n    )\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    async def archive(\n        self,\n        itx: core.Interaction[core.Genji],\n        action: app_commands.Choice[str],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n    ):\n        await itx.response.defer(ephemeral=True)\n        if (\n            action.value == \"archive\"\n            and itx.client.map_cache[map_code][\"archived\"] is False\n        ):\n            value = True\n\n        elif (\n            action.value == \"unarchive\"\n            and itx.client.map_cache[map_code][\"archived\"] is True\n        ):\n            value = False\n        else:\n            await itx.edit_original_response(\n                content=f\"**{map_code}** has already been {action.value}d.\"\n            )\n            return\n        itx.client.map_cache[map_code][\"archived\"] = value\n        await itx.client.database.set(\n            \"\"\"UPDATE maps SET archived = $1 WHERE map_code = $2\"\"\",\n            value,\n            map_code,\n        )\n        await itx.edit_original_response(\n            content=f\"**{map_code}** has been {action.value}d.\"\n        )\n        itx.client.dispatch(\"newsfeed_archive\", itx, map_code, action.value)\n\n    @map.command()\n    @app_commands.choices(value=utils.DIFFICULTIES_CHOICES)\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    async def difficulty(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: str,\n        value: app_commands.Choice[str],\n    ):\n        \"\"\"Completely change the difficulty of a map.\n        This will change all votes to the supplied value.\n\n        Args:\n            itx: Discord interaction\n            map_code: Overwatch share code\n            value: Difficulty\n\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n        difficulty = utils.DIFFICULTIES_RANGES[value.value][0]\n        view = views.Confirm(\n            itx,\n            f\"Updated {map_code} difficulty to {value.value}.\",\n            ephemeral=True,\n        )\n        await itx.edit_original_response(\n            content=f\"{map_code} difficulty to {value.value}. Is this correct?\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n        await itx.client.database.set(\n            \"UPDATE map_ratings SET difficulty=$1 WHERE map_code=$2\",\n            difficulty,\n            map_code,\n        )\n        await utils.update_affected_users(itx, map_code)\n        itx.client.dispatch(\n            \"newsfeed_map_edit\", itx, map_code, {\"Difficulty\": value.value}\n        )\n\n    @map.command()\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    @app_commands.choices(value=utils.ALL_STARS_CHOICES)\n    async def rating(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n        value: app_commands.Choice[int],\n    ):\n        \"\"\"Completely change the rating of a map.\n        This will change all votes to the supplied value.\n\n        Args:\n            itx: Discord itx\n            map_code: Overwatch share code\n            value: Rating number 1-6\n\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n\n        view = views.Confirm(\n            itx,\n            f\"Updated {map_code} rating to {value}.\",\n            ephemeral=True,\n        )\n        await itx.edit_original_response(\n            content=f\"{map_code} rating to {value}. Is this correct?\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n        await itx.client.database.set(\n            \"UPDATE map_ratings SET quality=$1 WHERE map_code=$2\",\n            value,\n            map_code,\n        )\n        await itx.edit_original_response(\n            content=f\"Updated {map_code} rating to {value}.\"\n        )\n        itx.client.dispatch(\"newsfeed_map_edit\", itx, map_code, {\"Rating\": value.name})\n\n    @map.command(name=\"map-type\")\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    async def map_type(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n    ):\n        \"\"\"Change the type of a map.\n\n        Args:\n            itx: Discord itx\n            map_code: Overwatch share code\n\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n\n        select = {\n            \"map_type\": views.MapTypeSelect(copy.deepcopy(itx.client.map_types_options))\n        }\n        view = views.Confirm(itx, ephemeral=True, preceeding_items=select)\n        await itx.edit_original_response(\n            content=f\"Select the new map type(s).\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n        map_types = view.map_type.values\n        await itx.client.database.set(\n            \"UPDATE maps SET map_type=$1 WHERE map_code=$2\",\n            map_types,\n            map_code,\n        )\n        await itx.edit_original_response(\n            content=f\"Updated {map_code} types to {', '.join(map_types)}.\"\n        )\n        # If playtesting\n        if playtest := await itx.client.database.get_row(\n            \"SELECT thread_id, original_msg FROM playtest WHERE map_code=$1\", map_code\n        ):\n            itx.client.dispatch(\n                \"newsfeed_map_edit\",\n                itx,\n                map_code,\n                {\"Type\": \", \".join(map_types)},\n                playtest.thread_id,\n                playtest.original_msg,\n            )\n        else:\n            itx.client.dispatch(\n                \"newsfeed_map_edit\",\n                itx,\n                map_code,\n                {\"Type\": \", \".join(map_types)},\n            )\n\n    @map.command()\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    async def mechanics(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n    ):\n        \"\"\"Change the mechanics of a map.\n\n        Args:\n            itx: Discord itx\n            map_code: Overwatch share code\n\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n\n        select = {\n            \"mechanics\": views.MechanicsSelect(\n                copy.deepcopy(itx.client.map_mechanics_options)\n            )\n        }\n        view = views.Confirm(itx, ephemeral=True, preceeding_items=select)\n        await itx.edit_original_response(\n            content=f\"Select the new map mechanic(s).\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n        mechanics = view.mechanics.values\n        mechanics_args = [(map_code, x) for x in mechanics]\n        await itx.client.database.set(\n            \"DELETE FROM map_mechanics WHERE map_code=$1\", map_code\n        )\n        await itx.client.database.set_many(\n            \"INSERT INTO map_mechanics (map_code, mechanic) VALUES ($1, $2)\",\n            mechanics_args,\n        )\n        await itx.edit_original_response(\n            content=f\"Updated {map_code} mechanics to {', '.join(mechanics)}.\"\n        )\n        # If playtesting\n        if playtest := await itx.client.database.get_row(\n            \"SELECT thread_id, original_msg FROM playtest WHERE map_code=$1\", map_code\n        ):\n            itx.client.dispatch(\n                \"newsfeed_map_edit\",\n                itx,\n                map_code,\n                {\"Mechanics\": \", \".join(mechanics)},\n                playtest.thread_id,\n                playtest.original_msg,\n            )\n        else:\n            itx.client.dispatch(\n                \"newsfeed_map_edit\",\n                itx,\n                map_code,\n                {\"Mechanics\": \", \".join(mechanics)},\n            )\n\n    @map.command()\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    async def restrictions(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n    ):\n        \"\"\"Change the restrictions of a map.\n\n        Args:\n            itx: Discord itx\n            map_code: Overwatch share code\n\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n\n        select = {\n            \"restrictions\": views.RestrictionsSelect(\n                copy.deepcopy(itx.client.map_restrictions_options)\n            )\n        }\n        view = views.Confirm(itx, ephemeral=True, preceeding_items=select)\n        await itx.edit_original_response(\n            content=f\"Select the new map restrictions(s).\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n\n        restrictions = view.restrictions.values\n        restrictions_args = [(map_code, x) for x in restrictions]\n        await itx.client.database.set(\n            \"DELETE FROM map_restrictions WHERE map_code=$1\", map_code\n        )\n        await itx.client.database.set_many(\n            \"INSERT INTO map_restrictions (map_code, restriction) VALUES ($1, $2)\",\n            restrictions_args,\n        )\n\n        await itx.edit_original_response(\n            content=f\"Updated {map_code} restrictions to {', '.join(restrictions)}.\"\n        )\n        # If playtesting\n        if playtest := await itx.client.database.get_row(\n            \"SELECT thread_id, original_msg FROM playtest WHERE map_code=$1\", map_code\n        ):\n            itx.client.dispatch(\n                \"newsfeed_map_edit\",\n                itx,\n                map_code,\n                {\"Restrictions\": \", \".join(restrictions)},\n                playtest.thread_id,\n                playtest.original_msg,\n            )\n        else:\n            itx.client.dispatch(\n                \"newsfeed_map_edit\",\n                itx,\n                map_code,\n                {\"Restrictions\": \", \".join(restrictions)},\n            )\n\n    @map.command()\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    async def checkpoints(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n        checkpoint_count: app_commands.Range[int, 1, 500],\n    ):\n        \"\"\"Change the checkpoint count of a map\n\n        Args:\n            itx: Discord itx\n            map_code: Overwatch share code\n            checkpoint_count: Number of checkpoints in the map\n\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n\n        view = views.Confirm(\n            itx,\n            f\"Updated {map_code} checkpoint count to {checkpoint_count}.\",\n            ephemeral=True,\n        )\n        await itx.edit_original_response(\n            content=f\"{map_code} checkpoint count to {checkpoint_count}. Is this correct?\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n        await itx.client.database.set(\n            \"UPDATE maps SET checkpoints=$1 WHERE map_code=$2\",\n            checkpoint_count,\n            map_code,\n        )\n        await itx.edit_original_response(\n            content=f\"Updated {map_code} checkpoint count to {checkpoint_count}.\"\n        )\n        # If playtesting\n        if playtest := await itx.client.database.get_row(\n            \"SELECT thread_id, original_msg FROM playtest WHERE map_code=$1\", map_code\n        ):\n            itx.client.dispatch(\n                \"newsfeed_map_edit\",\n                itx,\n                map_code,\n                {\"Checkpoints\": checkpoint_count},\n                playtest.thread_id,\n                playtest.original_msg,\n            )\n        else:\n            itx.client.dispatch(\n                \"newsfeed_map_edit\", itx, map_code, {\"Checkpoints\": checkpoint_count}\n            )\n\n    @map.command(name=\"map-code\")\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    async def map_code(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n        new_map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n    ):\n        \"\"\"Change the map code of a map\n\n        Args:\n            itx: Discord itx\n            map_code: Overwatch share code\n            new_map_code: Overwatch share code\n\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n        if new_map_code in itx.client.map_cache:\n            raise utils.MapExistsError\n\n        view = views.Confirm(\n            itx,\n            f\"Updated {map_code} map code to {new_map_code}.\",\n            ephemeral=True,\n        )\n        await itx.edit_original_response(\n            content=f\"{map_code} map code to {new_map_code}. Is this correct?\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n        await itx.client.database.set(\n            \"UPDATE maps SET map_code=$1 WHERE map_code=$2\",\n            new_map_code,\n            map_code,\n        )\n        await itx.edit_original_response(\n            content=f\"Updated {map_code} map code to {new_map_code}.\"\n        )\n        # If playtesting\n        if playtest := await itx.client.database.get_row(\n            \"SELECT thread_id, original_msg FROM playtest WHERE map_code=$1\", map_code\n        ):\n            await itx.client.database.set(\n                \"UPDATE playtest SET map_code=$1 WHERE map_code=$2\",\n                new_map_code,\n                map_code,\n            )\n            itx.client.dispatch(\"code_cache_refresh\")\n            itx.client.dispatch(\n                \"newsfeed_map_edit\",\n                itx,\n                map_code,\n                {\"Code\": new_map_code},\n                playtest.thread_id,\n                playtest.original_msg,\n            )\n        else:\n            itx.client.dispatch(\n                \"newsfeed_map_edit\", itx, map_code, {\"Code\": new_map_code}\n            )\n\n    @map.command()\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    async def description(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n        description: str,\n    ):\n        \"\"\"Change the description of a map\n\n        Args:\n            itx: Discord itx\n            map_code: Overwatch share code\n            description: Other optional information for the map\n\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n\n        view = views.Confirm(\n            itx,\n            f\"Updated {map_code} description to {description}.\",\n            ephemeral=True,\n        )\n        await itx.edit_original_response(\n            content=f\"{map_code} description to \\n\\n{description}\\n\\n Is this correct?\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n        await itx.client.database.set(\n            'UPDATE maps SET \"desc\"=$1 WHERE map_code=$2',\n            description,\n            map_code,\n        )\n        await itx.edit_original_response(\n            content=f\"Updated {map_code} description to {description}.\"\n        )\n        # If playtesting\n        if playtest := await itx.client.database.get_row(\n            \"SELECT thread_id, original_msg FROM playtest WHERE map_code=$1\", map_code\n        ):\n            itx.client.dispatch(\n                \"newsfeed_map_edit\",\n                itx,\n                map_code,\n                {\"Desc\": description},\n                playtest.thread_id,\n                playtest.original_msg,\n            )\n        else:\n            itx.client.dispatch(\n                \"newsfeed_map_edit\", itx, map_code, {\"Description\": description}\n            )\n\n    @map.command(name=\"map-name\")\n    @app_commands.autocomplete(\n        map_code=cogs.map_codes_autocomplete,\n        map_name=cogs.map_name_autocomplete,\n    )\n    async def map_name(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n        map_name: app_commands.Transform[str, utils.MapNameTransformer],\n    ):\n        \"\"\"Change the description of a map\n\n        Args:\n            itx: Discord itx\n            map_code: Overwatch share code\n            map_name: Overwatch map\n\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n\n        view = views.Confirm(\n            itx,\n            f\"Updated {map_code} map name to {map_name}.\",\n            ephemeral=True,\n        )\n        await itx.edit_original_response(\n            content=f\"{map_code} map name to {map_name}. Is this correct?\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n        await itx.client.database.set(\n            \"UPDATE maps SET map_name=$1 WHERE map_code=$2\",\n            map_name,\n            map_code,\n        )\n        await itx.edit_original_response(\n            content=f\"Updated {map_code} map name to {map_name}.\"\n        )\n        # If playtesting\n        if playtest := await itx.client.database.get_row(\n            \"SELECT thread_id, original_msg FROM playtest WHERE map_code=$1\", map_code\n        ):\n            itx.client.dispatch(\n                \"newsfeed_map_edit\",\n                itx,\n                map_code,\n                {\"Map\": map_name},\n                playtest.thread_id,\n                playtest.original_msg,\n            )\n        else:\n            itx.client.dispatch(\"newsfeed_map_edit\", itx, map_code, {\"Map\": map_name})\n\n    # TODO: Delete map ?\n\n\nasync def setup(bot: core.Genji):\n    await bot.add_cog(ModCommands(bot))\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 29490,
                    "snippet": {
                      "text": "from __future__ import annotations\nimport copy\n\nimport typing\n\nimport discord\nfrom discord import app_commands\nfrom discord.ext import commands\n\nimport cogs\nimport utils\nimport utils.maps\nimport views\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nclass ModCommands(commands.Cog):\n    def __init__(self, bot: core.Genji):\n        self.bot = bot\n\n    async def cog_check(self, ctx: commands.Context[core.Genji]) -> bool:\n        return True\n        # return bool(ctx.author.get_role(utils.STAFF))\n\n    mod = app_commands.Group(\n        name=\"mod\",\n        guild_ids=[utils.GUILD_ID],\n        description=\"Mod only commands\",\n    )\n    map = app_commands.Group(\n        name=\"map\",\n        guild_ids=[utils.GUILD_ID],\n        description=\"Mod only commands\",\n        parent=mod,\n    )\n\n    @map.command(name=\"add-creator\")\n    @app_commands.autocomplete(\n        map_code=cogs.map_codes_autocomplete,\n        creator=cogs.users_autocomplete,\n    )\n    async def add_creator(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n        creator: app_commands.Transform[int, utils.CreatorTransformer],\n    ) -> None:\n        \"\"\"\n        Add a creator to a map.\n\n        Args:\n            itx: Interaction\n            map_code: Overwatch share code\n            creator: User\n        \"\"\"\n        await cogs.add_creator_(creator, itx, map_code, checks=True)\n\n    @map.command(name=\"remove-creator\")\n    @app_commands.autocomplete(\n        map_code=cogs.map_codes_autocomplete,\n        creator=cogs.users_autocomplete,\n    )\n    async def remove_creator(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n        creator: app_commands.Transform[int, utils.CreatorTransformer],\n    ) -> None:\n        \"\"\"\n        Remove a creator from a map.\n\n        Args:\n            itx: Interaction\n            map_code: Overwatch share code\n            creator: User\n        \"\"\"\n        await cogs.remove_creator_(creator, itx, map_code)\n\n    @map.command(name=\"edit-medals\")\n    @app_commands.autocomplete(\n        map_code=cogs.map_codes_autocomplete,\n    )\n    async def edit_medals(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n        gold: app_commands.Transform[float, utils.RecordTransformer],\n        silver: app_commands.Transform[float, utils.RecordTransformer],\n        bronze: app_commands.Transform[float, utils.RecordTransformer],\n    ) -> None:\n        \"\"\"\n        Edit all medals for a map.\n\n        Args:\n            itx: Interaction\n            map_code: Overwatch share code\n            gold: Gold medal time\n            silver: Silver medal time\n            bronze: Bronze medal time\n        \"\"\"\n\n        await itx.response.defer(ephemeral=True)\n        if not 0 < gold < silver < bronze:\n            raise utils.InvalidMedals\n        await itx.client.database.set(\n            \"\"\"            \n            INSERT INTO map_medals (gold, silver, bronze, map_code)\n            VALUES ($1, $2, $3, $4) \n            ON CONFLICT (map_code)\n            DO UPDATE SET gold = $1, silver = $2, bronze = $3\n            WHERE map_medals.map_code = EXCLUDED.map_code\n            \"\"\",\n            gold,\n            silver,\n            bronze,\n            map_code,\n        )\n        await itx.edit_original_response(\n            content=f\"{map_code} medals have been changed to:\\n\"\n            f\"`Gold` {gold}\\n\"\n            f\"`Silver` {silver}\\n\"\n            f\"`Bronze` {bronze}\\n\"\n        )\n        if playtest := await itx.client.database.get_row(\n            \"SELECT thread_id, original_msg FROM playtest WHERE map_code=$1\", map_code\n        ):\n            itx.client.dispatch(\n                \"newsfeed_medals\",\n                itx,\n                map_code,\n                gold,\n                silver,\n                bronze,\n                playtest.thread_id,\n                playtest.original_msg,\n            )\n        else:\n\n            itx.client.dispatch(\"newsfeed_medals\", itx, map_code, gold, silver, bronze)\n            await utils.update_affected_users(itx, map_code)\n\n    @map.command(name=\"submit-map\")\n    @app_commands.autocomplete(\n        user=cogs.users_autocomplete,\n        map_name=cogs.map_name_autocomplete,\n    )\n    async def submit_fake_map(\n        self,\n        itx: core.Interaction[core.Genji],\n        user: app_commands.Transform[\n            utils.FakeUser | discord.Member, utils.AllUserTranformer\n        ],\n        map_code: app_commands.Transform[str, utils.MapCodeSubmitTransformer],\n        map_name: app_commands.Transform[str, utils.MapNameTransformer],\n        checkpoint_count: app_commands.Range[int, 1, 500],\n        description: str | None = None,\n        guide_url: str | None = None,\n        gold: app_commands.Transform[float, utils.RecordTransformer] | None = None,\n        silver: app_commands.Transform[float, utils.RecordTransformer] | None = None,\n        bronze: app_commands.Transform[float, utils.RecordTransformer] | None = None,\n    ) -> None:\n        \"\"\"\n        Submit a map for a specific user to the database This will skip the playtesting phase.\n\n        Args:\n            itx: Interaction\n            user: user\n            map_code: Overwatch share code\n            map_name: Overwatch map\n            checkpoint_count: Number of checkpoints in the map\n            description: Other optional information for the map\n            guide_url: Guide URL\n            gold: Gold medal time (must be the fastest time)\n            silver: Silver medal time (must be between gold and bronze)\n            bronze: Bronze medal time (must be the slowest time)\n        \"\"\"\n\n        medals = None\n        if gold and silver and bronze:\n            medals = (gold, silver, bronze)\n\n        await cogs.submit_map_(\n            itx,\n            user,\n            map_code,\n            map_name,\n            checkpoint_count,\n            description,\n            guide_url,\n            medals,\n            mod=True,\n        )\n\n    @mod.command(name=\"remove-record\")\n    @app_commands.autocomplete(\n        map_code=cogs.map_codes_autocomplete,\n    )\n    async def remove_record(\n        self,\n        itx: core.Interaction[core.Genji],\n        member: discord.Member,\n        map_code: app_commands.Transform[str, utils.MapCodeRecordsTransformer],\n    ):\n        \"\"\"\n        Remove a record from the database/user\n\n        Args:\n            itx: Interaction\n            member: User\n            map_code: Overwatch share code\n\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n        record = [\n            x\n            async for x in self.bot.database.get(\n                \"SELECT * FROM records r \"\n                \"LEFT JOIN users u on r.user_id = u.user_id \"\n                \"WHERE r.user_id=$1 AND map_code=$2\",\n                member.id,\n                map_code,\n            )\n        ]\n        if not record:\n            raise utils.NoRecordsFoundError\n\n        record = record[0]\n        embed = utils.GenjiEmbed(\n            title=\"Delete Record\",\n            description=(\n                f\"`Name` {record.nickname}\\n\"\n                f\"`Code` {record.map_code}\\n\"\n                f\"`Record` {record.record}\\n\"\n                # f\"`Level` {record.level_name}\\n\"\n            ),\n        )\n        view = views.Confirm(itx)\n        await itx.edit_original_response(\n            content=\"Delete this record?\", embed=embed, view=view\n        )\n        await view.wait()\n\n        if not view.value:\n            return\n\n        await self.bot.database.set(\n            \"DELETE FROM records WHERE user_id=$1 AND map_code=$2\",\n            member.id,\n            map_code,\n        )\n\n        await member.send(f\"Your record for {map_code} has been deleted by staff.\")\n        await utils.auto_role(itx.client, member)\n\n    @mod.command(name=\"change-name\")\n    @app_commands.autocomplete(member=cogs.users_autocomplete)\n    async def change_name(\n        self,\n        itx: core.Interaction[core.Genji],\n        member: app_commands.Transform[int, utils.UserTransformer],\n        nickname: app_commands.Range[str, 1, 25],\n    ):\n        \"\"\"\n        Change a user display name.\n\n        Args:\n            itx: Interaction\n            member: User\n            nickname: New nickname\n        \"\"\"\n        old = self.bot.all_users[member][\"nickname\"]\n        self.bot.all_users[member][\"nickname\"] = nickname\n        await self.bot.database.set(\n            \"UPDATE users SET nickname=$1 WHERE user_id=$2\", nickname, member\n        )\n        await itx.response.send_message(\n            f\"Changing {old} ({member}) nickname to {nickname}\"\n        )\n\n    @mod.command(name=\"create-fake-member\")\n    async def create_fake_member(\n        self, itx: core.Interaction[core.Genji], \n        fake_user: str,\n    ):\n        \"\"\"\n        Create a fake user. MAKE SURE THIS USER DOESN'T ALREADY EXIST!\n\n        Args:\n            itx: Discord itx\n            fake_user: The fake user\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n\n        view = views.Confirm(itx, ephemeral=True)\n        await itx.edit_original_response(\n            content=f\"Create fake user {fake_user}?\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n        value = (\n            await itx.client.database.get_row(\n                \"SELECT MAX(user_id) + 1 user_id_ FROM users \"\n                \"WHERE user_id < 100000 LIMIT 1;\"\n            )\n        ).user_id_\n        await itx.client.database.set(\n            \"INSERT INTO users (user_id, nickname, alertable) VALUES ($1, $2, $3);\",\n            value,\n            fake_user,\n            False,\n        )\n        itx.client.all_users[value] = utils.UserCacheData(\n            nickname=fake_user,\n            alertable=False,\n        )\n        itx.client.users_choices.append(\n            app_commands.Choice(\n                name=fake_user,\n                value=str(value),\n            )\n        )\n\n\n    @mod.command(name=\"link-member\")\n    @app_commands.autocomplete(fake_user=cogs.users_autocomplete)\n    async def link_member(\n        self, itx: core.Interaction[core.Genji], fake_user: str, member: discord.Member\n    ):\n        \"\"\"\n        Link a fake user to a server member.\n\n        Args:\n            itx: Discord itx\n            fake_user: The fake user\n            member: The real user\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n        try:\n            fake_user = int(fake_user)\n        except ValueError:\n            raise utils.InvalidFakeUser\n        if fake_user >= 100000:\n            raise utils.InvalidFakeUser\n        fake_name = await itx.client.database.get_row(\n            \"SELECT * FROM users WHERE user_id=$1\", fake_user\n        )\n        if not fake_name:\n            raise utils.InvalidFakeUser\n\n        view = views.Confirm(itx, ephemeral=True)\n        await itx.edit_original_response(\n            content=f\"Link {fake_name.nickname} to {member.mention}?\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n        await self.link_fake_to_member(itx, fake_user, member)\n\n    @staticmethod\n    async def link_fake_to_member(\n        itx: core.Interaction[core.Genji], fake_id: int, member: discord.Member\n    ):\n        await itx.client.database.set(\n            \"UPDATE map_creators SET user_id=$2 WHERE user_id=$1\", fake_id, member.id\n        )\n        await itx.client.database.set(\n            \"UPDATE map_ratings SET user_id=$2 WHERE user_id=$1\", fake_id, member.id\n        )\n        await itx.client.database.set(\n            \"DELETE FROM users WHERE user_id=$1\",\n            fake_id,\n        )\n\n    @map.command()\n    @app_commands.choices(\n        action=[\n            app_commands.Choice(name=\"archive\", value=\"archive\"),\n            app_commands.Choice(name=\"unarchive\", value=\"unarchive\"),\n        ]\n    )\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    async def archive(\n        self,\n        itx: core.Interaction[core.Genji],\n        action: app_commands.Choice[str],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n    ):\n        await itx.response.defer(ephemeral=True)\n        if (\n            action.value == \"archive\"\n            and itx.client.map_cache[map_code][\"archived\"] is False\n        ):\n            value = True\n\n        elif (\n            action.value == \"unarchive\"\n            and itx.client.map_cache[map_code][\"archived\"] is True\n        ):\n            value = False\n        else:\n            await itx.edit_original_response(\n                content=f\"**{map_code}** has already been {action.value}d.\"\n            )\n            return\n        itx.client.map_cache[map_code][\"archived\"] = value\n        await itx.client.database.set(\n            \"\"\"UPDATE maps SET archived = $1 WHERE map_code = $2\"\"\",\n            value,\n            map_code,\n        )\n        await itx.edit_original_response(\n            content=f\"**{map_code}** has been {action.value}d.\"\n        )\n        itx.client.dispatch(\"newsfeed_archive\", itx, map_code, action.value)\n\n    @map.command()\n    @app_commands.choices(value=utils.DIFFICULTIES_CHOICES)\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    async def difficulty(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: str,\n        value: app_commands.Choice[str],\n    ):\n        \"\"\"Completely change the difficulty of a map.\n        This will change all votes to the supplied value.\n\n        Args:\n            itx: Discord interaction\n            map_code: Overwatch share code\n            value: Difficulty\n\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n        difficulty = utils.DIFFICULTIES_RANGES[value.value][0]\n        view = views.Confirm(\n            itx,\n            f\"Updated {map_code} difficulty to {value.value}.\",\n            ephemeral=True,\n        )\n        await itx.edit_original_response(\n            content=f\"{map_code} difficulty to {value.value}. Is this correct?\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n        await itx.client.database.set(\n            \"UPDATE map_ratings SET difficulty=$1 WHERE map_code=$2\",\n            difficulty,\n            map_code,\n        )\n        await utils.update_affected_users(itx, map_code)\n        itx.client.dispatch(\n            \"newsfeed_map_edit\", itx, map_code, {\"Difficulty\": value.value}\n        )\n\n    @map.command()\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    @app_commands.choices(value=utils.ALL_STARS_CHOICES)\n    async def rating(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n        value: app_commands.Choice[int],\n    ):\n        \"\"\"Completely change the rating of a map.\n        This will change all votes to the supplied value.\n\n        Args:\n            itx: Discord itx\n            map_code: Overwatch share code\n            value: Rating number 1-6\n\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n\n        view = views.Confirm(\n            itx,\n            f\"Updated {map_code} rating to {value}.\",\n            ephemeral=True,\n        )\n        await itx.edit_original_response(\n            content=f\"{map_code} rating to {value}. Is this correct?\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n        await itx.client.database.set(\n            \"UPDATE map_ratings SET quality=$1 WHERE map_code=$2\",\n            value,\n            map_code,\n        )\n        await itx.edit_original_response(\n            content=f\"Updated {map_code} rating to {value}.\"\n        )\n        itx.client.dispatch(\"newsfeed_map_edit\", itx, map_code, {\"Rating\": value.name})\n\n    @map.command(name=\"map-type\")\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    async def map_type(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n    ):\n        \"\"\"Change the type of a map.\n\n        Args:\n            itx: Discord itx\n            map_code: Overwatch share code\n\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n\n        select = {\n            \"map_type\": views.MapTypeSelect(copy.deepcopy(itx.client.map_types_options))\n        }\n        view = views.Confirm(itx, ephemeral=True, preceeding_items=select)\n        await itx.edit_original_response(\n            content=f\"Select the new map type(s).\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n        map_types = view.map_type.values\n        await itx.client.database.set(\n            \"UPDATE maps SET map_type=$1 WHERE map_code=$2\",\n            map_types,\n            map_code,\n        )\n        await itx.edit_original_response(\n            content=f\"Updated {map_code} types to {', '.join(map_types)}.\"\n        )\n        # If playtesting\n        if playtest := await itx.client.database.get_row(\n            \"SELECT thread_id, original_msg FROM playtest WHERE map_code=$1\", map_code\n        ):\n            itx.client.dispatch(\n                \"newsfeed_map_edit\",\n                itx,\n                map_code,\n                {\"Type\": \", \".join(map_types)},\n                playtest.thread_id,\n                playtest.original_msg,\n            )\n        else:\n            itx.client.dispatch(\n                \"newsfeed_map_edit\",\n                itx,\n                map_code,\n                {\"Type\": \", \".join(map_types)},\n            )\n\n    @map.command()\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    async def mechanics(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n    ):\n        \"\"\"Change the mechanics of a map.\n\n        Args:\n            itx: Discord itx\n            map_code: Overwatch share code\n\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n\n        select = {\n            \"mechanics\": views.MechanicsSelect(\n                copy.deepcopy(itx.client.map_mechanics_options)\n            )\n        }\n        view = views.Confirm(itx, ephemeral=True, preceeding_items=select)\n        await itx.edit_original_response(\n            content=f\"Select the new map mechanic(s).\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n        mechanics = view.mechanics.values\n        mechanics_args = [(map_code, x) for x in mechanics]\n        await itx.client.database.set(\n            \"DELETE FROM map_mechanics WHERE map_code=$1\", map_code\n        )\n        await itx.client.database.set_many(\n            \"INSERT INTO map_mechanics (map_code, mechanic) VALUES ($1, $2)\",\n            mechanics_args,\n        )\n        await itx.edit_original_response(\n            content=f\"Updated {map_code} mechanics to {', '.join(mechanics)}.\"\n        )\n        # If playtesting\n        if playtest := await itx.client.database.get_row(\n            \"SELECT thread_id, original_msg FROM playtest WHERE map_code=$1\", map_code\n        ):\n            itx.client.dispatch(\n                \"newsfeed_map_edit\",\n                itx,\n                map_code,\n                {\"Mechanics\": \", \".join(mechanics)},\n                playtest.thread_id,\n                playtest.original_msg,\n            )\n        else:\n            itx.client.dispatch(\n                \"newsfeed_map_edit\",\n                itx,\n                map_code,\n                {\"Mechanics\": \", \".join(mechanics)},\n            )\n\n    @map.command()\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    async def restrictions(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n    ):\n        \"\"\"Change the restrictions of a map.\n\n        Args:\n            itx: Discord itx\n            map_code: Overwatch share code\n\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n\n        select = {\n            \"restrictions\": views.RestrictionsSelect(\n                copy.deepcopy(itx.client.map_restrictions_options)\n            )\n        }\n        view = views.Confirm(itx, ephemeral=True, preceeding_items=select)\n        await itx.edit_original_response(\n            content=f\"Select the new map restrictions(s).\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n\n        restrictions = view.restrictions.values\n        restrictions_args = [(map_code, x) for x in restrictions]\n        await itx.client.database.set(\n            \"DELETE FROM map_restrictions WHERE map_code=$1\", map_code\n        )\n        await itx.client.database.set_many(\n            \"INSERT INTO map_restrictions (map_code, restriction) VALUES ($1, $2)\",\n            restrictions_args,\n        )\n\n        await itx.edit_original_response(\n            content=f\"Updated {map_code} restrictions to {', '.join(restrictions)}.\"\n        )\n        # If playtesting\n        if playtest := await itx.client.database.get_row(\n            \"SELECT thread_id, original_msg FROM playtest WHERE map_code=$1\", map_code\n        ):\n            itx.client.dispatch(\n                \"newsfeed_map_edit\",\n                itx,\n                map_code,\n                {\"Restrictions\": \", \".join(restrictions)},\n                playtest.thread_id,\n                playtest.original_msg,\n            )\n        else:\n            itx.client.dispatch(\n                \"newsfeed_map_edit\",\n                itx,\n                map_code,\n                {\"Restrictions\": \", \".join(restrictions)},\n            )\n\n    @map.command()\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    async def checkpoints(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n        checkpoint_count: app_commands.Range[int, 1, 500],\n    ):\n        \"\"\"Change the checkpoint count of a map\n\n        Args:\n            itx: Discord itx\n            map_code: Overwatch share code\n            checkpoint_count: Number of checkpoints in the map\n\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n\n        view = views.Confirm(\n            itx,\n            f\"Updated {map_code} checkpoint count to {checkpoint_count}.\",\n            ephemeral=True,\n        )\n        await itx.edit_original_response(\n            content=f\"{map_code} checkpoint count to {checkpoint_count}. Is this correct?\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n        await itx.client.database.set(\n            \"UPDATE maps SET checkpoints=$1 WHERE map_code=$2\",\n            checkpoint_count,\n            map_code,\n        )\n        await itx.edit_original_response(\n            content=f\"Updated {map_code} checkpoint count to {checkpoint_count}.\"\n        )\n        # If playtesting\n        if playtest := await itx.client.database.get_row(\n            \"SELECT thread_id, original_msg FROM playtest WHERE map_code=$1\", map_code\n        ):\n            itx.client.dispatch(\n                \"newsfeed_map_edit\",\n                itx,\n                map_code,\n                {\"Checkpoints\": checkpoint_count},\n                playtest.thread_id,\n                playtest.original_msg,\n            )\n        else:\n            itx.client.dispatch(\n                \"newsfeed_map_edit\", itx, map_code, {\"Checkpoints\": checkpoint_count}\n            )\n\n    @map.command(name=\"map-code\")\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    async def map_code(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n        new_map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n    ):\n        \"\"\"Change the map code of a map\n\n        Args:\n            itx: Discord itx\n            map_code: Overwatch share code\n            new_map_code: Overwatch share code\n\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n        if new_map_code in itx.client.map_cache:\n            raise utils.MapExistsError\n\n        view = views.Confirm(\n            itx,\n            f\"Updated {map_code} map code to {new_map_code}.\",\n            ephemeral=True,\n        )\n        await itx.edit_original_response(\n            content=f\"{map_code} map code to {new_map_code}. Is this correct?\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n        await itx.client.database.set(\n            \"UPDATE maps SET map_code=$1 WHERE map_code=$2\",\n            new_map_code,\n            map_code,\n        )\n        await itx.edit_original_response(\n            content=f\"Updated {map_code} map code to {new_map_code}.\"\n        )\n        # If playtesting\n        if playtest := await itx.client.database.get_row(\n            \"SELECT thread_id, original_msg FROM playtest WHERE map_code=$1\", map_code\n        ):\n            await itx.client.database.set(\n                \"UPDATE playtest SET map_code=$1 WHERE map_code=$2\",\n                new_map_code,\n                map_code,\n            )\n            itx.client.dispatch(\"code_cache_refresh\")\n            itx.client.dispatch(\n                \"newsfeed_map_edit\",\n                itx,\n                map_code,\n                {\"Code\": new_map_code},\n                playtest.thread_id,\n                playtest.original_msg,\n            )\n        else:\n            itx.client.dispatch(\n                \"newsfeed_map_edit\", itx, map_code, {\"Code\": new_map_code}\n            )\n\n    @map.command()\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    async def description(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n        description: str,\n    ):\n        \"\"\"Change the description of a map\n\n        Args:\n            itx: Discord itx\n            map_code: Overwatch share code\n            description: Other optional information for the map\n\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n\n        view = views.Confirm(\n            itx,\n            f\"Updated {map_code} description to {description}.\",\n            ephemeral=True,\n        )\n        await itx.edit_original_response(\n            content=f\"{map_code} description to \\n\\n{description}\\n\\n Is this correct?\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n        await itx.client.database.set(\n            'UPDATE maps SET \"desc\"=$1 WHERE map_code=$2',\n            description,\n            map_code,\n        )\n        await itx.edit_original_response(\n            content=f\"Updated {map_code} description to {description}.\"\n        )\n        # If playtesting\n        if playtest := await itx.client.database.get_row(\n            \"SELECT thread_id, original_msg FROM playtest WHERE map_code=$1\", map_code\n        ):\n            itx.client.dispatch(\n                \"newsfeed_map_edit\",\n                itx,\n                map_code,\n                {\"Desc\": description},\n                playtest.thread_id,\n                playtest.original_msg,\n            )\n        else:\n            itx.client.dispatch(\n                \"newsfeed_map_edit\", itx, map_code, {\"Description\": description}\n            )\n\n    @map.command(name=\"map-name\")\n    @app_commands.autocomplete(\n        map_code=cogs.map_codes_autocomplete,\n        map_name=cogs.map_name_autocomplete,\n    )\n    async def map_name(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n        map_name: app_commands.Transform[str, utils.MapNameTransformer],\n    ):\n        \"\"\"Change the description of a map\n\n        Args:\n            itx: Discord itx\n            map_code: Overwatch share code\n            map_name: Overwatch map\n\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n\n        view = views.Confirm(\n            itx,\n            f\"Updated {map_code} map name to {map_name}.\",\n            ephemeral=True,\n        )\n        await itx.edit_original_response(\n            content=f\"{map_code} map name to {map_name}. Is this correct?\",\n            view=view,\n        )\n        await view.wait()\n        if not view.value:\n            return\n        await itx.client.database.set(\n            \"UPDATE maps SET map_name=$1 WHERE map_code=$2\",\n            map_name,\n            map_code,\n        )\n        await itx.edit_original_response(\n            content=f\"Updated {map_code} map name to {map_name}.\"\n        )\n        # If playtesting\n        if playtest := await itx.client.database.get_row(\n            \"SELECT thread_id, original_msg FROM playtest WHERE map_code=$1\", map_code\n        ):\n            itx.client.dispatch(\n                \"newsfeed_map_edit\",\n                itx,\n                map_code,\n                {\"Map\": map_name},\n                playtest.thread_id,\n                playtest.original_msg,\n            )\n        else:\n            itx.client.dispatch(\"newsfeed_map_edit\", itx, map_code, {\"Map\": map_name})\n\n    # TODO: Delete map ?\n\n\nasync def setup(bot: core.Genji):\n    await bot.add_cog(ModCommands(bot))\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "096d3a47ca4aaa16d4b9075ec37ae0c5aa1ce830af8422b907abe4ed78e42ada"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/events.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 12225,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport re\nimport typing\n\nimport discord\nfrom discord import app_commands\nfrom discord.ext import commands\n\nimport core\nimport database\nimport utils\nimport views\n\nif typing.TYPE_CHECKING:\n    from .genji import Genji\n\nASCII_LOGO = r\"\"\"\"\"\"\n\n\nclass BotEvents(commands.Cog):\n    def __init__(self, bot: Genji):\n        self.bot = bot\n        bot.tree.on_error = utils.on_app_command_error\n\n    @commands.Cog.listener()\n    async def on_message(self, message: discord.Message):\n        ...\n\n    @commands.Cog.listener()\n    async def on_ready(self) -> None:\n        \"\"\"\n        The on_ready function is called when the bot\n        is ready to receive and process commands.\n        It prints a string containing the name of the bot,\n        its owner, and which version of discord.py it's using.\n        Args:\n            self: Bot instance\n        \"\"\"\n        app_info = await self.bot.application_info()\n        self.bot.logger.info(\n            f\"{ASCII_LOGO}\"\n            f\"\\nLogged in as: {self.bot.user.name}\\n\"\n            f\"Using discord.py version: {discord.__version__}\\n\"\n            f\"Owner: {app_info.owner}\\n\"\n        )\n        if not self.bot.persistent_views_added:\n            queue = [\n                x.hidden_id\n                async for x in self.bot.database.get(\n                    \"SELECT hidden_id FROM records_queue;\",\n                )\n            ]\n            for x in queue:\n                self.bot.add_view(views.VerificationView(), message_id=x)\n\n            # TODO: Hardcoded LIVE\n            view = views.RegionRoles()\n            self.bot.add_view(view, message_id=1054834412409339904)\n            await self.bot.get_channel(1054834201444220948).get_partial_message(\n                1054834412409339904\n            ).edit(\n                content=\"Press the button to add or remove your preferred region.\",\n                view=view,\n            )\n\n            view = views.ConsoleRoles()\n            self.bot.add_view(view, message_id=1060610579007553536)\n            await self.bot.get_channel(1054834201444220948).get_partial_message(\n                1060610579007553536\n            ).edit(\n                content=\"Choose how you play.\",\n                view=view,\n            )\n\n            queue = [\n                x\n                async for x in self.bot.database.get(\n                    \"SELECT map_code, message_id, value, user_id \"\n                    \"FROM playtest WHERE is_author = TRUE;\"\n                )\n            ]\n            for x in queue:\n                self.bot.add_view(\n                    views.PlaytestVoting(\n                        x.map_code,\n                        utils.convert_num_to_difficulty(x.value),\n                        x.user_id,\n                        self.bot,\n                        x.message_id,\n                    ),\n                    message_id=x.message_id,\n                )\n\n            self.bot.logger.debug(f\"Added persistent views.\")\n            self.bot.persistent_views_added = True\n\n    @commands.Cog.listener()\n    async def on_raw_reaction_add(self, payload: discord.RawReactionActionEvent):\n        ...\n\n    @commands.Cog.listener()\n    async def on_member_join(self, member: discord.Member):\n        # Add user to DB\n        await self.bot.database.set(\n            \"INSERT INTO users VALUES ($1, $2, true);\",\n            member.id,\n            member.name[:25],\n        )\n\n        # Add user to cache\n        self.bot.all_users[member.id] = utils.UserCacheData(\n            nickname=member.nick, alertable=True\n        )\n        self.bot.users_choices.append(\n            app_commands.Choice(name=member.nick, value=str(member.id))\n        )\n        self.bot.logger.debug(f\"Adding user to DB/cache: {member.name}: {member.id}\")\n        res = [\n            x\n            async for x in self.bot.database.get(\n                \"\"\"\n            SELECT * FROM maps \n            LEFT JOIN map_creators mc on maps.map_code = mc.map_code\n            WHERE user_id = $1;\n            \"\"\",\n                member.id,\n            )\n        ]\n        if res and (\n            map_maker := member.guild.get_role(utils.Roles.MAP_MAKER)\n            not in member.roles\n        ):\n            await member.add_roles(\n                map_maker, reason=\"User rejoined. Re-granting map maker.\"\n            )\n        if ninja := member.guild.get_role(utils.Roles.NINJA) not in member.roles:\n            await member.add_roles(ninja, reason=\"User joined. Granting Ninja.\")\n\n        await utils.auto_role(self.bot, member)\n\n    @commands.Cog.listener()\n    async def on_guild_join(self, guild: discord.Guild):\n        # members = [(member.id, member.name[:25]) for member in guild.members]\n        # await self.bot.database.set_many(\n        #     \"INSERT INTO users (user_id, nickname, alertable) VALUES ($1, $2, true)\",\n        #     [(_id, nick) for _id, nick in members],\n        # )\n        ...\n\n    @commands.Cog.listener()\n    async def on_thread_update(self, before: discord.Thread, after: discord.Thread):\n        # if before.parent_id not in self.bot.keep_alives:\n        #     return\n        #\n        # if after.archived and not after.locked:\n        #     await after.edit(archived=False)\n        #     self.bot.logger.debug(f\"Auto-unarchived thread: {after.id}\")\n        ...\n\n    @commands.Cog.listener()\n    async def on_newsfeed_record(\n        self,\n        itx: core.Interaction[core.Genji],\n        record: database.DotRecord,\n        medals: tuple[float, float, float],\n    ):\n        if not record.video:\n            return\n        icon = utils.icon_generator(record, medals)\n        embed = utils.GenjiEmbed(\n            url=record.screenshot,\n            description=(\n                f\"**{record.map_name} by {record.creators} ({record.map_code})**\\n\"\n                f\"┣ `Record` {record.record} {icon}\\n\"\n                f\"┗ `Video` [Link]({record.video})\"\n                if record.video\n                else \"\"\n            ),\n            color=discord.Color.yellow(),\n        )\n\n        if record.rank_num == 1:\n            embed.title = f\"{record.nickname} set a new World Record!\"\n        else:\n            embed.title = f\"{record.nickname} got a medal!\"\n        await itx.guild.get_channel(utils.NEWSFEED).send(embed=embed)\n\n    @commands.Cog.listener()\n    async def on_newsfeed_role(\n        self, client: core.Genji, user: discord.Member, roles: list[discord.Role]\n    ):\n        nickname = client.all_users[user.id][\"nickname\"]\n        embed = utils.GenjiEmbed(\n            title=f\"{nickname} got promoted!\",\n            description=\"\\n\".join([f\"{x.mention}\" for x in roles]),\n            color=discord.Color.green(),\n        )\n        await client.get_guild(utils.GUILD_ID).get_channel(utils.NEWSFEED).send(\n            embed=embed\n        )\n\n    @commands.Cog.listener()\n    async def on_newsfeed_guide(\n        self,\n        itx: core.Interaction[core.Genji],\n        user: discord.Member,\n        url: str,\n        map_code: str,\n    ):\n        nickname = itx.client.all_users[user.id][\"nickname\"]\n        embed = utils.GenjiEmbed(\n            title=f\"{nickname} has posted a guide for {map_code}\",\n            url=url,\n            color=discord.Color.orange(),\n        )\n        await itx.guild.get_channel(utils.NEWSFEED).send(embed=embed)\n        await itx.guild.get_channel(utils.NEWSFEED).send(url)\n\n    @commands.Cog.listener()\n    async def on_newsfeed_new_map(\n        self,\n        itx: core.Interaction[core.Genji],\n        user: discord.Member,\n        url: str,\n        map_code: str,\n    ):\n        nickname = itx.client.all_users[user.id][\"nickname\"]\n        embed = utils.GenjiEmbed(\n            title=f\"{nickname} has submitted a new map!\",\n            description=f\"[Check out {map_code} here!]({url})\",\n            url=url,\n            color=discord.Color.blue(),\n        )\n        await itx.guild.get_channel(utils.NEWSFEED).send(embed=embed)\n\n    @commands.Cog.listener()\n    async def on_newsfeed_medals(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: str,\n        gold: float,\n        silver: float,\n        bronze: float,\n        thread_id: int | None = None,\n        message_id: int | None = None,\n    ):\n        embed = utils.GenjiEmbed(\n            title=f\"Medals have been added/changed for code {map_code}\",\n            description=f\"`Gold` {gold}\\n\"\n            f\"`Silver` {silver}\\n\"\n            f\"`Bronze` {bronze}\\n\",\n            color=discord.Color.red(),\n        )\n\n        if thread_id:\n            await itx.guild.get_thread(thread_id).send(embed=embed)\n            original = await itx.guild.get_channel(utils.PLAYTEST).fetch_message(\n                message_id\n            )\n            embed = self.edit_medals(original.embeds[0], gold, silver, bronze)\n            await original.edit(embed=embed)\n        else:\n            await itx.guild.get_channel(utils.NEWSFEED).send(embed=embed)\n\n    @commands.Cog.listener()\n    async def on_newsfeed_archive(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: str,\n        value: str,\n    ):\n        if value == \"archive\":\n            description = (\n                \"This map will not appear in the map search command.\\n\"\n                \"You cannot submit records for archived maps.\"\n            )\n        else:\n            description = (\n                \"This map will now appear in the map search command \"\n                \"and be eligible for record submissions.\"\n            )\n        embed = utils.GenjiEmbed(\n            title=f\"{map_code} has been {value}d.\",\n            description=description,\n            color=discord.Color.red(),\n        )\n        await itx.guild.get_channel(utils.NEWSFEED).send(embed=embed)\n\n    commands.Cog.listener()\n\n    @commands.Cog.listener()\n    async def on_newsfeed_map_edit(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: str,\n        values: dict[str, str],\n        thread_id: int | None = None,\n        message_id: int | None = None,\n    ):\n        description = \">>> \"\n        for k, v in values.items():\n            description += f\"`{k}` {v}\\n\"\n\n        embed = utils.GenjiEmbed(\n            title=f\"{map_code} has been changed:\",\n            description=description,\n            color=discord.Color.red(),\n        )\n        if thread_id:\n            await itx.guild.get_thread(thread_id).send(embed=embed)\n            original = await itx.guild.get_channel(utils.PLAYTEST).fetch_message(\n                message_id\n            )\n            embed = None\n            for k, v in values.items():\n                if k == \"Desc\":\n                    embed = self.edit_description(original.embeds[0], v)\n                else:\n                    embed = self.edit_embed(original.embeds[0], k, v)\n            await original.edit(embed=embed)\n        else:\n            await itx.guild.get_channel(utils.NEWSFEED).send(embed=embed)\n\n    @staticmethod\n    def edit_embed(embed: discord.Embed, field: str, value: str) -> discord.Embed:\n        embed.description = re.sub(\n            f\"┣ `{field}\" + r\"` (.+)\\n┣\",\n            f\"┣ `{field}` {value}\\n┣\",\n            embed.description,\n        )\n        return embed\n\n    @staticmethod\n    def edit_description(embed: discord.Embed, value: str) -> discord.Embed:\n        embed.description = re.sub(\n            f\"┗ `Desc` (.+)\",\n            f\"┗ `Desc` {value}\",\n            embed.description,\n        )\n        return embed\n\n    @staticmethod\n    def edit_medals(embed: discord.Embed, gold, silver, bronze) -> discord.Embed:\n        medals_txt = (\n            f\"┣ `Medals` \"\n            f\"{utils.FULLY_VERIFIED_GOLD} {gold} | \"\n            f\"{utils.FULLY_VERIFIED_SILVER} {silver} | \"\n            f\"{utils.FULLY_VERIFIED_BRONZE} {bronze}\\n┗\"\n        )\n        if bool(re.search(\"`Medals`\", embed.description)):\n            embed.description = re.sub(\n                r\"┣ `Medals` (.+)\\n┗\",\n                medals_txt,\n                embed.description,\n            )\n        else:\n            embed.description = re.sub(\n                r\"┗\",\n                medals_txt,\n                embed.description,\n            )\n        return embed\n\n\nasync def setup(bot: Genji) -> None:\n    await bot.add_cog(BotEvents(bot))\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 12225,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport re\nimport typing\n\nimport discord\nfrom discord import app_commands\nfrom discord.ext import commands\n\nimport core\nimport database\nimport utils\nimport views\n\nif typing.TYPE_CHECKING:\n    from .genji import Genji\n\nASCII_LOGO = r\"\"\"\"\"\"\n\n\nclass BotEvents(commands.Cog):\n    def __init__(self, bot: Genji):\n        self.bot = bot\n        bot.tree.on_error = utils.on_app_command_error\n\n    @commands.Cog.listener()\n    async def on_message(self, message: discord.Message):\n        ...\n\n    @commands.Cog.listener()\n    async def on_ready(self) -> None:\n        \"\"\"\n        The on_ready function is called when the bot\n        is ready to receive and process commands.\n        It prints a string containing the name of the bot,\n        its owner, and which version of discord.py it's using.\n        Args:\n            self: Bot instance\n        \"\"\"\n        app_info = await self.bot.application_info()\n        self.bot.logger.info(\n            f\"{ASCII_LOGO}\"\n            f\"\\nLogged in as: {self.bot.user.name}\\n\"\n            f\"Using discord.py version: {discord.__version__}\\n\"\n            f\"Owner: {app_info.owner}\\n\"\n        )\n        if not self.bot.persistent_views_added:\n            queue = [\n                x.hidden_id\n                async for x in self.bot.database.get(\n                    \"SELECT hidden_id FROM records_queue;\",\n                )\n            ]\n            for x in queue:\n                self.bot.add_view(views.VerificationView(), message_id=x)\n\n            # TODO: Hardcoded LIVE\n            view = views.RegionRoles()\n            self.bot.add_view(view, message_id=1054834412409339904)\n            await self.bot.get_channel(1054834201444220948).get_partial_message(\n                1054834412409339904\n            ).edit(\n                content=\"Press the button to add or remove your preferred region.\",\n                view=view,\n            )\n\n            view = views.ConsoleRoles()\n            self.bot.add_view(view, message_id=1060610579007553536)\n            await self.bot.get_channel(1054834201444220948).get_partial_message(\n                1060610579007553536\n            ).edit(\n                content=\"Choose how you play.\",\n                view=view,\n            )\n\n            queue = [\n                x\n                async for x in self.bot.database.get(\n                    \"SELECT map_code, message_id, value, user_id \"\n                    \"FROM playtest WHERE is_author = TRUE;\"\n                )\n            ]\n            for x in queue:\n                self.bot.add_view(\n                    views.PlaytestVoting(\n                        x.map_code,\n                        utils.convert_num_to_difficulty(x.value),\n                        x.user_id,\n                        self.bot,\n                        x.message_id,\n                    ),\n                    message_id=x.message_id,\n                )\n\n            self.bot.logger.debug(f\"Added persistent views.\")\n            self.bot.persistent_views_added = True\n\n    @commands.Cog.listener()\n    async def on_raw_reaction_add(self, payload: discord.RawReactionActionEvent):\n        ...\n\n    @commands.Cog.listener()\n    async def on_member_join(self, member: discord.Member):\n        # Add user to DB\n        await self.bot.database.set(\n            \"INSERT INTO users VALUES ($1, $2, true);\",\n            member.id,\n            member.name[:25],\n        )\n\n        # Add user to cache\n        self.bot.all_users[member.id] = utils.UserCacheData(\n            nickname=member.nick, alertable=True\n        )\n        self.bot.users_choices.append(\n            app_commands.Choice(name=member.nick, value=str(member.id))\n        )\n        self.bot.logger.debug(f\"Adding user to DB/cache: {member.name}: {member.id}\")\n        res = [\n            x\n            async for x in self.bot.database.get(\n                \"\"\"\n            SELECT * FROM maps \n            LEFT JOIN map_creators mc on maps.map_code = mc.map_code\n            WHERE user_id = $1;\n            \"\"\",\n                member.id,\n            )\n        ]\n        if res and (\n            map_maker := member.guild.get_role(utils.Roles.MAP_MAKER)\n            not in member.roles\n        ):\n            await member.add_roles(\n                map_maker, reason=\"User rejoined. Re-granting map maker.\"\n            )\n        if ninja := member.guild.get_role(utils.Roles.NINJA) not in member.roles:\n            await member.add_roles(ninja, reason=\"User joined. Granting Ninja.\")\n\n        await utils.auto_role(self.bot, member)\n\n    @commands.Cog.listener()\n    async def on_guild_join(self, guild: discord.Guild):\n        # members = [(member.id, member.name[:25]) for member in guild.members]\n        # await self.bot.database.set_many(\n        #     \"INSERT INTO users (user_id, nickname, alertable) VALUES ($1, $2, true)\",\n        #     [(_id, nick) for _id, nick in members],\n        # )\n        ...\n\n    @commands.Cog.listener()\n    async def on_thread_update(self, before: discord.Thread, after: discord.Thread):\n        # if before.parent_id not in self.bot.keep_alives:\n        #     return\n        #\n        # if after.archived and not after.locked:\n        #     await after.edit(archived=False)\n        #     self.bot.logger.debug(f\"Auto-unarchived thread: {after.id}\")\n        ...\n\n    @commands.Cog.listener()\n    async def on_newsfeed_record(\n        self,\n        itx: core.Interaction[core.Genji],\n        record: database.DotRecord,\n        medals: tuple[float, float, float],\n    ):\n        if not record.video:\n            return\n        icon = utils.icon_generator(record, medals)\n        embed = utils.GenjiEmbed(\n            url=record.screenshot,\n            description=(\n                f\"**{record.map_name} by {record.creators} ({record.map_code})**\\n\"\n                f\"┣ `Record` {record.record} {icon}\\n\"\n                f\"┗ `Video` [Link]({record.video})\"\n                if record.video\n                else \"\"\n            ),\n            color=discord.Color.yellow(),\n        )\n\n        if record.rank_num == 1:\n            embed.title = f\"{record.nickname} set a new World Record!\"\n        else:\n            embed.title = f\"{record.nickname} got a medal!\"\n        await itx.guild.get_channel(utils.NEWSFEED).send(embed=embed)\n\n    @commands.Cog.listener()\n    async def on_newsfeed_role(\n        self, client: core.Genji, user: discord.Member, roles: list[discord.Role]\n    ):\n        nickname = client.all_users[user.id][\"nickname\"]\n        embed = utils.GenjiEmbed(\n            title=f\"{nickname} got promoted!\",\n            description=\"\\n\".join([f\"{x.mention}\" for x in roles]),\n            color=discord.Color.green(),\n        )\n        await client.get_guild(utils.GUILD_ID).get_channel(utils.NEWSFEED).send(\n            embed=embed\n        )\n\n    @commands.Cog.listener()\n    async def on_newsfeed_guide(\n        self,\n        itx: core.Interaction[core.Genji],\n        user: discord.Member,\n        url: str,\n        map_code: str,\n    ):\n        nickname = itx.client.all_users[user.id][\"nickname\"]\n        embed = utils.GenjiEmbed(\n            title=f\"{nickname} has posted a guide for {map_code}\",\n            url=url,\n            color=discord.Color.orange(),\n        )\n        await itx.guild.get_channel(utils.NEWSFEED).send(embed=embed)\n        await itx.guild.get_channel(utils.NEWSFEED).send(url)\n\n    @commands.Cog.listener()\n    async def on_newsfeed_new_map(\n        self,\n        itx: core.Interaction[core.Genji],\n        user: discord.Member,\n        url: str,\n        map_code: str,\n    ):\n        nickname = itx.client.all_users[user.id][\"nickname\"]\n        embed = utils.GenjiEmbed(\n            title=f\"{nickname} has submitted a new map!\",\n            description=f\"[Check out {map_code} here!]({url})\",\n            url=url,\n            color=discord.Color.blue(),\n        )\n        await itx.guild.get_channel(utils.NEWSFEED).send(embed=embed)\n\n    @commands.Cog.listener()\n    async def on_newsfeed_medals(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: str,\n        gold: float,\n        silver: float,\n        bronze: float,\n        thread_id: int | None = None,\n        message_id: int | None = None,\n    ):\n        embed = utils.GenjiEmbed(\n            title=f\"Medals have been added/changed for code {map_code}\",\n            description=f\"`Gold` {gold}\\n\"\n            f\"`Silver` {silver}\\n\"\n            f\"`Bronze` {bronze}\\n\",\n            color=discord.Color.red(),\n        )\n\n        if thread_id:\n            await itx.guild.get_thread(thread_id).send(embed=embed)\n            original = await itx.guild.get_channel(utils.PLAYTEST).fetch_message(\n                message_id\n            )\n            embed = self.edit_medals(original.embeds[0], gold, silver, bronze)\n            await original.edit(embed=embed)\n        else:\n            await itx.guild.get_channel(utils.NEWSFEED).send(embed=embed)\n\n    @commands.Cog.listener()\n    async def on_newsfeed_archive(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: str,\n        value: str,\n    ):\n        if value == \"archive\":\n            description = (\n                \"This map will not appear in the map search command.\\n\"\n                \"You cannot submit records for archived maps.\"\n            )\n        else:\n            description = (\n                \"This map will now appear in the map search command \"\n                \"and be eligible for record submissions.\"\n            )\n        embed = utils.GenjiEmbed(\n            title=f\"{map_code} has been {value}d.\",\n            description=description,\n            color=discord.Color.red(),\n        )\n        await itx.guild.get_channel(utils.NEWSFEED).send(embed=embed)\n\n    commands.Cog.listener()\n\n    @commands.Cog.listener()\n    async def on_newsfeed_map_edit(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: str,\n        values: dict[str, str],\n        thread_id: int | None = None,\n        message_id: int | None = None,\n    ):\n        description = \">>> \"\n        for k, v in values.items():\n            description += f\"`{k}` {v}\\n\"\n\n        embed = utils.GenjiEmbed(\n            title=f\"{map_code} has been changed:\",\n            description=description,\n            color=discord.Color.red(),\n        )\n        if thread_id:\n            await itx.guild.get_thread(thread_id).send(embed=embed)\n            original = await itx.guild.get_channel(utils.PLAYTEST).fetch_message(\n                message_id\n            )\n            embed = None\n            for k, v in values.items():\n                if k == \"Desc\":\n                    embed = self.edit_description(original.embeds[0], v)\n                else:\n                    embed = self.edit_embed(original.embeds[0], k, v)\n            await original.edit(embed=embed)\n        else:\n            await itx.guild.get_channel(utils.NEWSFEED).send(embed=embed)\n\n    @staticmethod\n    def edit_embed(embed: discord.Embed, field: str, value: str) -> discord.Embed:\n        embed.description = re.sub(\n            f\"┣ `{field}\" + r\"` (.+)\\n┣\",\n            f\"┣ `{field}` {value}\\n┣\",\n            embed.description,\n        )\n        return embed\n\n    @staticmethod\n    def edit_description(embed: discord.Embed, value: str) -> discord.Embed:\n        embed.description = re.sub(\n            f\"┗ `Desc` (.+)\",\n            f\"┗ `Desc` {value}\",\n            embed.description,\n        )\n        return embed\n\n    @staticmethod\n    def edit_medals(embed: discord.Embed, gold, silver, bronze) -> discord.Embed:\n        medals_txt = (\n            f\"┣ `Medals` \"\n            f\"{utils.FULLY_VERIFIED_GOLD} {gold} | \"\n            f\"{utils.FULLY_VERIFIED_SILVER} {silver} | \"\n            f\"{utils.FULLY_VERIFIED_BRONZE} {bronze}\\n┗\"\n        )\n        if bool(re.search(\"`Medals`\", embed.description)):\n            embed.description = re.sub(\n                r\"┣ `Medals` (.+)\\n┗\",\n                medals_txt,\n                embed.description,\n            )\n        else:\n            embed.description = re.sub(\n                r\"┗\",\n                medals_txt,\n                embed.description,\n            )\n        return embed\n\n\nasync def setup(bot: Genji) -> None:\n    await bot.add_cog(BotEvents(bot))\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "995f8d5033dee7e5e47a71127c2a8130e300032f83a743eba47a19e444816ab5"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "cogs/personal.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 1077,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport typing\n\nimport discord\nfrom discord import app_commands\nfrom discord.ext import commands\n\nimport utils\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nclass Personal(commands.Cog):\n    @app_commands.command(name=\"name\")\n    @app_commands.guilds(discord.Object(id=utils.GUILD_ID))\n    async def nickname_change(\n        self,\n        itx: core.Interaction[core.Genji],\n        nickname: app_commands.Range[str, 1, 25],\n    ) -> None:\n        \"\"\"\n        Change your display name in bot commands.\n\n        Args:\n            itx: Interaction\n            nickname: New nickname\n        \"\"\"\n        await itx.response.send_message(\n            f\"Changing your nick name from {itx.client.all_users[itx.user.id]['nickname']} to {nickname}\"\n        )\n        await itx.client.database.set(\n            \"UPDATE users SET nickname=$2 WHERE user_id=$1\",\n            itx.user.id,\n            nickname,\n        )\n        itx.client.all_users[itx.user.id][\"nickname\"] = nickname\n\n\nasync def setup(bot: core.Genji):\n    await bot.add_cog(Personal(bot))\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 1077,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport typing\n\nimport discord\nfrom discord import app_commands\nfrom discord.ext import commands\n\nimport utils\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nclass Personal(commands.Cog):\n    @app_commands.command(name=\"name\")\n    @app_commands.guilds(discord.Object(id=utils.GUILD_ID))\n    async def nickname_change(\n        self,\n        itx: core.Interaction[core.Genji],\n        nickname: app_commands.Range[str, 1, 25],\n    ) -> None:\n        \"\"\"\n        Change your display name in bot commands.\n\n        Args:\n            itx: Interaction\n            nickname: New nickname\n        \"\"\"\n        await itx.response.send_message(\n            f\"Changing your nick name from {itx.client.all_users[itx.user.id]['nickname']} to {nickname}\"\n        )\n        await itx.client.database.set(\n            \"UPDATE users SET nickname=$2 WHERE user_id=$1\",\n            itx.user.id,\n            nickname,\n        )\n        itx.client.all_users[itx.user.id][\"nickname\"] = nickname\n\n\nasync def setup(bot: core.Genji):\n    await bot.add_cog(Personal(bot))\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "4e0bc17c6b28304e4e4216ee7a1761ab18b99d028aa59f9b6daaeb6cdaaea6bc"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "cogs/records.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 12038,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport typing\n\nimport discord\nfrom discord import app_commands\nfrom discord.ext import commands\n\nimport cogs\nimport database\nimport utils\nimport views\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nclass Records(commands.Cog):\n    \"\"\"Records\"\"\"\n\n    def __init__(self, bot: core.Genji):\n        self.bot = bot\n        self.bot.tree.add_command(\n            app_commands.ContextMenu(\n                name=\"personal-records\",\n                callback=self.pr_context_callback,\n                guild_ids=[utils.GUILD_ID],\n            )\n        )\n        self.bot.tree.add_command(\n            app_commands.ContextMenu(\n                name=\"world-records\",\n                callback=self.wr_context_callback,\n                guild_ids=[utils.GUILD_ID],\n            )\n        )\n\n    @app_commands.command()\n    @app_commands.guilds(discord.Object(id=utils.GUILD_ID))\n    @app_commands.autocomplete(user=cogs.users_autocomplete)\n    async def summary(\n        self,\n        itx: core.Interaction[core.Genji],\n        user: str | None = None,\n    ):\n        \"\"\"Display a summary of your records and associated difficulties/medals\n\n        Args:\n            itx: Interaction\n            user: User\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n        if not user:\n            user = itx.user\n\n        if isinstance(user, discord.Member):\n            user = user.id\n        else:\n            user = int(user)\n\n        data = await utils.get_completions_data(itx.client, user)\n        description = \"\"\n        for diff in utils.DIFFICULTIES:\n\n            if diff not in data:\n                completions, gold, silver, bronze = 0, 0, 0, 0\n            else:\n                completions, gold, silver, bronze = data[diff]\n\n            description += (\n                f\"```{diff}```\"\n                f\"` Total` {completions}\\n\"\n                f\"`  Gold` {gold} {utils.FULLY_VERIFIED_GOLD}\\n\"\n                f\"`Silver` {silver} {utils.FULLY_VERIFIED_SILVER}\\n\"\n                f\"`Bronze` {bronze} {utils.FULLY_VERIFIED_BRONZE}\\n\\n\"\n            )\n\n        embed = utils.GenjiEmbed(\n            title=\"Summary\",\n            description=description,\n        )\n        await itx.edit_original_response(embed=embed)\n\n    @app_commands.command(name=\"submit-record\")\n    @app_commands.guilds(discord.Object(id=utils.GUILD_ID))\n    @app_commands.autocomplete(\n        map_code=cogs.map_codes_autocomplete,\n    )\n    async def submit_record(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeRecordsTransformer],\n        record: app_commands.Transform[float, utils.RecordTransformer],\n        screenshot: discord.Attachment,\n        video: app_commands.Transform[str, utils.URLTransformer] | None,\n    ) -> None:\n        \"\"\"\n        Submit a record to the database. Video proof is required for full verification!\n\n        Args:\n            itx: Interaction\n            map_code: Overwatch share code\n            record: Record in HH:MM:SS.ss format\n            screenshot: Screenshot of completion\n            video: Video of play through. REQUIRED FOR FULL VERIFICATION!\n        \"\"\"\n        await itx.response.defer(ephemeral=False)\n        if map_code not in itx.client.map_cache.keys():\n            raise utils.InvalidMapCodeError\n\n        if itx.client.map_cache[map_code][\"archived\"] is True:\n            raise utils.ArchivedMap\n\n        search = [\n            x\n            async for x in itx.client.database.get(\n                \"SELECT record, screenshot, video, verified, m.map_name \"\n                \"FROM records r LEFT JOIN maps m on r.map_code = m.map_code \"\n                \"WHERE r.map_code=$1 AND user_id=$2;\",\n                map_code,\n                itx.user.id,\n            )\n        ]\n\n        if search:\n            search = search[0]\n\n            if search.video:\n                if record >= search.record:\n                    raise utils.RecordNotFasterError\n                if record < search.record and not video:\n                    overwrite_view = views.RecordVideoConfirmCompletion(itx)\n                    await itx.edit_original_response(\n                        content=(\n                            f\"{itx.user.mention}, your last submission was fully verified, \"\n                            f\"are you sure you want to overwrite your last record \"\n                            f\"with one that can only be partially verified?\"\n                        ),\n                        view=overwrite_view,\n                    )\n                    await overwrite_view.wait()\n                    if not overwrite_view.value:\n                        return\n\n            if not search.video and (record >= search.record) and not video:\n                raise utils.RecordNotFasterError\n\n        user = itx.client.all_users[itx.user.id]\n        view = views.ConfirmCompletion(\n            await utils.Roles.find_highest_rank(itx.user) + 1,\n            itx,\n            f\"{utils.TIME} Waiting for verification...\\n\",\n        )\n\n        new_screenshot = await screenshot.to_file(filename=\"image.png\")\n\n        embed = utils.record_embed(\n            {\n                \"map_code\": map_code,\n                \"record\": record,\n                \"video\": video,\n                \"user_name\": user[\"nickname\"],\n                \"user_url\": itx.user.display_avatar.url,\n            }\n        )\n        channel_msg = await itx.edit_original_response(\n            content=f\"{itx.user.mention}, is this correct?\",\n            embed=embed,\n            view=view,\n            attachments=[new_screenshot],\n        )\n        await view.wait()\n        if not view.value:\n            return\n        new_screenshot2 = await screenshot.to_file(filename=\"image.png\")\n\n        verification_msg = await itx.client.get_channel(utils.VERIFICATION_QUEUE).send(\n            content=\"**ALERT:** VIDEO SUBMISSION\" if video else None,\n            embed=embed,\n            file=new_screenshot2,\n        )\n\n        v_view = views.VerificationView()\n        await verification_msg.edit(view=v_view)\n        await itx.client.database.set(\n            \"\"\"\n            INSERT INTO records_queue \n            (map_code, user_id, record, screenshot,\n            video, message_id, channel_id, hidden_id, rating) \n            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\n            \"\"\",\n            map_code,\n            itx.user.id,\n            record,\n            channel_msg.jump_url,\n            video,\n            channel_msg.id,\n            channel_msg.channel.id,\n            verification_msg.id,\n            None if not getattr(view, \"quality\", None) else int(view.quality.values[0]),\n        )\n\n    @app_commands.command(name=\"leaderboard\")\n    @app_commands.guilds(discord.Object(id=utils.GUILD_ID))\n    @app_commands.autocomplete(\n        map_code=cogs.map_codes_autocomplete,\n    )\n    async def view_records(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeRecordsTransformer],\n        verified: bool | None = True,\n    ) -> None:\n        \"\"\"\n        View leaderboard of any map in the database.\n\n        Args:\n            itx: Interaction\n            map_code: Overwatch share code\n            verified: Only show fully verified video submissions.\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n        if map_code not in itx.client.map_cache.keys():\n            raise utils.InvalidMapCodeError\n\n        query = f\"\"\"\n        SELECT * FROM (\n        SELECT u.nickname, \n               record, \n               screenshot,\n               video, \n               verified,\n               r.map_code,\n               r.channel_id,\n               r.message_id,\n               m.map_name\n        FROM records r\n            LEFT JOIN users u on r.user_id = u.user_id\n            LEFT JOIN maps m on m.map_code = r.map_code\n        ) as ranks\n        LEFT JOIN map_medals mm ON ranks.map_code = mm.map_code\n        WHERE ranks.map_code=$1 \n        AND ($2 IS FALSE OR verified=$2)\n        ORDER BY record;\n        \"\"\"\n\n        records: list[database.DotRecord | None] = [\n            x async for x in itx.client.database.get(query, map_code, verified)\n        ]\n        if not records:\n            raise utils.NoRecordsFoundError\n\n        embeds = utils.all_levels_records_embed(records, f\"Leaderboard - {map_code}\")\n\n        view = views.Paginator(embeds, itx.user)\n        await view.start(itx)\n\n    @app_commands.command(name=\"personal-records\")\n    @app_commands.guilds(discord.Object(id=utils.GUILD_ID))\n    @app_commands.autocomplete(user=cogs.users_autocomplete)\n    async def personal_records_slash(\n        self,\n        itx: core.Interaction[core.Genji],\n        user: str | None = None,\n        wr_only: bool | None = None,\n    ):\n        \"\"\"\n        Show all records a specific user has (fully AND partially verified)\n\n        Args:\n            itx: Interaction\n            user: User\n            wr_only: Only show world records\n        \"\"\"\n        await self._personal_records(itx, user, wr_only)\n\n    async def pr_context_callback(\n        self, itx: core.Interaction[core.Genji], user: discord.Member\n    ):\n        await self._personal_records(itx, user, False)\n\n    async def wr_context_callback(\n        self, itx: core.Interaction[core.Genji], user: discord.Member\n    ):\n        await self._personal_records(itx, user, True)\n\n    @staticmethod\n    async def _personal_records(\n        itx: core.Interaction[core.Genji],\n        user: discord.Member | str,\n        wr_only: bool,\n    ):\n        await itx.response.defer(ephemeral=True)\n        if not user:\n            user = itx.user\n\n        if isinstance(user, discord.Member):\n            user = user.id\n        else:\n            user = int(user)\n\n        query = f\"\"\"\n        WITH map AS (SELECT m.map_code,\n                    m.map_name,\n                    string_agg(distinct (nickname), ', ') as creators\n             FROM maps m\n                      LEFT JOIN map_creators mc on m.map_code = mc.map_code\n                      LEFT JOIN users u on mc.user_id = u.user_id\n             GROUP BY m.map_code, m.map_name),\n        ranks AS (SELECT u.nickname,\n                        r.user_id,\n                        record,\n                        screenshot,\n                        video,\n                        verified,\n                        r.map_code,\n                        r.channel_id,\n                        r.message_id,\n                        map.map_name,\n                        map.creators,\n                        RANK() OVER (\n                            PARTITION BY r.map_code\n                            ORDER BY record\n                        ) rank_num\n                        FROM records r\n                        LEFT JOIN users u\n                              on r.user_id = u.user_id\n                        LEFT JOIN map on map.map_code = r.map_code)\n        SELECT \n            nickname,\n            user_id,\n            record,\n            screenshot,\n            video,\n            verified,\n            ranks.map_code,\n            channel_id,\n            message_id,\n            map_name,\n            creators,\n            rank_num,\n            gold,\n            silver,\n            bronze\n        FROM ranks\n                 LEFT JOIN map_medals mm ON ranks.map_code = mm.map_code\n        WHERE user_id = $1 \n        AND ($2 IS FALSE OR rank_num = 1)\n        ORDER BY ranks.map_code;     \n        \"\"\"\n        records: list[database.DotRecord | None] = [\n            x async for x in itx.client.database.get(query, user, wr_only)\n        ]\n\n        if not records:\n            raise utils.NoRecordsFoundError\n        embeds = utils.pr_records_embed(\n            records,\n            f\"Personal {'World ' if wr_only else ''}Records | {itx.client.all_users[user]['nickname']}\",\n        )\n        view = views.Paginator(embeds, itx.user)\n        await view.start(itx)\n\n\nasync def setup(bot):\n    \"\"\"Add Cog to Discord bot.\"\"\"\n    await bot.add_cog(Records(bot))\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 12038,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport typing\n\nimport discord\nfrom discord import app_commands\nfrom discord.ext import commands\n\nimport cogs\nimport database\nimport utils\nimport views\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nclass Records(commands.Cog):\n    \"\"\"Records\"\"\"\n\n    def __init__(self, bot: core.Genji):\n        self.bot = bot\n        self.bot.tree.add_command(\n            app_commands.ContextMenu(\n                name=\"personal-records\",\n                callback=self.pr_context_callback,\n                guild_ids=[utils.GUILD_ID],\n            )\n        )\n        self.bot.tree.add_command(\n            app_commands.ContextMenu(\n                name=\"world-records\",\n                callback=self.wr_context_callback,\n                guild_ids=[utils.GUILD_ID],\n            )\n        )\n\n    @app_commands.command()\n    @app_commands.guilds(discord.Object(id=utils.GUILD_ID))\n    @app_commands.autocomplete(user=cogs.users_autocomplete)\n    async def summary(\n        self,\n        itx: core.Interaction[core.Genji],\n        user: str | None = None,\n    ):\n        \"\"\"Display a summary of your records and associated difficulties/medals\n\n        Args:\n            itx: Interaction\n            user: User\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n        if not user:\n            user = itx.user\n\n        if isinstance(user, discord.Member):\n            user = user.id\n        else:\n            user = int(user)\n\n        data = await utils.get_completions_data(itx.client, user)\n        description = \"\"\n        for diff in utils.DIFFICULTIES:\n\n            if diff not in data:\n                completions, gold, silver, bronze = 0, 0, 0, 0\n            else:\n                completions, gold, silver, bronze = data[diff]\n\n            description += (\n                f\"```{diff}```\"\n                f\"` Total` {completions}\\n\"\n                f\"`  Gold` {gold} {utils.FULLY_VERIFIED_GOLD}\\n\"\n                f\"`Silver` {silver} {utils.FULLY_VERIFIED_SILVER}\\n\"\n                f\"`Bronze` {bronze} {utils.FULLY_VERIFIED_BRONZE}\\n\\n\"\n            )\n\n        embed = utils.GenjiEmbed(\n            title=\"Summary\",\n            description=description,\n        )\n        await itx.edit_original_response(embed=embed)\n\n    @app_commands.command(name=\"submit-record\")\n    @app_commands.guilds(discord.Object(id=utils.GUILD_ID))\n    @app_commands.autocomplete(\n        map_code=cogs.map_codes_autocomplete,\n    )\n    async def submit_record(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeRecordsTransformer],\n        record: app_commands.Transform[float, utils.RecordTransformer],\n        screenshot: discord.Attachment,\n        video: app_commands.Transform[str, utils.URLTransformer] | None,\n    ) -> None:\n        \"\"\"\n        Submit a record to the database. Video proof is required for full verification!\n\n        Args:\n            itx: Interaction\n            map_code: Overwatch share code\n            record: Record in HH:MM:SS.ss format\n            screenshot: Screenshot of completion\n            video: Video of play through. REQUIRED FOR FULL VERIFICATION!\n        \"\"\"\n        await itx.response.defer(ephemeral=False)\n        if map_code not in itx.client.map_cache.keys():\n            raise utils.InvalidMapCodeError\n\n        if itx.client.map_cache[map_code][\"archived\"] is True:\n            raise utils.ArchivedMap\n\n        search = [\n            x\n            async for x in itx.client.database.get(\n                \"SELECT record, screenshot, video, verified, m.map_name \"\n                \"FROM records r LEFT JOIN maps m on r.map_code = m.map_code \"\n                \"WHERE r.map_code=$1 AND user_id=$2;\",\n                map_code,\n                itx.user.id,\n            )\n        ]\n\n        if search:\n            search = search[0]\n\n            if search.video:\n                if record >= search.record:\n                    raise utils.RecordNotFasterError\n                if record < search.record and not video:\n                    overwrite_view = views.RecordVideoConfirmCompletion(itx)\n                    await itx.edit_original_response(\n                        content=(\n                            f\"{itx.user.mention}, your last submission was fully verified, \"\n                            f\"are you sure you want to overwrite your last record \"\n                            f\"with one that can only be partially verified?\"\n                        ),\n                        view=overwrite_view,\n                    )\n                    await overwrite_view.wait()\n                    if not overwrite_view.value:\n                        return\n\n            if not search.video and (record >= search.record) and not video:\n                raise utils.RecordNotFasterError\n\n        user = itx.client.all_users[itx.user.id]\n        view = views.ConfirmCompletion(\n            await utils.Roles.find_highest_rank(itx.user) + 1,\n            itx,\n            f\"{utils.TIME} Waiting for verification...\\n\",\n        )\n\n        new_screenshot = await screenshot.to_file(filename=\"image.png\")\n\n        embed = utils.record_embed(\n            {\n                \"map_code\": map_code,\n                \"record\": record,\n                \"video\": video,\n                \"user_name\": user[\"nickname\"],\n                \"user_url\": itx.user.display_avatar.url,\n            }\n        )\n        channel_msg = await itx.edit_original_response(\n            content=f\"{itx.user.mention}, is this correct?\",\n            embed=embed,\n            view=view,\n            attachments=[new_screenshot],\n        )\n        await view.wait()\n        if not view.value:\n            return\n        new_screenshot2 = await screenshot.to_file(filename=\"image.png\")\n\n        verification_msg = await itx.client.get_channel(utils.VERIFICATION_QUEUE).send(\n            content=\"**ALERT:** VIDEO SUBMISSION\" if video else None,\n            embed=embed,\n            file=new_screenshot2,\n        )\n\n        v_view = views.VerificationView()\n        await verification_msg.edit(view=v_view)\n        await itx.client.database.set(\n            \"\"\"\n            INSERT INTO records_queue \n            (map_code, user_id, record, screenshot,\n            video, message_id, channel_id, hidden_id, rating) \n            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\n            \"\"\",\n            map_code,\n            itx.user.id,\n            record,\n            channel_msg.jump_url,\n            video,\n            channel_msg.id,\n            channel_msg.channel.id,\n            verification_msg.id,\n            None if not getattr(view, \"quality\", None) else int(view.quality.values[0]),\n        )\n\n    @app_commands.command(name=\"leaderboard\")\n    @app_commands.guilds(discord.Object(id=utils.GUILD_ID))\n    @app_commands.autocomplete(\n        map_code=cogs.map_codes_autocomplete,\n    )\n    async def view_records(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeRecordsTransformer],\n        verified: bool | None = True,\n    ) -> None:\n        \"\"\"\n        View leaderboard of any map in the database.\n\n        Args:\n            itx: Interaction\n            map_code: Overwatch share code\n            verified: Only show fully verified video submissions.\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n        if map_code not in itx.client.map_cache.keys():\n            raise utils.InvalidMapCodeError\n\n        query = f\"\"\"\n        SELECT * FROM (\n        SELECT u.nickname, \n               record, \n               screenshot,\n               video, \n               verified,\n               r.map_code,\n               r.channel_id,\n               r.message_id,\n               m.map_name\n        FROM records r\n            LEFT JOIN users u on r.user_id = u.user_id\n            LEFT JOIN maps m on m.map_code = r.map_code\n        ) as ranks\n        LEFT JOIN map_medals mm ON ranks.map_code = mm.map_code\n        WHERE ranks.map_code=$1 \n        AND ($2 IS FALSE OR verified=$2)\n        ORDER BY record;\n        \"\"\"\n\n        records: list[database.DotRecord | None] = [\n            x async for x in itx.client.database.get(query, map_code, verified)\n        ]\n        if not records:\n            raise utils.NoRecordsFoundError\n\n        embeds = utils.all_levels_records_embed(records, f\"Leaderboard - {map_code}\")\n\n        view = views.Paginator(embeds, itx.user)\n        await view.start(itx)\n\n    @app_commands.command(name=\"personal-records\")\n    @app_commands.guilds(discord.Object(id=utils.GUILD_ID))\n    @app_commands.autocomplete(user=cogs.users_autocomplete)\n    async def personal_records_slash(\n        self,\n        itx: core.Interaction[core.Genji],\n        user: str | None = None,\n        wr_only: bool | None = None,\n    ):\n        \"\"\"\n        Show all records a specific user has (fully AND partially verified)\n\n        Args:\n            itx: Interaction\n            user: User\n            wr_only: Only show world records\n        \"\"\"\n        await self._personal_records(itx, user, wr_only)\n\n    async def pr_context_callback(\n        self, itx: core.Interaction[core.Genji], user: discord.Member\n    ):\n        await self._personal_records(itx, user, False)\n\n    async def wr_context_callback(\n        self, itx: core.Interaction[core.Genji], user: discord.Member\n    ):\n        await self._personal_records(itx, user, True)\n\n    @staticmethod\n    async def _personal_records(\n        itx: core.Interaction[core.Genji],\n        user: discord.Member | str,\n        wr_only: bool,\n    ):\n        await itx.response.defer(ephemeral=True)\n        if not user:\n            user = itx.user\n\n        if isinstance(user, discord.Member):\n            user = user.id\n        else:\n            user = int(user)\n\n        query = f\"\"\"\n        WITH map AS (SELECT m.map_code,\n                    m.map_name,\n                    string_agg(distinct (nickname), ', ') as creators\n             FROM maps m\n                      LEFT JOIN map_creators mc on m.map_code = mc.map_code\n                      LEFT JOIN users u on mc.user_id = u.user_id\n             GROUP BY m.map_code, m.map_name),\n        ranks AS (SELECT u.nickname,\n                        r.user_id,\n                        record,\n                        screenshot,\n                        video,\n                        verified,\n                        r.map_code,\n                        r.channel_id,\n                        r.message_id,\n                        map.map_name,\n                        map.creators,\n                        RANK() OVER (\n                            PARTITION BY r.map_code\n                            ORDER BY record\n                        ) rank_num\n                        FROM records r\n                        LEFT JOIN users u\n                              on r.user_id = u.user_id\n                        LEFT JOIN map on map.map_code = r.map_code)\n        SELECT \n            nickname,\n            user_id,\n            record,\n            screenshot,\n            video,\n            verified,\n            ranks.map_code,\n            channel_id,\n            message_id,\n            map_name,\n            creators,\n            rank_num,\n            gold,\n            silver,\n            bronze\n        FROM ranks\n                 LEFT JOIN map_medals mm ON ranks.map_code = mm.map_code\n        WHERE user_id = $1 \n        AND ($2 IS FALSE OR rank_num = 1)\n        ORDER BY ranks.map_code;     \n        \"\"\"\n        records: list[database.DotRecord | None] = [\n            x async for x in itx.client.database.get(query, user, wr_only)\n        ]\n\n        if not records:\n            raise utils.NoRecordsFoundError\n        embeds = utils.pr_records_embed(\n            records,\n            f\"Personal {'World ' if wr_only else ''}Records | {itx.client.all_users[user]['nickname']}\",\n        )\n        view = views.Paginator(embeds, itx.user)\n        await view.start(itx)\n\n\nasync def setup(bot):\n    \"\"\"Add Cog to Discord bot.\"\"\"\n    await bot.add_cog(Records(bot))\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "8781ec2bf90b93b14dbb0ab65da36d78a56075447d6fe5f65857b06f0da0be3e"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "cogs/test.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 3833,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport typing\n\nimport discord\nfrom discord import app_commands\nfrom discord.ext import commands\n\nimport utils\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nclass Test(commands.Cog):\n    @commands.command()\n    @commands.guild_only()\n    @commands.is_owner()\n    async def sync(\n        self,\n        ctx: commands.Context,\n        guilds: commands.Greedy[discord.Object],\n        spec: typing.Literal[\"~\", \"*\", \"^\"] | None = None,\n    ) -> None:\n        \"\"\"\n        ?sync -> global sync\n        ?sync ~ -> sync current guild\n        ?sync * -> copies all global app commands to current guild and syncs\n        ?sync ^ -> clears all commands from the current\n                        guild target and syncs (removes guild commands)\n        ?sync id_1 id_2 -> syncs guilds with id 1 and 2\n        >sync $ -> Clears global commands\n        \"\"\"\n        if not guilds:\n            if spec == \"~\":\n                synced = await ctx.bot.tree.sync(guild=ctx.guild)\n            elif spec == \"*\":\n                ctx.bot.tree.copy_global_to(guild=ctx.guild)\n                synced = await ctx.bot.tree.sync(guild=ctx.guild)\n            elif spec == \"^\":\n                ctx.bot.tree.clear_commands(guild=ctx.guild)\n                await ctx.bot.tree.sync(guild=ctx.guild)\n                synced = []\n            elif spec == \"$\":\n                ctx.bot.tree.clear_commands(guild=ctx.guild)\n                await ctx.bot.tree.sync()\n                synced = []\n            else:\n                synced = await ctx.bot.tree.sync()\n\n            await ctx.send(\n                f\"Synced {len(synced)} commands \"\n                f\"{'globally' if spec is None else 'to the current guild.'}\"\n            )\n            return\n\n        ret = 0\n        for guild in guilds:\n            try:\n                await ctx.bot.tree.sync(guild=guild)\n            except discord.HTTPException:\n                pass\n            else:\n                ret += 1\n\n        await ctx.send(f\"Synced the tree to {ret}/{len(guilds)}.\")\n\n    @commands.command()\n    @commands.is_owner()\n    async def xx(self, ctx: commands.Context[core.Genji]):\n        members = [(member.id, member.name[:25]) for member in ctx.guild.members]\n        await ctx.bot.database.set_many(\n            \"INSERT INTO users (user_id, nickname, alertable) VALUES ($1, $2, true)\",\n            [(_id, nick) for _id, nick in members],\n        )\n        await ctx.send(\"done\")\n\n    @commands.command()\n    @commands.is_owner()\n    async def xxx(self, ctx: commands.Context[core.Genji]):\n        members = [(member.id, member.name[:25]) for member in ctx.guild.members]\n        await ctx.bot.database.set_many(\n            \"INSERT INTO users (user_id, nickname, alertable) VALUES ($1, $2, true)\",\n            [(_id, nick) for _id, nick in members],\n        )\n        await ctx.send(\"done\")\n\n    @commands.command()\n    @commands.is_owner()\n    async def placeholder(self, ctx: commands.Context[core.Genji]):\n        await ctx.send(\"placeholder\")\n\n    @commands.command()\n    @commands.is_owner()\n    async def log(\n        self,\n        ctx: commands.Context[core.Genji],\n        level: typing.Literal[\"debug\", \"info\", \"DEBUG\", \"INFO\"],\n    ):\n        ctx.bot.logger.setLevel(level.upper())\n        await ctx.message.delete()\n\n    # @app_commands.command(name=\"test\")\n    # @app_commands.guilds(discord.Object(id=utils.GUILD_ID))\n    # async def testing_slash(self, itx: core.Interaction[core.Genji]) -> None:\n    #     command = itx.client.tree.get_app_command(\"submit-record\", guild=utils.GUILD_ID)\n    #\n    #     embed = utils.GenjiEmbed(\n    #         title=\"Test Help\", description=f\"Use this comman {command.mention}\"\n    #     )\n    #\n    #     await itx.response.send_message(embed=embed)\n\n\nasync def setup(bot: core.Genji):\n    await bot.add_cog(Test(bot))\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 3833,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport typing\n\nimport discord\nfrom discord import app_commands\nfrom discord.ext import commands\n\nimport utils\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nclass Test(commands.Cog):\n    @commands.command()\n    @commands.guild_only()\n    @commands.is_owner()\n    async def sync(\n        self,\n        ctx: commands.Context,\n        guilds: commands.Greedy[discord.Object],\n        spec: typing.Literal[\"~\", \"*\", \"^\"] | None = None,\n    ) -> None:\n        \"\"\"\n        ?sync -> global sync\n        ?sync ~ -> sync current guild\n        ?sync * -> copies all global app commands to current guild and syncs\n        ?sync ^ -> clears all commands from the current\n                        guild target and syncs (removes guild commands)\n        ?sync id_1 id_2 -> syncs guilds with id 1 and 2\n        >sync $ -> Clears global commands\n        \"\"\"\n        if not guilds:\n            if spec == \"~\":\n                synced = await ctx.bot.tree.sync(guild=ctx.guild)\n            elif spec == \"*\":\n                ctx.bot.tree.copy_global_to(guild=ctx.guild)\n                synced = await ctx.bot.tree.sync(guild=ctx.guild)\n            elif spec == \"^\":\n                ctx.bot.tree.clear_commands(guild=ctx.guild)\n                await ctx.bot.tree.sync(guild=ctx.guild)\n                synced = []\n            elif spec == \"$\":\n                ctx.bot.tree.clear_commands(guild=ctx.guild)\n                await ctx.bot.tree.sync()\n                synced = []\n            else:\n                synced = await ctx.bot.tree.sync()\n\n            await ctx.send(\n                f\"Synced {len(synced)} commands \"\n                f\"{'globally' if spec is None else 'to the current guild.'}\"\n            )\n            return\n\n        ret = 0\n        for guild in guilds:\n            try:\n                await ctx.bot.tree.sync(guild=guild)\n            except discord.HTTPException:\n                pass\n            else:\n                ret += 1\n\n        await ctx.send(f\"Synced the tree to {ret}/{len(guilds)}.\")\n\n    @commands.command()\n    @commands.is_owner()\n    async def xx(self, ctx: commands.Context[core.Genji]):\n        members = [(member.id, member.name[:25]) for member in ctx.guild.members]\n        await ctx.bot.database.set_many(\n            \"INSERT INTO users (user_id, nickname, alertable) VALUES ($1, $2, true)\",\n            [(_id, nick) for _id, nick in members],\n        )\n        await ctx.send(\"done\")\n\n    @commands.command()\n    @commands.is_owner()\n    async def xxx(self, ctx: commands.Context[core.Genji]):\n        members = [(member.id, member.name[:25]) for member in ctx.guild.members]\n        await ctx.bot.database.set_many(\n            \"INSERT INTO users (user_id, nickname, alertable) VALUES ($1, $2, true)\",\n            [(_id, nick) for _id, nick in members],\n        )\n        await ctx.send(\"done\")\n\n    @commands.command()\n    @commands.is_owner()\n    async def placeholder(self, ctx: commands.Context[core.Genji]):\n        await ctx.send(\"placeholder\")\n\n    @commands.command()\n    @commands.is_owner()\n    async def log(\n        self,\n        ctx: commands.Context[core.Genji],\n        level: typing.Literal[\"debug\", \"info\", \"DEBUG\", \"INFO\"],\n    ):\n        ctx.bot.logger.setLevel(level.upper())\n        await ctx.message.delete()\n\n    # @app_commands.command(name=\"test\")\n    # @app_commands.guilds(discord.Object(id=utils.GUILD_ID))\n    # async def testing_slash(self, itx: core.Interaction[core.Genji]) -> None:\n    #     command = itx.client.tree.get_app_command(\"submit-record\", guild=utils.GUILD_ID)\n    #\n    #     embed = utils.GenjiEmbed(\n    #         title=\"Test Help\", description=f\"Use this comman {command.mention}\"\n    #     )\n    #\n    #     await itx.response.send_message(embed=embed)\n\n\nasync def setup(bot: core.Genji):\n    await bot.add_cog(Test(bot))\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "e88846dde605a1fec5d940580cace57cdd88c1aa3bb08683cc8fce33d8c1d74f"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "cogs/tasks.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 6414,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport typing\n\nimport discord\nfrom discord import app_commands\nfrom discord.ext import commands, tasks\n\nimport utils.utils\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nclass Tasks(commands.Cog):\n    def __init__(self, bot: core.Genji):\n        self.bot = bot\n        self.cache_all_users.start()\n        self.cache_map_code_choices.start()\n        self.cache_map_names.start()\n        self.cache_map_types.start()\n        self.cache_map_data.start()\n        self.cache_tags.start()\n        self.cache_map_mechanics.start()\n        self.cache_map_restrictions.start()\n\n    @commands.Cog.listener()\n    async def on_code_cache_refresh(self):\n        self.cache_map_code_choices.restart()\n\n    @commands.command()\n    @commands.is_owner()\n    async def refresh_cache(\n        self,\n        ctx: commands.Context[core.Genji],\n    ):\n        # TODO: Reload cache\n        self.cache_all_users.restart()\n        self.cache_map_code_choices.restart()\n        self.cache_map_names.restart()\n        self.cache_map_types.restart()\n        self.cache_map_data.restart()\n        self.cache_tags.restart()\n        self.cache_map_mechanics.restart()\n        self.cache_map_restrictions.restart()\n        await ctx.message.delete()\n\n    @tasks.loop(hours=24, count=1)\n    async def cache_map_code_choices(self):\n        self.bot.logger.debug(\"Caching map codes...\")\n        self.bot.map_codes_choices = [\n            app_commands.Choice(name=x.map_code, value=x.map_code)\n            async for x in self.bot.database.get(\n                \"SELECT map_code FROM maps ORDER BY 1;\",\n            )\n        ]\n\n        self.bot.logger.debug(\"Map codes cached.\")\n\n    @tasks.loop(hours=24, count=1)\n    async def cache_map_names(self):\n        self.bot.logger.debug(\"Caching map names...\")\n        self.bot.map_names_choices = [\n            app_commands.Choice(name=x.name, value=x.name)\n            async for x in self.bot.database.get(\n                \"SELECT * FROM all_map_names ORDER BY 1;\",\n            )\n        ]\n        self.bot.map_names = [x.name for x in self.bot.map_names_choices]\n        self.bot.logger.debug(\"Map names cached.\")\n\n    @tasks.loop(hours=24, count=1)\n    async def cache_map_types(self):\n        self.bot.logger.debug(\"Caching map types...\")\n        self.bot.map_types_options = [\n            discord.SelectOption(label=x.name, value=x.name)\n            async for x in self.bot.database.get(\n                \"SELECT * FROM all_map_types ORDER BY order_num;\",\n            )\n        ]\n        self.bot.map_types = [x.value for x in self.bot.map_types_options]\n        self.bot.map_types_choices = [\n            app_commands.Choice(name=x.value, value=x.value)\n            for x in self.bot.map_types_options\n        ]\n        self.bot.logger.debug(\"Map types cached.\")\n\n    @tasks.loop(hours=24, count=1)\n    async def cache_map_mechanics(self):\n        self.bot.logger.debug(\"Caching map mechanics...\")\n\n        self.bot.map_mechanics = []\n        self.bot.map_mechanics_options = []\n        self.bot.map_mechanics_choices = []\n\n        async for x in self.bot.database.get(\n            \"SELECT * FROM all_map_mechanics ORDER BY order_num;\",\n        ):\n            self.bot.map_mechanics.append(x.name)\n            self.bot.map_mechanics_options.append(\n                discord.SelectOption(label=x.name, value=x.name)\n            )\n            self.bot.map_mechanics_choices.append(\n                app_commands.Choice(name=x.name, value=x.name)\n            )\n        self.bot.logger.debug(\"Map mechanics cached.\")\n\n    @tasks.loop(hours=24, count=1)\n    async def cache_map_restrictions(self):\n        self.bot.logger.debug(\"Caching map restrictions...\")\n\n        self.bot.map_restrictions_options = []\n        self.bot.map_restrictions = []\n        async for x in self.bot.database.get(\n            \"SELECT * FROM all_map_restrictions ORDER BY order_num;\",\n        ):\n            self.bot.map_restrictions.append(x.name)\n            self.bot.map_restrictions_options.append(\n                discord.SelectOption(label=x.name, value=x.name)\n            )\n        self.bot.logger.debug(\"Map restrictions cached.\")\n\n    @tasks.loop(hours=24, count=1)\n    async def cache_map_data(self):\n        async for x in self.bot.database.get(\n            \"\"\"\n            SELECT DISTINCT \n                            m.map_code,\n                            m.archived,\n                            array_agg(distinct user_id) as user_ids\n            FROM maps m\n                     LEFT JOIN map_creators mc ON m.map_code = mc.map_code\n            GROUP BY m.map_code\n            \"\"\"\n        ):\n            self.bot.map_cache[x.map_code] = utils.utils.MapCacheData(\n                user_ids=[y for y in x.user_ids],\n                archived=x.archived,\n            )\n\n    @tasks.loop(hours=24, count=1)\n    async def cache_all_users(self):\n        self.bot.users_choices = []\n        async for x in self.bot.database.get(\n            \"\"\"\n                SELECT u.user_id, u.nickname, u.alertable, map_code IS NOT NULL is_creator\n                FROM users u\n                         LEFT JOIN map_creators mc on u.user_id = mc.user_id\n                GROUP BY u.user_id, nickname, alertable, is_creator;\n                \"\"\"\n        ):\n            user_data = utils.UserCacheData(\n                nickname=x.nickname,\n                alertable=x.alertable if x.user_id >= 1000000 else False,\n            )\n            choice = app_commands.Choice(name=x.nickname, value=str(x.user_id))\n            self.bot.all_users[x.user_id] = user_data\n            self.bot.users_choices.append(choice)\n\n            if x.is_creator:\n                self.bot.creators[\n                    x.user_id\n                ] = user_data  # TODO: add creator when add role submit_map\n                self.bot.creators_choices.append(choice)\n            # if x.user_id < 1000000:\n            #     self.bot.fake_users[x.user_id] = user_data\n            #     self.bot.fake_users_choices.append(choice)\n\n    @tasks.loop(hours=24, count=1)\n    async def cache_tags(self):\n        self.bot.tag_cache = []\n        self.bot.tag_choices = []\n        async for x in self.bot.database.get(\"SELECT * FROM tags;\"):\n            self.bot.tag_cache.append(x.name)\n            self.bot.tag_choices.append(app_commands.Choice(name=x.name, value=x.name))\n\n\nasync def setup(bot: core.Doom):\n    await bot.add_cog(Tasks(bot))\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 6414,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport typing\n\nimport discord\nfrom discord import app_commands\nfrom discord.ext import commands, tasks\n\nimport utils.utils\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nclass Tasks(commands.Cog):\n    def __init__(self, bot: core.Genji):\n        self.bot = bot\n        self.cache_all_users.start()\n        self.cache_map_code_choices.start()\n        self.cache_map_names.start()\n        self.cache_map_types.start()\n        self.cache_map_data.start()\n        self.cache_tags.start()\n        self.cache_map_mechanics.start()\n        self.cache_map_restrictions.start()\n\n    @commands.Cog.listener()\n    async def on_code_cache_refresh(self):\n        self.cache_map_code_choices.restart()\n\n    @commands.command()\n    @commands.is_owner()\n    async def refresh_cache(\n        self,\n        ctx: commands.Context[core.Genji],\n    ):\n        # TODO: Reload cache\n        self.cache_all_users.restart()\n        self.cache_map_code_choices.restart()\n        self.cache_map_names.restart()\n        self.cache_map_types.restart()\n        self.cache_map_data.restart()\n        self.cache_tags.restart()\n        self.cache_map_mechanics.restart()\n        self.cache_map_restrictions.restart()\n        await ctx.message.delete()\n\n    @tasks.loop(hours=24, count=1)\n    async def cache_map_code_choices(self):\n        self.bot.logger.debug(\"Caching map codes...\")\n        self.bot.map_codes_choices = [\n            app_commands.Choice(name=x.map_code, value=x.map_code)\n            async for x in self.bot.database.get(\n                \"SELECT map_code FROM maps ORDER BY 1;\",\n            )\n        ]\n\n        self.bot.logger.debug(\"Map codes cached.\")\n\n    @tasks.loop(hours=24, count=1)\n    async def cache_map_names(self):\n        self.bot.logger.debug(\"Caching map names...\")\n        self.bot.map_names_choices = [\n            app_commands.Choice(name=x.name, value=x.name)\n            async for x in self.bot.database.get(\n                \"SELECT * FROM all_map_names ORDER BY 1;\",\n            )\n        ]\n        self.bot.map_names = [x.name for x in self.bot.map_names_choices]\n        self.bot.logger.debug(\"Map names cached.\")\n\n    @tasks.loop(hours=24, count=1)\n    async def cache_map_types(self):\n        self.bot.logger.debug(\"Caching map types...\")\n        self.bot.map_types_options = [\n            discord.SelectOption(label=x.name, value=x.name)\n            async for x in self.bot.database.get(\n                \"SELECT * FROM all_map_types ORDER BY order_num;\",\n            )\n        ]\n        self.bot.map_types = [x.value for x in self.bot.map_types_options]\n        self.bot.map_types_choices = [\n            app_commands.Choice(name=x.value, value=x.value)\n            for x in self.bot.map_types_options\n        ]\n        self.bot.logger.debug(\"Map types cached.\")\n\n    @tasks.loop(hours=24, count=1)\n    async def cache_map_mechanics(self):\n        self.bot.logger.debug(\"Caching map mechanics...\")\n\n        self.bot.map_mechanics = []\n        self.bot.map_mechanics_options = []\n        self.bot.map_mechanics_choices = []\n\n        async for x in self.bot.database.get(\n            \"SELECT * FROM all_map_mechanics ORDER BY order_num;\",\n        ):\n            self.bot.map_mechanics.append(x.name)\n            self.bot.map_mechanics_options.append(\n                discord.SelectOption(label=x.name, value=x.name)\n            )\n            self.bot.map_mechanics_choices.append(\n                app_commands.Choice(name=x.name, value=x.name)\n            )\n        self.bot.logger.debug(\"Map mechanics cached.\")\n\n    @tasks.loop(hours=24, count=1)\n    async def cache_map_restrictions(self):\n        self.bot.logger.debug(\"Caching map restrictions...\")\n\n        self.bot.map_restrictions_options = []\n        self.bot.map_restrictions = []\n        async for x in self.bot.database.get(\n            \"SELECT * FROM all_map_restrictions ORDER BY order_num;\",\n        ):\n            self.bot.map_restrictions.append(x.name)\n            self.bot.map_restrictions_options.append(\n                discord.SelectOption(label=x.name, value=x.name)\n            )\n        self.bot.logger.debug(\"Map restrictions cached.\")\n\n    @tasks.loop(hours=24, count=1)\n    async def cache_map_data(self):\n        async for x in self.bot.database.get(\n            \"\"\"\n            SELECT DISTINCT \n                            m.map_code,\n                            m.archived,\n                            array_agg(distinct user_id) as user_ids\n            FROM maps m\n                     LEFT JOIN map_creators mc ON m.map_code = mc.map_code\n            GROUP BY m.map_code\n            \"\"\"\n        ):\n            self.bot.map_cache[x.map_code] = utils.utils.MapCacheData(\n                user_ids=[y for y in x.user_ids],\n                archived=x.archived,\n            )\n\n    @tasks.loop(hours=24, count=1)\n    async def cache_all_users(self):\n        self.bot.users_choices = []\n        async for x in self.bot.database.get(\n            \"\"\"\n                SELECT u.user_id, u.nickname, u.alertable, map_code IS NOT NULL is_creator\n                FROM users u\n                         LEFT JOIN map_creators mc on u.user_id = mc.user_id\n                GROUP BY u.user_id, nickname, alertable, is_creator;\n                \"\"\"\n        ):\n            user_data = utils.UserCacheData(\n                nickname=x.nickname,\n                alertable=x.alertable if x.user_id >= 1000000 else False,\n            )\n            choice = app_commands.Choice(name=x.nickname, value=str(x.user_id))\n            self.bot.all_users[x.user_id] = user_data\n            self.bot.users_choices.append(choice)\n\n            if x.is_creator:\n                self.bot.creators[\n                    x.user_id\n                ] = user_data  # TODO: add creator when add role submit_map\n                self.bot.creators_choices.append(choice)\n            # if x.user_id < 1000000:\n            #     self.bot.fake_users[x.user_id] = user_data\n            #     self.bot.fake_users_choices.append(choice)\n\n    @tasks.loop(hours=24, count=1)\n    async def cache_tags(self):\n        self.bot.tag_cache = []\n        self.bot.tag_choices = []\n        async for x in self.bot.database.get(\"SELECT * FROM tags;\"):\n            self.bot.tag_cache.append(x.name)\n            self.bot.tag_choices.append(app_commands.Choice(name=x.name, value=x.name))\n\n\nasync def setup(bot: core.Doom):\n    await bot.add_cog(Tasks(bot))\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "17935aaac9f6f34700122623523f86144be6a54eb3b07dafed3da738f5b19757"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "cogs/tags.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 2134,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport typing\n\nimport discord\nfrom discord import app_commands\nfrom discord.ext import commands\n\nimport cogs\nimport utils\nimport views\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nclass Tags(discord.ext.commands.GroupCog, group_name=\"tag\"):\n    \"\"\"Tags\"\"\"\n\n    @app_commands.command()\n    @app_commands.autocomplete(name=cogs.tags_autocomplete)\n    @app_commands.checks.cooldown(3, 30, key=lambda i: (i.guild_id, i.user.id))\n    async def view(\n        self,\n        itx: core.Interaction[core.Genji],\n        name: str,\n    ) -> None:\n        \"\"\"View a tag.\"\"\"\n        await itx.response.defer()\n        if name not in itx.client.tag_cache:\n            fuzzed_options = utils.fuzz_multiple(name, itx.client.tag_cache)\n            fuzz_desc = [\n                f\"{utils.NUMBER_EMOJI[i + 1]} - {x}\\n\"\n                for i, x in enumerate(fuzzed_options)\n            ]\n\n            embed = utils.GenjiEmbed(\n                title=\"Tags\",\n                description=(\n                    f\"Couldn't find `{name}`. Did you mean:\\n\" + \"\".join(fuzz_desc)\n                ),\n            )\n            view = views.TagFuzzView(itx, fuzzed_options)\n            await itx.edit_original_response(embed=embed, view=view)\n            await view.wait()\n\n            return\n\n        tag = [\n            x\n            async for x in itx.client.database.get(\n                \"SELECT * FROM tags WHERE name=$1\",\n                name,\n            )\n        ][0]\n        await itx.edit_original_response(\n            content=discord.utils.escape_mentions(f\"**{tag.name}**\\n\\n{tag.value}\")\n        )\n\n    @app_commands.command()\n    async def create(self, itx: core.Interaction[core.Genji]):\n        \"\"\"Create a tag\"\"\"\n        if (\n            itx.guild.get_role(utils.TAG_MAKER) not in itx.user.roles\n            and itx.guild.get_role(utils.STAFF) not in itx.user.roles\n        ):\n            raise utils.NoPermissionsError\n        modal = views.TagCreate()\n        await itx.response.send_modal(modal)\n\n\nasync def setup(bot: core.Genji):\n    await bot.add_cog(Tags(bot), guilds=[discord.Object(id=utils.GUILD_ID)])\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 2134,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport typing\n\nimport discord\nfrom discord import app_commands\nfrom discord.ext import commands\n\nimport cogs\nimport utils\nimport views\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nclass Tags(discord.ext.commands.GroupCog, group_name=\"tag\"):\n    \"\"\"Tags\"\"\"\n\n    @app_commands.command()\n    @app_commands.autocomplete(name=cogs.tags_autocomplete)\n    @app_commands.checks.cooldown(3, 30, key=lambda i: (i.guild_id, i.user.id))\n    async def view(\n        self,\n        itx: core.Interaction[core.Genji],\n        name: str,\n    ) -> None:\n        \"\"\"View a tag.\"\"\"\n        await itx.response.defer()\n        if name not in itx.client.tag_cache:\n            fuzzed_options = utils.fuzz_multiple(name, itx.client.tag_cache)\n            fuzz_desc = [\n                f\"{utils.NUMBER_EMOJI[i + 1]} - {x}\\n\"\n                for i, x in enumerate(fuzzed_options)\n            ]\n\n            embed = utils.GenjiEmbed(\n                title=\"Tags\",\n                description=(\n                    f\"Couldn't find `{name}`. Did you mean:\\n\" + \"\".join(fuzz_desc)\n                ),\n            )\n            view = views.TagFuzzView(itx, fuzzed_options)\n            await itx.edit_original_response(embed=embed, view=view)\n            await view.wait()\n\n            return\n\n        tag = [\n            x\n            async for x in itx.client.database.get(\n                \"SELECT * FROM tags WHERE name=$1\",\n                name,\n            )\n        ][0]\n        await itx.edit_original_response(\n            content=discord.utils.escape_mentions(f\"**{tag.name}**\\n\\n{tag.value}\")\n        )\n\n    @app_commands.command()\n    async def create(self, itx: core.Interaction[core.Genji]):\n        \"\"\"Create a tag\"\"\"\n        if (\n            itx.guild.get_role(utils.TAG_MAKER) not in itx.user.roles\n            and itx.guild.get_role(utils.STAFF) not in itx.user.roles\n        ):\n            raise utils.NoPermissionsError\n        modal = views.TagCreate()\n        await itx.response.send_modal(modal)\n\n\nasync def setup(bot: core.Genji):\n    await bot.add_cog(Tags(bot), guilds=[discord.Object(id=utils.GUILD_ID)])\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "a7cc9e4b6a906bdca02014e223c3907b754dcac473e2a4f45e21f10b29fc3937"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "cogs/maps.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 13647,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport typing\n\nimport discord\nfrom discord import app_commands\nfrom discord.ext import commands\n\nimport cogs\nimport database\nimport utils\nimport views\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nclass Maps(commands.Cog):\n    \"\"\"Maps\"\"\"\n\n    def __init__(self, bot: core.Genji):\n        self.bot = bot\n\n    _map_maker = app_commands.Group(\n        name=\"map-maker\",\n        guild_ids=[utils.GUILD_ID],\n        description=\"Map maker only commands\",\n    )\n\n    _creator = app_commands.Group(\n        name=\"creator\",\n        guild_ids=[utils.GUILD_ID],\n        description=\"Edit creators\",\n        parent=_map_maker,\n    )\n\n    # @_creator.command(name=\"remove\")\n    # @app_commands.autocomplete(\n    #     map_code=cogs.map_codes_autocomplete,\n    #     creator=cogs.users_autocomplete,\n    # )\n    # async def remove_creator(\n    #     self,\n    #     itx: core.Interaction[core.Genji],\n    #     map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n    #     creator: app_commands.Transform[int, utils.CreatorTransformer],\n    # ) -> None:\n    #     \"\"\"Remove a creator from a map.\"\"\"\n    #     await cogs.remove_creator_(creator, itx, map_code)\n\n    # @_creator.command(name=\"add\")\n    # @app_commands.autocomplete(\n    #     map_code=cogs.map_codes_autocomplete,\n    #     creator=cogs.users_autocomplete,\n    # )\n    # async def add_creator(\n    #     self,\n    #     itx: core.Interaction[core.Genji],\n    #     map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n    #     creator: app_commands.Transform[int, utils.CreatorTransformer],\n    # ) -> None:\n    #     await cogs.add_creator_(creator, itx, map_code)\n\n    @app_commands.command(name=\"submit-map\")\n    @app_commands.guilds(discord.Object(id=utils.GUILD_ID))\n    @app_commands.autocomplete(map_name=cogs.map_name_autocomplete)\n    async def submit_map(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeSubmitTransformer],\n        map_name: app_commands.Transform[str, utils.MapNameTransformer],\n        checkpoint_count: app_commands.Range[int, 1, 500],\n        description: str | None = None,\n        guide_url: str | None = None,\n        gold: app_commands.Transform[float, utils.RecordTransformer] | None = None,\n        silver: app_commands.Transform[float, utils.RecordTransformer] | None = None,\n        bronze: app_commands.Transform[float, utils.RecordTransformer] | None = None,\n    ) -> None:\n        \"\"\"\n        Submit your map to get playtested.\n\n        Args:\n            itx: Interaction\n            map_code: Overwatch share code\n            map_name: Overwatch map\n            checkpoint_count: Number of checkpoints in the map\n            description: Other optional information for the map\n            guide_url: Guide URL\n            gold: Gold medal time (must be the fastest time)\n            silver: Silver medal time (must be between gold and bronze)\n            bronze: Bronze medal time (must be the slowest time)\n        \"\"\"\n        medals = None\n        if gold and silver and bronze:\n            medals = (gold, silver, bronze)\n        await cogs.submit_map_(\n            itx,\n            itx.user,\n            map_code,\n            map_name,\n            checkpoint_count,\n            description,\n            guide_url,\n            medals,\n        )\n\n    @app_commands.command(name=\"map-search\")\n    @app_commands.choices(\n        minimum_rating=utils.ALL_STARS_CHOICES,\n        # [\n        #     app_commands.Choice(name=str(x), value=x) for x in range(0, 6)\n        # ],\n        difficulty=[app_commands.Choice(name=x, value=x) for x in utils.DIFFICULTIES],\n    )\n    @app_commands.autocomplete(\n        map_name=cogs.map_name_autocomplete,\n        map_type=cogs.map_type_autocomplete,\n        creator=cogs.creator_autocomplete,\n        mechanics=cogs.map_mechanics_autocomplete,\n        map_code=cogs.map_codes_autocomplete,\n    )\n    @app_commands.guilds(discord.Object(id=utils.GUILD_ID))\n    async def map_search(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_type: app_commands.Transform[str, utils.MapTypeTransformer] | None = None,\n        map_name: app_commands.Transform[str, utils.MapNameTransformer] | None = None,\n        creator: app_commands.Transform[int, utils.CreatorTransformer] | None = None,\n        difficulty: app_commands.Choice[str] | None = None,\n        mechanics: app_commands.Transform[str, utils.MapMechanicsTransformer]\n        | None = None,\n        minimum_rating: app_commands.Choice[int] = None,\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer] | None = None,\n    ) -> None:\n        \"\"\"\n        Search for maps based on various filters.\n\n        Args:\n            itx: Interaction\n            map_type: Type of parkour map\n            map_name: Overwatch map\n            creator: Creator name\n            map_code: Specific map code\n            difficulty: Difficulty filter\n            mechanics: Mechanics filter\n            minimum_rating: Show maps above a specific quality rating\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n        embed = utils.GenjiEmbed(title=\"Map Search\")\n        embed.set_thumbnail(url=None)\n        maps: list[database.DotRecord | None] = []\n\n        ranges = utils.DIFFICULTIES_RANGES.get(difficulty, None)\n        low_range = None if ranges is None else ranges[0]\n        high_range = None if ranges is None else ranges[1]\n        async for _map in itx.client.database.get(\n            \"\"\"\n                WITH all_maps AS (SELECT map_name,\n                    array_to_string((map_type), ', ')     AS map_type,\n                    m.map_code,\n                    \"desc\",\n                    official,\n                    archived,\n                    array_agg(DISTINCT url)               AS guide,\n                    array_to_string(array_agg(DISTINCT mech.mechanic), ', ') AS mechanics,\n                    array_to_string(array_agg(DISTINCT rest.restriction), ', ') AS restrictions,\n                    --array_to_string(SELECT name FROM map_techs LEFT JOIN unnest(mechanics), ', ')    AS mechanics,\n                    --array_to_string((restrictions), ', ') AS restrictions,\n                    checkpoints,\n                    string_agg(DISTINCT (nickname), ', ') AS creators,\n                    COALESCE(AVG(difficulty), 0)          AS difficulty,\n                    COALESCE(AVG(quality), 0)             AS quality,\n                    array_agg(DISTINCT mc.user_id)        AS creator_ids,\n                    gold,\n                    silver,\n                    bronze\n                    FROM maps m\n                    LEFT JOIN map_mechanics mech on mech.map_code = m.map_code\n                    LEFT JOIN map_restrictions rest on rest.map_code = m.map_code\n                    LEFT JOIN map_creators mc on m.map_code = mc.map_code\n                    LEFT JOIN users u on mc.user_id = u.user_id\n                    LEFT JOIN map_ratings mr on mc.user_id = mr.user_id\n                    LEFT JOIN guides g on m.map_code = g.map_code\n                    LEFT JOIN map_medals mm on m.map_code = mm.map_code\n                    GROUP BY checkpoints, map_name,\n                    m.map_code, \"desc\", official, map_type, gold, silver, bronze, archived)\n                SELECT *\n                FROM all_maps\n                WHERE\n                (official = TRUE) AND\n                (archived = FALSE) AND\n                ($1::text IS NULL OR map_code = $1) AND\n                ($2::text IS NULL OR map_type LIKE $2) AND\n                ($3::text IS NULL OR map_name = $3) AND\n                ($4::text IS NULL OR mechanics LIKE $4) AND\n                ($5::numeric(10, 2) IS NULL OR difficulty >= $5) AND\n                ($6::numeric(10, 2) IS NULL OR difficulty < $6) AND\n                ($7::int IS NULL OR quality >= $7) AND\n                ($8::bigint IS NULL OR $8 = ANY(creator_ids));\n            \"\"\",\n            map_code,\n            map_type,\n            map_name,\n            mechanics,\n            low_range,\n            high_range,\n            int(getattr(minimum_rating, \"value\", 0)),\n            creator,\n        ):\n            maps.append(_map)\n        if not maps:\n            raise utils.NoMapsFoundError\n\n        embeds = self.create_map_embeds(maps)\n\n        view = views.Paginator(embeds, itx.user, None)\n        await view.start(itx)\n\n    @staticmethod\n    def create_map_embeds(\n        maps: list[database.DotRecord],\n    ) -> list[discord.Embed | utils.GenjiEmbed]:\n        embed_list = []\n        embed = utils.GenjiEmbed(title=\"Map Search\")\n        for i, _map in enumerate(maps):\n            guide_txt = \"\"\n            medals_txt = \"\"\n            if None not in _map.guide:\n                guides = [f\"[{j}]({guide})\" for j, guide in enumerate(_map.guide, 1)]\n                guide_txt = f\"┣ `Guide(s)` {', '.join(guides)}\\n\"\n            if _map.gold:\n                medals_txt = (\n                    f\"┣ `Medals` \"\n                    f\"{utils.FULLY_VERIFIED_GOLD} {_map.gold} | \"\n                    f\"{utils.FULLY_VERIFIED_SILVER} {_map.silver} | \"\n                    f\"{utils.FULLY_VERIFIED_BRONZE} {_map.bronze}\\n\"\n                )\n            embed.add_description_field(\n                name=f\"{_map.map_code}\",\n                value=(\n                    f\"┣ `Rating` {utils.create_stars(_map.quality)}\\n\"\n                    f\"┣ `Creator` {discord.utils.escape_markdown(_map.creators)}\\n\"\n                    f\"┣ `Map` {_map.map_name}\\n\"\n                    f\"┣ `Difficulty` {utils.convert_num_to_difficulty(_map.difficulty)}\\n\"\n                    f\"┣ `Mechanics` {_map.mechanics}\\n\"\n                    f\"┣ `Restrictions` {_map.restrictions}\\n\"\n                    f\"{guide_txt}\"\n                    f\"┣ `Type` {_map.map_type}\\n\"\n                    f\"┣ `Checkpoints` {_map.checkpoints}\\n\"\n                    f\"{medals_txt}\"\n                    f\"┗ `Desc` {_map.desc}\"\n                ),\n            )\n            if (\n                (i != 0 and i % 5 == 0)\n                or (i == 0 and len(maps) == 1)\n                or i == len(maps) - 1\n            ):\n                embed_list.append(embed)\n                embed = utils.GenjiEmbed(title=\"Map Search\")\n        return embed_list\n\n    @staticmethod\n    def display_official(official: bool):\n        return (\n            (\n                \"┃<:_:998055526468423700>\"\n                \"<:_:998055528355860511>\"\n                \"<:_:998055530440437840>\"\n                \"<:_:998055532030079078>\"\n                \"<:_:998055534068510750>\"\n                \"<:_:998055536346021898>\\n\"\n                \"┃<:_:998055527412142100>\"\n                \"<:_:998055529219887154>\"\n                \"<:_:998055531346415656>\"\n                \"<:_:998055533225455716>\"\n                \"<:_:998055534999654480>\"\n                \"<:_:998055537432338532>\\n\"\n            )\n            if official\n            else \"\"\n        )\n\n    @app_commands.command(name=\"guide\")\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    @app_commands.guilds(discord.Object(id=utils.GUILD_ID))\n    async def view_guide(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n    ):\n        \"\"\"\n        View guides that have been submitted for a particular map.\n\n        Args:\n            map_code: Overwatch share code\n            itx: Interaction\n        \"\"\"\n        await itx.response.defer(ephemeral=False)\n        if map_code not in itx.client.map_cache.keys():\n            raise utils.InvalidMapCodeError\n\n        guides = [\n            x\n            async for x in itx.client.database.get(\n                \"SELECT url FROM guides WHERE map_code=$1\",\n                map_code,\n            )\n        ]\n        guides = [x.url for x in guides]\n        if not guides:\n            raise utils.NoGuidesExistError\n\n        view = views.Paginator(guides, itx.user)\n        await view.start(itx)\n\n    @app_commands.command(name=\"add-guide\")\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    @app_commands.guilds(discord.Object(id=utils.GUILD_ID))\n    async def add_guide(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n        url: app_commands.Transform[str, utils.URLTransformer],\n    ):\n        \"\"\"\n        Add a guide for a particular map.\n\n        Args:\n            map_code: Overwatch share code\n            itx: Interaction\n            url: URL for guide\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n        if map_code not in itx.client.map_cache.keys():\n            raise utils.InvalidMapCodeError\n\n        guides = [\n            x\n            async for x in itx.client.database.get(\n                \"SELECT url FROM guides WHERE map_code=$1\",\n                map_code,\n            )\n        ]\n        guides = [x.url for x in guides]\n\n        if url in guides:\n            raise utils.GuideExistsError\n\n        view = views.Confirm(itx, ephemeral=True)\n        await itx.edit_original_response(\n            content=f\"Is this correct?\\nMap code: {map_code}\\nURL: {url}\",\n            view=view,\n        )\n        await view.wait()\n\n        if not view.value:\n            return\n\n        await itx.client.database.set(\n            \"INSERT INTO guides (map_code, url) VALUES ($1, $2)\",\n            map_code,\n            url,\n        )\n        itx.client.dispatch(\"newsfeed_guide\", itx, itx.user, url, map_code)\n\n\nasync def setup(bot):\n    \"\"\"Add Cog to Discord bot.\"\"\"\n    await bot.add_cog(Maps(bot))\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 13647,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport typing\n\nimport discord\nfrom discord import app_commands\nfrom discord.ext import commands\n\nimport cogs\nimport database\nimport utils\nimport views\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nclass Maps(commands.Cog):\n    \"\"\"Maps\"\"\"\n\n    def __init__(self, bot: core.Genji):\n        self.bot = bot\n\n    _map_maker = app_commands.Group(\n        name=\"map-maker\",\n        guild_ids=[utils.GUILD_ID],\n        description=\"Map maker only commands\",\n    )\n\n    _creator = app_commands.Group(\n        name=\"creator\",\n        guild_ids=[utils.GUILD_ID],\n        description=\"Edit creators\",\n        parent=_map_maker,\n    )\n\n    # @_creator.command(name=\"remove\")\n    # @app_commands.autocomplete(\n    #     map_code=cogs.map_codes_autocomplete,\n    #     creator=cogs.users_autocomplete,\n    # )\n    # async def remove_creator(\n    #     self,\n    #     itx: core.Interaction[core.Genji],\n    #     map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n    #     creator: app_commands.Transform[int, utils.CreatorTransformer],\n    # ) -> None:\n    #     \"\"\"Remove a creator from a map.\"\"\"\n    #     await cogs.remove_creator_(creator, itx, map_code)\n\n    # @_creator.command(name=\"add\")\n    # @app_commands.autocomplete(\n    #     map_code=cogs.map_codes_autocomplete,\n    #     creator=cogs.users_autocomplete,\n    # )\n    # async def add_creator(\n    #     self,\n    #     itx: core.Interaction[core.Genji],\n    #     map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n    #     creator: app_commands.Transform[int, utils.CreatorTransformer],\n    # ) -> None:\n    #     await cogs.add_creator_(creator, itx, map_code)\n\n    @app_commands.command(name=\"submit-map\")\n    @app_commands.guilds(discord.Object(id=utils.GUILD_ID))\n    @app_commands.autocomplete(map_name=cogs.map_name_autocomplete)\n    async def submit_map(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeSubmitTransformer],\n        map_name: app_commands.Transform[str, utils.MapNameTransformer],\n        checkpoint_count: app_commands.Range[int, 1, 500],\n        description: str | None = None,\n        guide_url: str | None = None,\n        gold: app_commands.Transform[float, utils.RecordTransformer] | None = None,\n        silver: app_commands.Transform[float, utils.RecordTransformer] | None = None,\n        bronze: app_commands.Transform[float, utils.RecordTransformer] | None = None,\n    ) -> None:\n        \"\"\"\n        Submit your map to get playtested.\n\n        Args:\n            itx: Interaction\n            map_code: Overwatch share code\n            map_name: Overwatch map\n            checkpoint_count: Number of checkpoints in the map\n            description: Other optional information for the map\n            guide_url: Guide URL\n            gold: Gold medal time (must be the fastest time)\n            silver: Silver medal time (must be between gold and bronze)\n            bronze: Bronze medal time (must be the slowest time)\n        \"\"\"\n        medals = None\n        if gold and silver and bronze:\n            medals = (gold, silver, bronze)\n        await cogs.submit_map_(\n            itx,\n            itx.user,\n            map_code,\n            map_name,\n            checkpoint_count,\n            description,\n            guide_url,\n            medals,\n        )\n\n    @app_commands.command(name=\"map-search\")\n    @app_commands.choices(\n        minimum_rating=utils.ALL_STARS_CHOICES,\n        # [\n        #     app_commands.Choice(name=str(x), value=x) for x in range(0, 6)\n        # ],\n        difficulty=[app_commands.Choice(name=x, value=x) for x in utils.DIFFICULTIES],\n    )\n    @app_commands.autocomplete(\n        map_name=cogs.map_name_autocomplete,\n        map_type=cogs.map_type_autocomplete,\n        creator=cogs.creator_autocomplete,\n        mechanics=cogs.map_mechanics_autocomplete,\n        map_code=cogs.map_codes_autocomplete,\n    )\n    @app_commands.guilds(discord.Object(id=utils.GUILD_ID))\n    async def map_search(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_type: app_commands.Transform[str, utils.MapTypeTransformer] | None = None,\n        map_name: app_commands.Transform[str, utils.MapNameTransformer] | None = None,\n        creator: app_commands.Transform[int, utils.CreatorTransformer] | None = None,\n        difficulty: app_commands.Choice[str] | None = None,\n        mechanics: app_commands.Transform[str, utils.MapMechanicsTransformer]\n        | None = None,\n        minimum_rating: app_commands.Choice[int] = None,\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer] | None = None,\n    ) -> None:\n        \"\"\"\n        Search for maps based on various filters.\n\n        Args:\n            itx: Interaction\n            map_type: Type of parkour map\n            map_name: Overwatch map\n            creator: Creator name\n            map_code: Specific map code\n            difficulty: Difficulty filter\n            mechanics: Mechanics filter\n            minimum_rating: Show maps above a specific quality rating\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n        embed = utils.GenjiEmbed(title=\"Map Search\")\n        embed.set_thumbnail(url=None)\n        maps: list[database.DotRecord | None] = []\n\n        ranges = utils.DIFFICULTIES_RANGES.get(difficulty, None)\n        low_range = None if ranges is None else ranges[0]\n        high_range = None if ranges is None else ranges[1]\n        async for _map in itx.client.database.get(\n            \"\"\"\n                WITH all_maps AS (SELECT map_name,\n                    array_to_string((map_type), ', ')     AS map_type,\n                    m.map_code,\n                    \"desc\",\n                    official,\n                    archived,\n                    array_agg(DISTINCT url)               AS guide,\n                    array_to_string(array_agg(DISTINCT mech.mechanic), ', ') AS mechanics,\n                    array_to_string(array_agg(DISTINCT rest.restriction), ', ') AS restrictions,\n                    --array_to_string(SELECT name FROM map_techs LEFT JOIN unnest(mechanics), ', ')    AS mechanics,\n                    --array_to_string((restrictions), ', ') AS restrictions,\n                    checkpoints,\n                    string_agg(DISTINCT (nickname), ', ') AS creators,\n                    COALESCE(AVG(difficulty), 0)          AS difficulty,\n                    COALESCE(AVG(quality), 0)             AS quality,\n                    array_agg(DISTINCT mc.user_id)        AS creator_ids,\n                    gold,\n                    silver,\n                    bronze\n                    FROM maps m\n                    LEFT JOIN map_mechanics mech on mech.map_code = m.map_code\n                    LEFT JOIN map_restrictions rest on rest.map_code = m.map_code\n                    LEFT JOIN map_creators mc on m.map_code = mc.map_code\n                    LEFT JOIN users u on mc.user_id = u.user_id\n                    LEFT JOIN map_ratings mr on mc.user_id = mr.user_id\n                    LEFT JOIN guides g on m.map_code = g.map_code\n                    LEFT JOIN map_medals mm on m.map_code = mm.map_code\n                    GROUP BY checkpoints, map_name,\n                    m.map_code, \"desc\", official, map_type, gold, silver, bronze, archived)\n                SELECT *\n                FROM all_maps\n                WHERE\n                (official = TRUE) AND\n                (archived = FALSE) AND\n                ($1::text IS NULL OR map_code = $1) AND\n                ($2::text IS NULL OR map_type LIKE $2) AND\n                ($3::text IS NULL OR map_name = $3) AND\n                ($4::text IS NULL OR mechanics LIKE $4) AND\n                ($5::numeric(10, 2) IS NULL OR difficulty >= $5) AND\n                ($6::numeric(10, 2) IS NULL OR difficulty < $6) AND\n                ($7::int IS NULL OR quality >= $7) AND\n                ($8::bigint IS NULL OR $8 = ANY(creator_ids));\n            \"\"\",\n            map_code,\n            map_type,\n            map_name,\n            mechanics,\n            low_range,\n            high_range,\n            int(getattr(minimum_rating, \"value\", 0)),\n            creator,\n        ):\n            maps.append(_map)\n        if not maps:\n            raise utils.NoMapsFoundError\n\n        embeds = self.create_map_embeds(maps)\n\n        view = views.Paginator(embeds, itx.user, None)\n        await view.start(itx)\n\n    @staticmethod\n    def create_map_embeds(\n        maps: list[database.DotRecord],\n    ) -> list[discord.Embed | utils.GenjiEmbed]:\n        embed_list = []\n        embed = utils.GenjiEmbed(title=\"Map Search\")\n        for i, _map in enumerate(maps):\n            guide_txt = \"\"\n            medals_txt = \"\"\n            if None not in _map.guide:\n                guides = [f\"[{j}]({guide})\" for j, guide in enumerate(_map.guide, 1)]\n                guide_txt = f\"┣ `Guide(s)` {', '.join(guides)}\\n\"\n            if _map.gold:\n                medals_txt = (\n                    f\"┣ `Medals` \"\n                    f\"{utils.FULLY_VERIFIED_GOLD} {_map.gold} | \"\n                    f\"{utils.FULLY_VERIFIED_SILVER} {_map.silver} | \"\n                    f\"{utils.FULLY_VERIFIED_BRONZE} {_map.bronze}\\n\"\n                )\n            embed.add_description_field(\n                name=f\"{_map.map_code}\",\n                value=(\n                    f\"┣ `Rating` {utils.create_stars(_map.quality)}\\n\"\n                    f\"┣ `Creator` {discord.utils.escape_markdown(_map.creators)}\\n\"\n                    f\"┣ `Map` {_map.map_name}\\n\"\n                    f\"┣ `Difficulty` {utils.convert_num_to_difficulty(_map.difficulty)}\\n\"\n                    f\"┣ `Mechanics` {_map.mechanics}\\n\"\n                    f\"┣ `Restrictions` {_map.restrictions}\\n\"\n                    f\"{guide_txt}\"\n                    f\"┣ `Type` {_map.map_type}\\n\"\n                    f\"┣ `Checkpoints` {_map.checkpoints}\\n\"\n                    f\"{medals_txt}\"\n                    f\"┗ `Desc` {_map.desc}\"\n                ),\n            )\n            if (\n                (i != 0 and i % 5 == 0)\n                or (i == 0 and len(maps) == 1)\n                or i == len(maps) - 1\n            ):\n                embed_list.append(embed)\n                embed = utils.GenjiEmbed(title=\"Map Search\")\n        return embed_list\n\n    @staticmethod\n    def display_official(official: bool):\n        return (\n            (\n                \"┃<:_:998055526468423700>\"\n                \"<:_:998055528355860511>\"\n                \"<:_:998055530440437840>\"\n                \"<:_:998055532030079078>\"\n                \"<:_:998055534068510750>\"\n                \"<:_:998055536346021898>\\n\"\n                \"┃<:_:998055527412142100>\"\n                \"<:_:998055529219887154>\"\n                \"<:_:998055531346415656>\"\n                \"<:_:998055533225455716>\"\n                \"<:_:998055534999654480>\"\n                \"<:_:998055537432338532>\\n\"\n            )\n            if official\n            else \"\"\n        )\n\n    @app_commands.command(name=\"guide\")\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    @app_commands.guilds(discord.Object(id=utils.GUILD_ID))\n    async def view_guide(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n    ):\n        \"\"\"\n        View guides that have been submitted for a particular map.\n\n        Args:\n            map_code: Overwatch share code\n            itx: Interaction\n        \"\"\"\n        await itx.response.defer(ephemeral=False)\n        if map_code not in itx.client.map_cache.keys():\n            raise utils.InvalidMapCodeError\n\n        guides = [\n            x\n            async for x in itx.client.database.get(\n                \"SELECT url FROM guides WHERE map_code=$1\",\n                map_code,\n            )\n        ]\n        guides = [x.url for x in guides]\n        if not guides:\n            raise utils.NoGuidesExistError\n\n        view = views.Paginator(guides, itx.user)\n        await view.start(itx)\n\n    @app_commands.command(name=\"add-guide\")\n    @app_commands.autocomplete(map_code=cogs.map_codes_autocomplete)\n    @app_commands.guilds(discord.Object(id=utils.GUILD_ID))\n    async def add_guide(\n        self,\n        itx: core.Interaction[core.Genji],\n        map_code: app_commands.Transform[str, utils.MapCodeTransformer],\n        url: app_commands.Transform[str, utils.URLTransformer],\n    ):\n        \"\"\"\n        Add a guide for a particular map.\n\n        Args:\n            map_code: Overwatch share code\n            itx: Interaction\n            url: URL for guide\n        \"\"\"\n        await itx.response.defer(ephemeral=True)\n        if map_code not in itx.client.map_cache.keys():\n            raise utils.InvalidMapCodeError\n\n        guides = [\n            x\n            async for x in itx.client.database.get(\n                \"SELECT url FROM guides WHERE map_code=$1\",\n                map_code,\n            )\n        ]\n        guides = [x.url for x in guides]\n\n        if url in guides:\n            raise utils.GuideExistsError\n\n        view = views.Confirm(itx, ephemeral=True)\n        await itx.edit_original_response(\n            content=f\"Is this correct?\\nMap code: {map_code}\\nURL: {url}\",\n            view=view,\n        )\n        await view.wait()\n\n        if not view.value:\n            return\n\n        await itx.client.database.set(\n            \"INSERT INTO guides (map_code, url) VALUES ($1, $2)\",\n            map_code,\n            url,\n        )\n        itx.client.dispatch(\"newsfeed_guide\", itx, itx.user, url, map_code)\n\n\nasync def setup(bot):\n    \"\"\"Add Cog to Discord bot.\"\"\"\n    await bot.add_cog(Maps(bot))\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "d137e46094de5cdca6c36c4b5fca1d01dc094390b9d3888ca42c7dc9f9b5cdf7"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/constants.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 3511,
                    "snippet": {
                      "text": "import math\n\nimport discord\n\n# TODO: Hardcoded LIVE\nGUILD_ID = 968951072599187476  # 195387617972322306\n\n# TODO: Hardcoded LIVE\nSTAFF = 1021889200242573322  # 1047262740315643925\nPLAYTESTER = 1054779896305569792\nTAG_MAKER = 1002267404816093244\n\n#\nCONFIRM = \"<:_:1052666519487795261>\"\n# HALF_VERIFIED = \"<:_:1042541868723998871>\"\n\n\nUNVERIFIED = \"<:_:1042541865821556746>\"\n\nFULLY_VERIFIED = \"<a:_:1053038647978512535>\"\nFULLY_VERIFIED_GOLD = \"<a:_:1053038660553027707>\"\nFULLY_VERIFIED_SILVER = \"<a:_:1053038666114666669>\"\nFULLY_VERIFIED_BRONZE = \"<a:_:1053038654274162718>\"\n\nPARTIAL_VERIFIED = \"<:_:1053038667935002727>\"\n# PARTIAL_VERIFIED_GOLD = \"<:_:1053038670527074434>\"\n# PARTIAL_VERIFIED_SILVER = \"<:_:1053038671688900629>\"\n# PARTIAL_VERIFIED_BRONZE = \"<:_:1053038669168136302>\"\n\nTIME = \"⌛\"\n\nCONFIRM_EMOJI = discord.PartialEmoji.from_str(CONFIRM)\n# HALF_VERIFIED_EMOJI = discord.PartialEmoji.from_str(HALF_VERIFIED)\nUNVERIFIED_EMOJI = discord.PartialEmoji.from_str(UNVERIFIED)\n\n_FIRST = \"<:_:1043226244575142018>\"\n_SECOND = \"<:_:1043226243463659540>\"\n_THIRD = \"<:_:1043226242335391794>\"\n\nPLACEMENTS = {\n    1: _FIRST,\n    2: _SECOND,\n    3: _THIRD,\n}\n\n\nSTAR = \"★\"\nEMPTY_STAR = \"☆\"\n\n\ndef create_stars(rating: int | float | None) -> str:\n    if not rating:\n        return \"Unrated\"\n    filled = math.ceil(rating) * STAR\n    return filled + ((6 - len(filled)) * EMPTY_STAR)\n\n\ndef _generate_all_stars() -> list[str]:\n    return [create_stars(x) for x in range(1, 7)]\n\n\nALL_STARS = _generate_all_stars()\nALL_STARS_CHOICES = [\n    discord.app_commands.Choice(name=x, value=i)\n    for i, x in enumerate(ALL_STARS, start=1)\n]\n\n# TODO: Hardcoded LIVE\nNEW_MAPS = 1060045563883700255  # 856602254769782835\nPLAYTEST = 988812516551438426\nVERIFICATION_QUEUE = 992134125253316699  # 811467249100652586\nNEWSFEED = 1055501059352698930\nRECORDS = 979491570237730817  # 801496775390527548\n\n\n# TODO: Hardcoded LIVE\nclass Roles:\n    NINJA = 989188787106119690\n    # NINJA_PLUS = 1034572581061263400\n    JUMPER = 989184572224843877\n    JUMPER_PLUS = 1034572630184968313\n    SKILLED = 989184754840657920\n    SKILLED_PLUS = 1034572662271389726\n    PRO = 989184805843378226\n    PRO_PLUS = 1034572705393016954\n    MASTER = 989184828832370688\n    MASTER_PLUS = 1034572740994269335\n    GRANDMASTER = 989188737718169642\n    GRANDMASTER_PLUS = 1034572780148117524\n    GOD = 989184852639223838\n    GOD_PLUS = 1034572827807985674\n\n    MAP_MAKER = 1001927190935515188\n\n    @classmethod\n    def roles_per_rank(cls, rank_num: int) -> list[int]:\n        return cls.ranks[0 : rank_num + 1]\n\n    @classmethod\n    def ranks(cls) -> list[int]:\n        return [\n            cls.NINJA,\n            cls.JUMPER,\n            cls.SKILLED,\n            cls.PRO,\n            cls.MASTER,\n            cls.GRANDMASTER,\n            cls.GOD,\n        ]\n\n    @classmethod\n    def ranks_plus(cls) -> list[int]:\n        return [\n            0,\n            cls.JUMPER_PLUS,\n            cls.SKILLED_PLUS,\n            cls.PRO_PLUS,\n            cls.MASTER_PLUS,\n            cls.GRANDMASTER_PLUS,\n            cls.GOD_PLUS,\n        ]\n\n    @classmethod\n    async def find_highest_rank(cls, user: discord.Member) -> int:\n        \"\"\"Find the highest rank a user has.\n\n        Args:\n            user (discord.Member): User to check\n\n        Returns:\n            int: index for highest rank\n        \"\"\"\n        ids = [r.id for r in user.roles]\n        res = 0\n        for i, role in enumerate(cls.ranks()):\n            if role in ids:\n                res += 1\n        return res\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 3511,
                    "snippet": {
                      "text": "import math\n\nimport discord\n\n# TODO: Hardcoded LIVE\nGUILD_ID = 968951072599187476  # 195387617972322306\n\n# TODO: Hardcoded LIVE\nSTAFF = 1021889200242573322  # 1047262740315643925\nPLAYTESTER = 1054779896305569792\nTAG_MAKER = 1002267404816093244\n\n#\nCONFIRM = \"<:_:1052666519487795261>\"\n# HALF_VERIFIED = \"<:_:1042541868723998871>\"\n\n\nUNVERIFIED = \"<:_:1042541865821556746>\"\n\nFULLY_VERIFIED = \"<a:_:1053038647978512535>\"\nFULLY_VERIFIED_GOLD = \"<a:_:1053038660553027707>\"\nFULLY_VERIFIED_SILVER = \"<a:_:1053038666114666669>\"\nFULLY_VERIFIED_BRONZE = \"<a:_:1053038654274162718>\"\n\nPARTIAL_VERIFIED = \"<:_:1053038667935002727>\"\n# PARTIAL_VERIFIED_GOLD = \"<:_:1053038670527074434>\"\n# PARTIAL_VERIFIED_SILVER = \"<:_:1053038671688900629>\"\n# PARTIAL_VERIFIED_BRONZE = \"<:_:1053038669168136302>\"\n\nTIME = \"⌛\"\n\nCONFIRM_EMOJI = discord.PartialEmoji.from_str(CONFIRM)\n# HALF_VERIFIED_EMOJI = discord.PartialEmoji.from_str(HALF_VERIFIED)\nUNVERIFIED_EMOJI = discord.PartialEmoji.from_str(UNVERIFIED)\n\n_FIRST = \"<:_:1043226244575142018>\"\n_SECOND = \"<:_:1043226243463659540>\"\n_THIRD = \"<:_:1043226242335391794>\"\n\nPLACEMENTS = {\n    1: _FIRST,\n    2: _SECOND,\n    3: _THIRD,\n}\n\n\nSTAR = \"★\"\nEMPTY_STAR = \"☆\"\n\n\ndef create_stars(rating: int | float | None) -> str:\n    if not rating:\n        return \"Unrated\"\n    filled = math.ceil(rating) * STAR\n    return filled + ((6 - len(filled)) * EMPTY_STAR)\n\n\ndef _generate_all_stars() -> list[str]:\n    return [create_stars(x) for x in range(1, 7)]\n\n\nALL_STARS = _generate_all_stars()\nALL_STARS_CHOICES = [\n    discord.app_commands.Choice(name=x, value=i)\n    for i, x in enumerate(ALL_STARS, start=1)\n]\n\n# TODO: Hardcoded LIVE\nNEW_MAPS = 1060045563883700255  # 856602254769782835\nPLAYTEST = 988812516551438426\nVERIFICATION_QUEUE = 992134125253316699  # 811467249100652586\nNEWSFEED = 1055501059352698930\nRECORDS = 979491570237730817  # 801496775390527548\n\n\n# TODO: Hardcoded LIVE\nclass Roles:\n    NINJA = 989188787106119690\n    # NINJA_PLUS = 1034572581061263400\n    JUMPER = 989184572224843877\n    JUMPER_PLUS = 1034572630184968313\n    SKILLED = 989184754840657920\n    SKILLED_PLUS = 1034572662271389726\n    PRO = 989184805843378226\n    PRO_PLUS = 1034572705393016954\n    MASTER = 989184828832370688\n    MASTER_PLUS = 1034572740994269335\n    GRANDMASTER = 989188737718169642\n    GRANDMASTER_PLUS = 1034572780148117524\n    GOD = 989184852639223838\n    GOD_PLUS = 1034572827807985674\n\n    MAP_MAKER = 1001927190935515188\n\n    @classmethod\n    def roles_per_rank(cls, rank_num: int) -> list[int]:\n        return cls.ranks[0 : rank_num + 1]\n\n    @classmethod\n    def ranks(cls) -> list[int]:\n        return [\n            cls.NINJA,\n            cls.JUMPER,\n            cls.SKILLED,\n            cls.PRO,\n            cls.MASTER,\n            cls.GRANDMASTER,\n            cls.GOD,\n        ]\n\n    @classmethod\n    def ranks_plus(cls) -> list[int]:\n        return [\n            0,\n            cls.JUMPER_PLUS,\n            cls.SKILLED_PLUS,\n            cls.PRO_PLUS,\n            cls.MASTER_PLUS,\n            cls.GRANDMASTER_PLUS,\n            cls.GOD_PLUS,\n        ]\n\n    @classmethod\n    async def find_highest_rank(cls, user: discord.Member) -> int:\n        \"\"\"Find the highest rank a user has.\n\n        Args:\n            user (discord.Member): User to check\n\n        Returns:\n            int: index for highest rank\n        \"\"\"\n        ids = [r.id for r in user.roles]\n        res = 0\n        for i, role in enumerate(cls.ranks()):\n            if role in ids:\n                res += 1\n        return res\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "fd6e6f75490fe668a9b45f5e60d0d322dc41112f1cafe32709b69fa0d779c18b"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "utils/ranks.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 2043,
                    "snippet": {
                      "text": "from discord import app_commands\n\nDIFFICULTIES_EXT = [\n    \"Beginner\",\n    \"Easy -\",\n    \"Easy\",\n    \"Easy +\",\n    \"Medium -\",\n    \"Medium\",\n    \"Medium +\",\n    \"Hard -\",\n    \"Hard\",\n    \"Hard +\",\n    \"Very Hard -\",\n    \"Very Hard\",\n    \"Very Hard +\",\n    \"Extreme -\",\n    \"Extreme\",\n    \"Extreme +\",\n    \"Hell\",\n]\n\nDIFFICULTIES = [\n    x for x in filter(lambda y: not (\"-\" in y or \"+\" in y), DIFFICULTIES_EXT)\n]\n\n\ndef generate_difficulty_ranges(top_level=False) -> dict[str, tuple[float, float]]:\n    ranges = {}\n    range_length = 10 / len(DIFFICULTIES_EXT)\n    cur_range = 0\n    for d in DIFFICULTIES_EXT:\n        ranges[d] = (round(cur_range, 2), round(cur_range + range_length, 2))\n        cur_range += range_length\n\n    if top_level:\n        temp_ranges = {}\n\n        for k, v in ranges.items():\n            key = k.rstrip(\" -\").rstrip(\" +\")\n            if key in temp_ranges:\n                temp_ranges[key] = (\n                    min(temp_ranges[key][0], v[0]),\n                    max(temp_ranges[key][1], v[1]),\n                )\n            else:\n                temp_ranges[key] = v\n\n        ranges = temp_ranges\n\n    return ranges\n\n\nDIFFICULTIES_RANGES = generate_difficulty_ranges()\nTOP_DIFFICULTIES_RANGES = generate_difficulty_ranges(True)\nTOP_DIFFICULTY_RANGES_MIDPOINT = {\n    k: (v[0] + v[1]) / 2 for k, v in TOP_DIFFICULTIES_RANGES.items()\n}\n\nDIFFICULTIES_CHOICES = [app_commands.Choice(name=x, value=x) for x in DIFFICULTIES_EXT]\n\n\ndef allowed_difficulties(rank_number: int) -> list[str | None]:\n    ranks = []\n    if rank_number >= 4:\n        ranks += DIFFICULTIES_EXT[0:10]\n    if rank_number >= 5:\n        ranks += DIFFICULTIES_EXT[10:13]\n    if rank_number >= 6:\n        ranks += DIFFICULTIES_EXT[13:16]\n    if rank_number >= 7:\n        ranks += DIFFICULTIES_EXT[16:19]\n    return ranks\n\n\ndef convert_num_to_difficulty(value: float | int) -> str:\n    res = \"Hell\"\n    for diff, _range in DIFFICULTIES_RANGES.items():\n        if _range[0] <= value < _range[1]:\n            res = diff\n            break\n    return res\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 2043,
                    "snippet": {
                      "text": "from discord import app_commands\n\nDIFFICULTIES_EXT = [\n    \"Beginner\",\n    \"Easy -\",\n    \"Easy\",\n    \"Easy +\",\n    \"Medium -\",\n    \"Medium\",\n    \"Medium +\",\n    \"Hard -\",\n    \"Hard\",\n    \"Hard +\",\n    \"Very Hard -\",\n    \"Very Hard\",\n    \"Very Hard +\",\n    \"Extreme -\",\n    \"Extreme\",\n    \"Extreme +\",\n    \"Hell\",\n]\n\nDIFFICULTIES = [\n    x for x in filter(lambda y: not (\"-\" in y or \"+\" in y), DIFFICULTIES_EXT)\n]\n\n\ndef generate_difficulty_ranges(top_level=False) -> dict[str, tuple[float, float]]:\n    ranges = {}\n    range_length = 10 / len(DIFFICULTIES_EXT)\n    cur_range = 0\n    for d in DIFFICULTIES_EXT:\n        ranges[d] = (round(cur_range, 2), round(cur_range + range_length, 2))\n        cur_range += range_length\n\n    if top_level:\n        temp_ranges = {}\n\n        for k, v in ranges.items():\n            key = k.rstrip(\" -\").rstrip(\" +\")\n            if key in temp_ranges:\n                temp_ranges[key] = (\n                    min(temp_ranges[key][0], v[0]),\n                    max(temp_ranges[key][1], v[1]),\n                )\n            else:\n                temp_ranges[key] = v\n\n        ranges = temp_ranges\n\n    return ranges\n\n\nDIFFICULTIES_RANGES = generate_difficulty_ranges()\nTOP_DIFFICULTIES_RANGES = generate_difficulty_ranges(True)\nTOP_DIFFICULTY_RANGES_MIDPOINT = {\n    k: (v[0] + v[1]) / 2 for k, v in TOP_DIFFICULTIES_RANGES.items()\n}\n\nDIFFICULTIES_CHOICES = [app_commands.Choice(name=x, value=x) for x in DIFFICULTIES_EXT]\n\n\ndef allowed_difficulties(rank_number: int) -> list[str | None]:\n    ranks = []\n    if rank_number >= 4:\n        ranks += DIFFICULTIES_EXT[0:10]\n    if rank_number >= 5:\n        ranks += DIFFICULTIES_EXT[10:13]\n    if rank_number >= 6:\n        ranks += DIFFICULTIES_EXT[13:16]\n    if rank_number >= 7:\n        ranks += DIFFICULTIES_EXT[16:19]\n    return ranks\n\n\ndef convert_num_to_difficulty(value: float | int) -> str:\n    res = \"Hell\"\n    for diff, _range in DIFFICULTIES_RANGES.items():\n        if _range[0] <= value < _range[1]:\n            res = diff\n            break\n    return res\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "1a15249748e504afc674a66771f11382d137de097a449c701f24ff0b91a13c20"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "views/verification.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 8905,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nfrom typing import TYPE_CHECKING\n\nimport discord\n\nif TYPE_CHECKING:\n    import core\n\nimport database\nimport utils\n\n\nclass RejectReasonModal(discord.ui.Modal, title=\"Rejection Reason\"):\n    reason = discord.ui.TextInput(label=\"Reason\", style=discord.TextStyle.long)\n\n    async def on_submit(self, itx: core.Interaction[core.Genji]):\n        await itx.response.send_message(\"Sending reason to user.\", ephemeral=True)\n\n\nclass VerificationView(discord.ui.View):\n    def __init__(self):\n        super().__init__(timeout=None)\n\n    @discord.ui.button(\n        label=\"Verify\",\n        style=discord.ButtonStyle.green,\n        custom_id=\"persistent_view:accept\",\n    )\n    async def green(self, itx: core.Interaction[core.Genji], button: discord.ui.Button):\n        await itx.response.defer(ephemeral=True)\n        await self.verification(itx, True)\n\n    @discord.ui.button(\n        label=\"Reject\",\n        style=discord.ButtonStyle.red,\n        custom_id=\"persistent_view:reject\",\n    )\n    async def red(self, itx: core.Interaction[core.Genji], button: discord.ui.Button):\n        modal = RejectReasonModal()\n        await itx.response.send_modal(modal)\n        await modal.wait()\n        await self.verification(itx, False, modal.reason.value)\n\n    async def verification(\n        self,\n        itx: core.Interaction[core.Genji],\n        verified: bool,\n        rejection: str | None = None,\n    ):\n        \"\"\"Verify a record.\"\"\"\n\n        search = await itx.client.database.get_row(\n            \"SELECT * FROM records_queue rq \"\n            \"LEFT JOIN maps m on rq.map_code = m.map_code \"\n            \"WHERE hidden_id=$1\",\n            itx.message.id,\n        )\n        if search.user_id == itx.user.id:\n            await itx.followup.send(\n                content=\"You cannot verify your own submissions.\", ephemeral=True\n            )\n            return\n\n        self.stop()\n        original_message = await self.find_original_message(\n            itx, search.channel_id, search.message_id\n        )\n        if not original_message:\n            return\n\n        await itx.edit_original_response(view=self)\n\n        user = itx.guild.get_member(search.user_id)\n\n        if verified:\n            medals = await itx.client.database.get_row(\n                \"\"\"\n            SELECT gold, silver, bronze FROM map_medals WHERE map_code = $1;\n            \"\"\",\n                search.map_code,\n            )\n\n            if medals:\n                medals = [medals.gold, medals.silver, medals.bronze]\n                medals = tuple(map(float, medals))\n            else:\n                medals = (0, 0, 0)\n\n            data = self.accepted(itx, search, medals)\n            await itx.client.database.set(\n                \"\"\"\n                INSERT INTO records (map_code, user_id, record, screenshot, video, verified, message_id, channel_id) \n                VALUES($1, $2, $3, $4, $5, $6, $7, $8)\n                ON CONFLICT (map_code, user_id) \n                DO UPDATE SET record=$3, screenshot=$4, video=$5, verified=$6, message_id=$7\n                WHERE records.user_id = EXCLUDED.user_id \n                AND records.map_code = EXCLUDED.map_code;\n                \"\"\",\n                search.map_code,\n                search.user_id,\n                search.record,\n                search.screenshot,\n                search.video,\n                bool(search.video),\n                search.message_id,\n                search.channel_id,\n            )\n\n            if search.rating:\n                await itx.client.database.set(\n                    \"\"\"\n                    INSERT INTO map_ratings (map_code, user_id, quality) \n                    VALUES($1, $2, $3)\n                    ON CONFLICT (map_code, user_id) \n                    DO UPDATE SET quality=$3\n                    WHERE map_ratings.user_id = EXCLUDED.user_id \n                    AND map_ratings.map_code = EXCLUDED.map_code;\n                    \"\"\",\n                    search.map_code,\n                    search.user_id,\n                    search.rating,\n                )\n            if search.official:\n                await utils.auto_role(itx.client, itx.guild.get_member(search.user_id))\n        else:\n            data = self.rejected(itx, search, rejection)\n        await original_message.edit(content=data[\"edit\"])\n        if (\n            await itx.client.database.get_row(\n                \"SELECT alertable FROM users WHERE user_id=$1\",\n                search.user_id,\n            )\n        ).alertable:\n            try:\n                await user.send(\n                    \"`- - - - - - - - - - - - - -`\\n\"\n                    + data[\"direct_message\"]\n                    + \"\\n`- - - - - - - - - - - - - -`\"\n                )\n            except Exception as e:\n                itx.client.logger.info(e)\n        await itx.message.delete()\n        await itx.client.database.set(\n            \"DELETE FROM records_queue WHERE hidden_id=$1\",\n            itx.message.id,\n        )\n        if verified:\n            query = \"\"\"\n                WITH map AS (SELECT m.map_code,\n                        m.map_name,\n                        string_agg(distinct (nickname), ', ') as creators\n                FROM maps m\n                          LEFT JOIN map_creators mc on m.map_code = mc.map_code\n                          LEFT JOIN users u on mc.user_id = u.user_id\n                GROUP BY m.map_code, m.map_name),\n                     ranks AS (SELECT u.nickname,\n                                      r.user_id,\n                                      record,\n                                      screenshot,\n                                      video,\n                                      verified,\n                                      r.map_code,\n                                      map.map_name,\n                                      map.creators,\n                                      RANK() OVER (\n                                          PARTITION BY r.map_code\n                                          ORDER BY record\n                                          ) rank_num\n                               FROM records r\n                                        LEFT JOIN users u\n                                                  on r.user_id = u.user_id\n                                        LEFT JOIN map on map.map_code = r.map_code)\n                SELECT *\n                FROM ranks\n                WHERE user_id = $1 AND map_code = $2\n                -- AND rank_num = 1 \n                AND verified = TRUE;\n            \"\"\"\n            res = await itx.client.database.get_row(\n                query, search.user_id, search.map_code\n            )\n\n            if res:\n                itx.client.dispatch(\"newsfeed_record\", itx, res, medals)\n\n    @staticmethod\n    async def find_original_message(\n        itx: core.Interaction[core.Genji], channel_id: int, message_id: int\n    ) -> discord.Message | None:\n        \"\"\"Try to fetch message from either Records channel.\"\"\"\n        try:\n            res = await itx.guild.get_channel(channel_id).fetch_message(message_id)\n        except (discord.NotFound, discord.HTTPException):\n            res = None\n        return res\n\n    @staticmethod\n    def accepted(\n        itx: core.Interaction[core.Genji],\n        search: database.DotRecord,\n        medals: tuple[float, float, float],\n    ) -> dict[str, str]:\n        \"\"\"Data for verified records.\"\"\"\n        icon = utils.icon_generator(search, medals)\n        record = f\"**Record:** {search.record} \" f\"{icon}\"\n        if search.video:\n            edit = f\"{icon} Complete verification by {itx.user.mention}!\"\n        else:\n            edit = (\n                f\"{icon} Partial verification by {itx.user.mention}! \"\n                f\"No video proof supplied.\"\n            )\n        return {\n            \"edit\": edit,\n            \"direct_message\": (\n                f\"**Map Code:** {search.map_code}\\n\"\n                + record\n                + f\"verified by {itx.user.mention}!\\n\\n\"\n                + ALERT\n            ),\n        }\n\n    @staticmethod\n    def rejected(\n        itx: core.Interaction[core.Genji],\n        search: database.DotRecord,\n        rejection: str,\n    ) -> dict[str, str]:\n        \"\"\"Data for rejected records.\"\"\"\n\n        record = f\"**Record:** {search.record}\\n\"\n\n        return {\n            \"edit\": f\"{utils.UNVERIFIED} \" f\"Rejected by {itx.user.mention}!\",\n            \"direct_message\": (\n                f\"**Map Code:** {search.map_code}\\n\"\n                + record\n                + f\"Your record got {utils.UNVERIFIED} \"\n                f\"rejected by {itx.user.mention}!\\n\\n\"\n                f\"**Reason:** {rejection}\\n\\n\" + ALERT\n            ),\n        }\n\n\nALERT = (\n    # \"Don't like these alerts? \"\n    # \"Turn it off by using the command `/alerts false`.\\n\"\n    \"You can change your display name \"\n    \"for records in the bot with the command `/name`!\"\n)\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 8905,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nfrom typing import TYPE_CHECKING\n\nimport discord\n\nif TYPE_CHECKING:\n    import core\n\nimport database\nimport utils\n\n\nclass RejectReasonModal(discord.ui.Modal, title=\"Rejection Reason\"):\n    reason = discord.ui.TextInput(label=\"Reason\", style=discord.TextStyle.long)\n\n    async def on_submit(self, itx: core.Interaction[core.Genji]):\n        await itx.response.send_message(\"Sending reason to user.\", ephemeral=True)\n\n\nclass VerificationView(discord.ui.View):\n    def __init__(self):\n        super().__init__(timeout=None)\n\n    @discord.ui.button(\n        label=\"Verify\",\n        style=discord.ButtonStyle.green,\n        custom_id=\"persistent_view:accept\",\n    )\n    async def green(self, itx: core.Interaction[core.Genji], button: discord.ui.Button):\n        await itx.response.defer(ephemeral=True)\n        await self.verification(itx, True)\n\n    @discord.ui.button(\n        label=\"Reject\",\n        style=discord.ButtonStyle.red,\n        custom_id=\"persistent_view:reject\",\n    )\n    async def red(self, itx: core.Interaction[core.Genji], button: discord.ui.Button):\n        modal = RejectReasonModal()\n        await itx.response.send_modal(modal)\n        await modal.wait()\n        await self.verification(itx, False, modal.reason.value)\n\n    async def verification(\n        self,\n        itx: core.Interaction[core.Genji],\n        verified: bool,\n        rejection: str | None = None,\n    ):\n        \"\"\"Verify a record.\"\"\"\n\n        search = await itx.client.database.get_row(\n            \"SELECT * FROM records_queue rq \"\n            \"LEFT JOIN maps m on rq.map_code = m.map_code \"\n            \"WHERE hidden_id=$1\",\n            itx.message.id,\n        )\n        if search.user_id == itx.user.id:\n            await itx.followup.send(\n                content=\"You cannot verify your own submissions.\", ephemeral=True\n            )\n            return\n\n        self.stop()\n        original_message = await self.find_original_message(\n            itx, search.channel_id, search.message_id\n        )\n        if not original_message:\n            return\n\n        await itx.edit_original_response(view=self)\n\n        user = itx.guild.get_member(search.user_id)\n\n        if verified:\n            medals = await itx.client.database.get_row(\n                \"\"\"\n            SELECT gold, silver, bronze FROM map_medals WHERE map_code = $1;\n            \"\"\",\n                search.map_code,\n            )\n\n            if medals:\n                medals = [medals.gold, medals.silver, medals.bronze]\n                medals = tuple(map(float, medals))\n            else:\n                medals = (0, 0, 0)\n\n            data = self.accepted(itx, search, medals)\n            await itx.client.database.set(\n                \"\"\"\n                INSERT INTO records (map_code, user_id, record, screenshot, video, verified, message_id, channel_id) \n                VALUES($1, $2, $3, $4, $5, $6, $7, $8)\n                ON CONFLICT (map_code, user_id) \n                DO UPDATE SET record=$3, screenshot=$4, video=$5, verified=$6, message_id=$7\n                WHERE records.user_id = EXCLUDED.user_id \n                AND records.map_code = EXCLUDED.map_code;\n                \"\"\",\n                search.map_code,\n                search.user_id,\n                search.record,\n                search.screenshot,\n                search.video,\n                bool(search.video),\n                search.message_id,\n                search.channel_id,\n            )\n\n            if search.rating:\n                await itx.client.database.set(\n                    \"\"\"\n                    INSERT INTO map_ratings (map_code, user_id, quality) \n                    VALUES($1, $2, $3)\n                    ON CONFLICT (map_code, user_id) \n                    DO UPDATE SET quality=$3\n                    WHERE map_ratings.user_id = EXCLUDED.user_id \n                    AND map_ratings.map_code = EXCLUDED.map_code;\n                    \"\"\",\n                    search.map_code,\n                    search.user_id,\n                    search.rating,\n                )\n            if search.official:\n                await utils.auto_role(itx.client, itx.guild.get_member(search.user_id))\n        else:\n            data = self.rejected(itx, search, rejection)\n        await original_message.edit(content=data[\"edit\"])\n        if (\n            await itx.client.database.get_row(\n                \"SELECT alertable FROM users WHERE user_id=$1\",\n                search.user_id,\n            )\n        ).alertable:\n            try:\n                await user.send(\n                    \"`- - - - - - - - - - - - - -`\\n\"\n                    + data[\"direct_message\"]\n                    + \"\\n`- - - - - - - - - - - - - -`\"\n                )\n            except Exception as e:\n                itx.client.logger.info(e)\n        await itx.message.delete()\n        await itx.client.database.set(\n            \"DELETE FROM records_queue WHERE hidden_id=$1\",\n            itx.message.id,\n        )\n        if verified:\n            query = \"\"\"\n                WITH map AS (SELECT m.map_code,\n                        m.map_name,\n                        string_agg(distinct (nickname), ', ') as creators\n                FROM maps m\n                          LEFT JOIN map_creators mc on m.map_code = mc.map_code\n                          LEFT JOIN users u on mc.user_id = u.user_id\n                GROUP BY m.map_code, m.map_name),\n                     ranks AS (SELECT u.nickname,\n                                      r.user_id,\n                                      record,\n                                      screenshot,\n                                      video,\n                                      verified,\n                                      r.map_code,\n                                      map.map_name,\n                                      map.creators,\n                                      RANK() OVER (\n                                          PARTITION BY r.map_code\n                                          ORDER BY record\n                                          ) rank_num\n                               FROM records r\n                                        LEFT JOIN users u\n                                                  on r.user_id = u.user_id\n                                        LEFT JOIN map on map.map_code = r.map_code)\n                SELECT *\n                FROM ranks\n                WHERE user_id = $1 AND map_code = $2\n                -- AND rank_num = 1 \n                AND verified = TRUE;\n            \"\"\"\n            res = await itx.client.database.get_row(\n                query, search.user_id, search.map_code\n            )\n\n            if res:\n                itx.client.dispatch(\"newsfeed_record\", itx, res, medals)\n\n    @staticmethod\n    async def find_original_message(\n        itx: core.Interaction[core.Genji], channel_id: int, message_id: int\n    ) -> discord.Message | None:\n        \"\"\"Try to fetch message from either Records channel.\"\"\"\n        try:\n            res = await itx.guild.get_channel(channel_id).fetch_message(message_id)\n        except (discord.NotFound, discord.HTTPException):\n            res = None\n        return res\n\n    @staticmethod\n    def accepted(\n        itx: core.Interaction[core.Genji],\n        search: database.DotRecord,\n        medals: tuple[float, float, float],\n    ) -> dict[str, str]:\n        \"\"\"Data for verified records.\"\"\"\n        icon = utils.icon_generator(search, medals)\n        record = f\"**Record:** {search.record} \" f\"{icon}\"\n        if search.video:\n            edit = f\"{icon} Complete verification by {itx.user.mention}!\"\n        else:\n            edit = (\n                f\"{icon} Partial verification by {itx.user.mention}! \"\n                f\"No video proof supplied.\"\n            )\n        return {\n            \"edit\": edit,\n            \"direct_message\": (\n                f\"**Map Code:** {search.map_code}\\n\"\n                + record\n                + f\"verified by {itx.user.mention}!\\n\\n\"\n                + ALERT\n            ),\n        }\n\n    @staticmethod\n    def rejected(\n        itx: core.Interaction[core.Genji],\n        search: database.DotRecord,\n        rejection: str,\n    ) -> dict[str, str]:\n        \"\"\"Data for rejected records.\"\"\"\n\n        record = f\"**Record:** {search.record}\\n\"\n\n        return {\n            \"edit\": f\"{utils.UNVERIFIED} \" f\"Rejected by {itx.user.mention}!\",\n            \"direct_message\": (\n                f\"**Map Code:** {search.map_code}\\n\"\n                + record\n                + f\"Your record got {utils.UNVERIFIED} \"\n                f\"rejected by {itx.user.mention}!\\n\\n\"\n                f\"**Reason:** {rejection}\\n\\n\" + ALERT\n            ),\n        }\n\n\nALERT = (\n    # \"Don't like these alerts? \"\n    # \"Turn it off by using the command `/alerts false`.\\n\"\n    \"You can change your display name \"\n    \"for records in the bot with the command `/name`!\"\n)\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "146ed1abc7730feae7a5be2643351bd72ebb477b4c778b392639adf0c48036f6"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "database/database.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 3435,
                    "snippet": {
                      "text": "import logging\nimport textwrap\nimport typing\n\nimport asyncpg\n\nimport utils\n\n\nclass DatabaseConnection:\n    \"\"\"Handles asyncronous context manager for database connection.\"\"\"\n\n    def __init__(self, dsn: str):\n        self.connection: asyncpg.Pool | None = None\n        self.dsn = dsn\n\n    async def __aenter__(self):\n        self.connection = await asyncpg.create_pool(self.dsn)\n        return self.connection\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await self.connection.close()\n\n\nclass DotRecord(asyncpg.Record):\n    \"\"\"Adds dot access to asyncpg.Record.\"\"\"\n\n    def __getattr__(self, attr: str):\n        return super().__getitem__(attr)\n\n\nclass Database:\n    \"\"\"Handles all database transactions.\"\"\"\n\n    def __init__(self, conn: asyncpg.Pool):\n        self.logger: logging.Logger | None = None\n        self.pool = conn\n\n    async def get(\n        self,\n        query: str,\n        *args: typing.Any,\n    ) -> typing.Generator[None, None, DotRecord]:\n        \"\"\"\n        The get_query_handler function is a helper function\n        that takes in a model and query string.\n        It then returns the results of the query as an array of records.\n        Args:\n            query (str) Specify the query that will be executed\n            *args (Any) Pass in any additional arguments that are\n                needed to be passed into the query\n        Yields:\n            DotRecords\n        \"\"\"\n        if self.pool is None:\n            raise utils.DatabaseConnectionError()\n        query = textwrap.dedent(query)\n        self.logger.debug(query)\n        self.logger.debug(args)\n\n        async with self.pool.acquire() as conn:\n            async with conn.transaction():\n                async for record in conn.cursor(\n                    query,\n                    *args,\n                    record_class=DotRecord,\n                ):\n                    yield record\n\n    async def get_row(self, query: str, *args: typing.Any) -> DotRecord | None:\n        res = [x async for x in self.get(query, *args)]\n        if res:\n            res = res[0]\n        return res\n\n    async def set(\n        self,\n        query: str,\n        *args: typing.Any,\n    ):\n        \"\"\"\n        The set_query_handler function takes a query string\n        and an arbitrary number of arguments.\n        It then executes the given query with the given arguments.\n        Used for INSERT queries.\n        Args:\n            query (str) Store the query string\n            *args (Any) Pass any additional arguments to the query\n        \"\"\"\n        if self.pool is None:\n            raise utils.DatabaseConnectionError()\n\n        async with self.pool.acquire() as conn:\n            async with conn.transaction():\n                await conn.execute(query, *args)\n\n    async def set_many(\n        self,\n        query: str,\n        *args: typing.Any,\n    ):\n        \"\"\"\n        The set_query_handler function takes a query string\n        and an arbitrary number of arguments.\n        It then executes the given query with the given arguments.\n        Used for INSERT queries.\n        Args:\n            query (str) Store the query string\n            *args (Any) Pass any additional arguments to the query\n        \"\"\"\n        if self.pool is None:\n            raise utils.DatabaseConnectionError()\n\n        async with self.pool.acquire() as conn:\n            async with conn.transaction():\n                await conn.executemany(query, *args)\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 3435,
                    "snippet": {
                      "text": "import logging\nimport textwrap\nimport typing\n\nimport asyncpg\n\nimport utils\n\n\nclass DatabaseConnection:\n    \"\"\"Handles asyncronous context manager for database connection.\"\"\"\n\n    def __init__(self, dsn: str):\n        self.connection: asyncpg.Pool | None = None\n        self.dsn = dsn\n\n    async def __aenter__(self):\n        self.connection = await asyncpg.create_pool(self.dsn)\n        return self.connection\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await self.connection.close()\n\n\nclass DotRecord(asyncpg.Record):\n    \"\"\"Adds dot access to asyncpg.Record.\"\"\"\n\n    def __getattr__(self, attr: str):\n        return super().__getitem__(attr)\n\n\nclass Database:\n    \"\"\"Handles all database transactions.\"\"\"\n\n    def __init__(self, conn: asyncpg.Pool):\n        self.logger: logging.Logger | None = None\n        self.pool = conn\n\n    async def get(\n        self,\n        query: str,\n        *args: typing.Any,\n    ) -> typing.Generator[None, None, DotRecord]:\n        \"\"\"\n        The get_query_handler function is a helper function\n        that takes in a model and query string.\n        It then returns the results of the query as an array of records.\n        Args:\n            query (str) Specify the query that will be executed\n            *args (Any) Pass in any additional arguments that are\n                needed to be passed into the query\n        Yields:\n            DotRecords\n        \"\"\"\n        if self.pool is None:\n            raise utils.DatabaseConnectionError()\n        query = textwrap.dedent(query)\n        self.logger.debug(query)\n        self.logger.debug(args)\n\n        async with self.pool.acquire() as conn:\n            async with conn.transaction():\n                async for record in conn.cursor(\n                    query,\n                    *args,\n                    record_class=DotRecord,\n                ):\n                    yield record\n\n    async def get_row(self, query: str, *args: typing.Any) -> DotRecord | None:\n        res = [x async for x in self.get(query, *args)]\n        if res:\n            res = res[0]\n        return res\n\n    async def set(\n        self,\n        query: str,\n        *args: typing.Any,\n    ):\n        \"\"\"\n        The set_query_handler function takes a query string\n        and an arbitrary number of arguments.\n        It then executes the given query with the given arguments.\n        Used for INSERT queries.\n        Args:\n            query (str) Store the query string\n            *args (Any) Pass any additional arguments to the query\n        \"\"\"\n        if self.pool is None:\n            raise utils.DatabaseConnectionError()\n\n        async with self.pool.acquire() as conn:\n            async with conn.transaction():\n                await conn.execute(query, *args)\n\n    async def set_many(\n        self,\n        query: str,\n        *args: typing.Any,\n    ):\n        \"\"\"\n        The set_query_handler function takes a query string\n        and an arbitrary number of arguments.\n        It then executes the given query with the given arguments.\n        Used for INSERT queries.\n        Args:\n            query (str) Store the query string\n            *args (Any) Pass any additional arguments to the query\n        \"\"\"\n        if self.pool is None:\n            raise utils.DatabaseConnectionError()\n\n        async with self.pool.acquire() as conn:\n            async with conn.transaction():\n                await conn.executemany(query, *args)\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "6ea279dd60de6f621cc65a925944d068830e39de217b4e0952cd90a1341f241a"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "views/roles.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 2784,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport typing\n\nimport discord\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nasync def add_remove_roles(itx: core.Interaction[core.Genji], role):\n    if role in itx.user.roles:\n        await itx.user.remove_roles(role)\n    else:\n        await itx.user.add_roles(role)\n\n\n# TODO: Change these roles\nclass RegionRoles(discord.ui.View):\n    def __init__(self):\n        super().__init__(timeout=None)\n\n    @discord.ui.button(\n        label=\"NA\",\n        style=discord.ButtonStyle.blurple,\n        custom_id=\"na_role\",\n    )\n    async def na_role(self, itx: core.Interaction[core.Genji], button: discord.Button):\n        await itx.response.defer(ephemeral=True)\n        role = itx.guild.get_role(1034572821139050567)\n        await add_remove_roles(itx, role)\n\n    @discord.ui.button(\n        label=\"EU\",\n        style=discord.ButtonStyle.blurple,\n        custom_id=\"eu_role\",\n    )\n    async def eu_role(self, itx: core.Interaction[core.Genji], button: discord.Button):\n        await itx.response.defer(ephemeral=True)\n        role = itx.guild.get_role(1054431520170971287)\n        await add_remove_roles(itx, role)\n\n    @discord.ui.button(\n        label=\"ASIA\",\n        style=discord.ButtonStyle.blurple,\n        custom_id=\"asia_role\",\n    )\n    async def asia_role(\n        self, itx: core.Interaction[core.Genji], button: discord.Button\n    ):\n        await itx.response.defer(ephemeral=True)\n        role = itx.guild.get_role(1054431532598702170)\n        await add_remove_roles(itx, role)\n\n    @discord.ui.button(\n        label=\"CHINA\",\n        style=discord.ButtonStyle.blurple,\n        custom_id=\"china_role\",\n    )\n    async def china_role(\n        self, itx: core.Interaction[core.Genji], button: discord.Button\n    ):\n        await itx.response.defer(ephemeral=True)\n        role = itx.guild.get_role(1054431547257790524)\n        await add_remove_roles(itx, role)\n\n\nclass ConsoleRoles(discord.ui.View):\n    def __init__(self):\n        super().__init__(timeout=None)\n\n    @discord.ui.button(\n        label=\"Console\",\n        emoji=\"🎮\",\n        style=discord.ButtonStyle.blurple,\n        custom_id=\"console_role\",\n    )\n    async def console_role(\n        self, itx: core.Interaction[core.Genji], button: discord.Button\n    ):\n        await itx.response.defer(ephemeral=True)\n        role = itx.guild.get_role(1060611275916324874)\n        await add_remove_roles(itx, role)\n\n    @discord.ui.button(\n        label=\"PC\",\n        emoji=\"⌨\",\n        style=discord.ButtonStyle.blurple,\n        custom_id=\"pc_role\",\n    )\n    async def pc_role(self, itx: core.Interaction[core.Genji], button: discord.Button):\n        await itx.response.defer(ephemeral=True)\n        role = itx.guild.get_role(1060611282883063919)\n        await add_remove_roles(itx, role)\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 2784,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport typing\n\nimport discord\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nasync def add_remove_roles(itx: core.Interaction[core.Genji], role):\n    if role in itx.user.roles:\n        await itx.user.remove_roles(role)\n    else:\n        await itx.user.add_roles(role)\n\n\n# TODO: Change these roles\nclass RegionRoles(discord.ui.View):\n    def __init__(self):\n        super().__init__(timeout=None)\n\n    @discord.ui.button(\n        label=\"NA\",\n        style=discord.ButtonStyle.blurple,\n        custom_id=\"na_role\",\n    )\n    async def na_role(self, itx: core.Interaction[core.Genji], button: discord.Button):\n        await itx.response.defer(ephemeral=True)\n        role = itx.guild.get_role(1034572821139050567)\n        await add_remove_roles(itx, role)\n\n    @discord.ui.button(\n        label=\"EU\",\n        style=discord.ButtonStyle.blurple,\n        custom_id=\"eu_role\",\n    )\n    async def eu_role(self, itx: core.Interaction[core.Genji], button: discord.Button):\n        await itx.response.defer(ephemeral=True)\n        role = itx.guild.get_role(1054431520170971287)\n        await add_remove_roles(itx, role)\n\n    @discord.ui.button(\n        label=\"ASIA\",\n        style=discord.ButtonStyle.blurple,\n        custom_id=\"asia_role\",\n    )\n    async def asia_role(\n        self, itx: core.Interaction[core.Genji], button: discord.Button\n    ):\n        await itx.response.defer(ephemeral=True)\n        role = itx.guild.get_role(1054431532598702170)\n        await add_remove_roles(itx, role)\n\n    @discord.ui.button(\n        label=\"CHINA\",\n        style=discord.ButtonStyle.blurple,\n        custom_id=\"china_role\",\n    )\n    async def china_role(\n        self, itx: core.Interaction[core.Genji], button: discord.Button\n    ):\n        await itx.response.defer(ephemeral=True)\n        role = itx.guild.get_role(1054431547257790524)\n        await add_remove_roles(itx, role)\n\n\nclass ConsoleRoles(discord.ui.View):\n    def __init__(self):\n        super().__init__(timeout=None)\n\n    @discord.ui.button(\n        label=\"Console\",\n        emoji=\"🎮\",\n        style=discord.ButtonStyle.blurple,\n        custom_id=\"console_role\",\n    )\n    async def console_role(\n        self, itx: core.Interaction[core.Genji], button: discord.Button\n    ):\n        await itx.response.defer(ephemeral=True)\n        role = itx.guild.get_role(1060611275916324874)\n        await add_remove_roles(itx, role)\n\n    @discord.ui.button(\n        label=\"PC\",\n        emoji=\"⌨\",\n        style=discord.ButtonStyle.blurple,\n        custom_id=\"pc_role\",\n    )\n    async def pc_role(self, itx: core.Interaction[core.Genji], button: discord.Button):\n        await itx.response.defer(ephemeral=True)\n        role = itx.guild.get_role(1060611282883063919)\n        await add_remove_roles(itx, role)\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "1bf9e1ea61fd276901ee1286ffcdf04407c4775bd70ffcbcfab50108c0c9389a"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyInterpreterInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No Python interpreter configured for the project",
              "markdown": "No Python interpreter configured for the project"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "views/tags.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 1912,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport typing\n\nimport discord.ui\nfrom discord import app_commands\n\nimport views\nfrom utils import NUMBER_EMOJI\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nclass TagFuzzView(discord.ui.View):\n    def __init__(self, itx: core.Interaction[core.Genji], options: list[str]):\n        super().__init__(timeout=None)\n        self.itx = itx\n        self.matches.options = [\n            discord.SelectOption(label=x, value=x, emoji=NUMBER_EMOJI[i + 1])\n            for i, x in enumerate(options)\n        ]\n\n    @discord.ui.select()\n    async def matches(\n        self, itx: core.Interaction[core.Genji], select: discord.SelectMenu\n    ):\n        await itx.response.defer()\n        tag = [\n            x\n            async for x in itx.client.database.get(\n                \"SELECT * FROM tags WHERE name=$1\",\n                select.values[0],\n            )\n        ][0]\n\n        await itx.edit_original_response(\n            content=f\"**{tag.name}**\\n\\n{tag.value}\", view=None, embed=None\n        )\n\n\nclass TagCreate(discord.ui.Modal, title=\"Create Tag\"):\n    name = discord.ui.TextInput(label=\"Name\")\n    value = discord.ui.TextInput(label=\"Value\", style=discord.TextStyle.paragraph)\n\n    async def on_submit(self, itx: core.Interaction[core.Genji]):\n\n        view = views.Confirm(itx)\n        await itx.response.send_message(\n            content=f\"Is this correct?\\n\\n**{self.name}**\\n\\n{self.value}\",\n            view=view,\n            ephemeral=True,\n        )\n        await view.wait()\n        if not view.value:\n            return\n\n        await itx.client.database.set(\n            \"INSERT INTO tags (name, value) VALUES ($1, $2);\",\n            self.name.value,\n            self.value.value,\n        )\n        itx.client.tag_cache.append(self.name.value)\n        itx.client.tag_choices.append(\n            app_commands.Choice(name=self.name.value, value=self.name.value)\n        )\n"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 1912,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport typing\n\nimport discord.ui\nfrom discord import app_commands\n\nimport views\nfrom utils import NUMBER_EMOJI\n\nif typing.TYPE_CHECKING:\n    import core\n\n\nclass TagFuzzView(discord.ui.View):\n    def __init__(self, itx: core.Interaction[core.Genji], options: list[str]):\n        super().__init__(timeout=None)\n        self.itx = itx\n        self.matches.options = [\n            discord.SelectOption(label=x, value=x, emoji=NUMBER_EMOJI[i + 1])\n            for i, x in enumerate(options)\n        ]\n\n    @discord.ui.select()\n    async def matches(\n        self, itx: core.Interaction[core.Genji], select: discord.SelectMenu\n    ):\n        await itx.response.defer()\n        tag = [\n            x\n            async for x in itx.client.database.get(\n                \"SELECT * FROM tags WHERE name=$1\",\n                select.values[0],\n            )\n        ][0]\n\n        await itx.edit_original_response(\n            content=f\"**{tag.name}**\\n\\n{tag.value}\", view=None, embed=None\n        )\n\n\nclass TagCreate(discord.ui.Modal, title=\"Create Tag\"):\n    name = discord.ui.TextInput(label=\"Name\")\n    value = discord.ui.TextInput(label=\"Value\", style=discord.TextStyle.paragraph)\n\n    async def on_submit(self, itx: core.Interaction[core.Genji]):\n\n        view = views.Confirm(itx)\n        await itx.response.send_message(\n            content=f\"Is this correct?\\n\\n**{self.name}**\\n\\n{self.value}\",\n            view=view,\n            ephemeral=True,\n        )\n        await view.wait()\n        if not view.value:\n            return\n\n        await itx.client.database.set(\n            \"INSERT INTO tags (name, value) VALUES ($1, $2);\",\n            self.name.value,\n            self.value.value,\n        )\n        itx.client.tag_cache.append(self.name.value)\n        itx.client.tag_choices.append(\n            app_commands.Choice(name=self.name.value, value=self.name.value)\n        )\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "7990ee39e963ef10500e49e8690b52b205c8873cb2371fa2b588ba70b2e4bb34"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference '__future__'",
              "markdown": "Unresolved reference '__future__'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/genji.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 6,
                    "charOffset": 5,
                    "charLength": 10,
                    "snippet": {
                      "text": "__future__"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 50,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport logging"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "b2ce558cbe76a5226cc9ef632f941382403a25f3be1e73050483358b4277a142"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "Unresolved reference 'annotations'",
              "markdown": "Unresolved reference 'annotations'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/genji.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 1,
                    "startColumn": 24,
                    "charOffset": 23,
                    "charLength": 11,
                    "snippet": {
                      "text": "annotations"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 50,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport logging"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "d816f6cfcc7ea11d591dd76610bbc924459617fdab7c9f65b3d4bb2fc12e1ec5"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No module named 'logging'",
              "markdown": "No module named 'logging'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/genji.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 3,
                    "startColumn": 8,
                    "charOffset": 43,
                    "charLength": 7,
                    "snippet": {
                      "text": "logging"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 1,
                    "startColumn": 1,
                    "charOffset": 0,
                    "charLength": 65,
                    "snippet": {
                      "text": "from __future__ import annotations\n\nimport logging\nimport typing\n"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "783a55224ab6ef9e1e15a3efbadebc6cad649510bd243e0cd339dbdc9e8c6a9c"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          },
          {
            "ruleId": "PyUnresolvedReferencesInspection",
            "kind": "fail",
            "level": "error",
            "message": {
              "text": "No module named 'typing'",
              "markdown": "No module named 'typing'"
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "core/genji.py",
                    "uriBaseId": "SRCROOT"
                  },
                  "region": {
                    "startLine": 4,
                    "startColumn": 8,
                    "charOffset": 58,
                    "charLength": 6,
                    "snippet": {
                      "text": "typing"
                    },
                    "sourceLanguage": "Python"
                  },
                  "contextRegion": {
                    "startLine": 2,
                    "startColumn": 1,
                    "charOffset": 35,
                    "charLength": 45,
                    "snippet": {
                      "text": "\nimport logging\nimport typing\n\nimport discord"
                    }
                  }
                },
                "logicalLocations": [
                  {
                    "fullyQualifiedName": "project",
                    "kind": "module"
                  }
                ]
              }
            ],
            "partialFingerprints": {
              "equalIndicator/v1": "68ca5c5da78aecc9dffbf5744166798afed4f68a242f70783da7ed4e2cec8292"
            },
            "properties": {
              "ideaSeverity": "ERROR"
            }
          }
        ],
        "configProfile": "absent",
        "deviceId": "200820300000000-53de-52b4-5ae4-59f371c57ffb"
      }
    }
  ]
}